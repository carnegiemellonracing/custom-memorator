
cmr-sdcard-fatfs2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096d0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008fc  080098b0  080098b0  0000a8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1ac  0800a1ac  0000c068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a1ac  0800a1ac  0000b1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1b4  0800a1b4  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1b4  0800a1b4  0000b1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1b8  0800a1b8  0000b1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800a1bc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029c8  20000068  0800a224  0000c068  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20002a30  0800a224  0000ca30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001460d  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000310d  00000000  00000000  000206a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  000237b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d84  00000000  00000000  00024970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024894  00000000  00000000  000256f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017aeb  00000000  00000000  00049f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0eab  00000000  00000000  00061a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013291e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005128  00000000  00000000  00132964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00137a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009898 	.word	0x08009898

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08009898 	.word	0x08009898

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char *ptr, int len) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == 1 || fd == 2) {
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d002      	beq.n	8000604 <_write+0x18>
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2b02      	cmp	r3, #2
 8000602:	d111      	bne.n	8000628 <_write+0x3c>
		hstatus = HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	b29a      	uxth	r2, r3
 8000608:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800060c:	68b9      	ldr	r1, [r7, #8]
 800060e:	4809      	ldr	r0, [pc, #36]	@ (8000634 <_write+0x48>)
 8000610:	f003 fb55 	bl	8003cbe <HAL_UART_Transmit>
 8000614:	4603      	mov	r3, r0
 8000616:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 8000618:	7dfb      	ldrb	r3, [r7, #23]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d101      	bne.n	8000622 <_write+0x36>
			return len;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	e004      	b.n	800062c <_write+0x40>
		else
			return -1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000626:	e001      	b.n	800062c <_write+0x40>
	}
	return -1;
 8000628:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800062c:	4618      	mov	r0, r3
 800062e:	3718      	adds	r7, #24
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000108 	.word	0x20000108

08000638 <BSP_SD_IsDetected>:

uint8_t BSP_SD_IsDetected(void) {
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
	__IO uint8_t status = SD_PRESENT;
 800063e:	2301      	movs	r3, #1
 8000640:	71fb      	strb	r3, [r7, #7]

	return status;
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	b2db      	uxtb	r3, r3
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
	...

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fdaf 	bl	80011bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f975 	bl	800094c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 fa8b 	bl	8000b7c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000666:	f000 fa2f 	bl	8000ac8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800066a:	f000 fa57 	bl	8000b1c <MX_USB_OTG_FS_PCD_Init>
  MX_SDIO_SD_Init();
 800066e:	f000 f9d9 	bl	8000a24 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000672:	f004 ff63 	bl	800553c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n\r\n===== START MAIN =====\r\n");
 8000676:	4891      	ldr	r0, [pc, #580]	@ (80008bc <main+0x268>)
 8000678:	f008 faae 	bl	8008bd8 <puts>
  printf("\r\n===== START SD CARD INFO =====\r\n");
 800067c:	4890      	ldr	r0, [pc, #576]	@ (80008c0 <main+0x26c>)
 800067e:	f008 faab 	bl	8008bd8 <puts>
  printf("Block Size   : %lu\r\n", hsd.SdCard.BlockSize);
 8000682:	4b90      	ldr	r3, [pc, #576]	@ (80008c4 <main+0x270>)
 8000684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000686:	4619      	mov	r1, r3
 8000688:	488f      	ldr	r0, [pc, #572]	@ (80008c8 <main+0x274>)
 800068a:	f008 fa3d 	bl	8008b08 <iprintf>
  printf("Block Nmbr   : %lu\r\n", hsd.SdCard.BlockNbr);
 800068e:	4b8d      	ldr	r3, [pc, #564]	@ (80008c4 <main+0x270>)
 8000690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000692:	4619      	mov	r1, r3
 8000694:	488d      	ldr	r0, [pc, #564]	@ (80008cc <main+0x278>)
 8000696:	f008 fa37 	bl	8008b08 <iprintf>
  printf("Card Size    : %lu\r\n", (hsd.SdCard.BlockSize * hsd.SdCard.BlockNbr) / 1000);
 800069a:	4b8a      	ldr	r3, [pc, #552]	@ (80008c4 <main+0x270>)
 800069c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800069e:	4a89      	ldr	r2, [pc, #548]	@ (80008c4 <main+0x270>)
 80006a0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80006a2:	fb02 f303 	mul.w	r3, r2, r3
 80006a6:	4a8a      	ldr	r2, [pc, #552]	@ (80008d0 <main+0x27c>)
 80006a8:	fba2 2303 	umull	r2, r3, r2, r3
 80006ac:	099b      	lsrs	r3, r3, #6
 80006ae:	4619      	mov	r1, r3
 80006b0:	4888      	ldr	r0, [pc, #544]	@ (80008d4 <main+0x280>)
 80006b2:	f008 fa29 	bl	8008b08 <iprintf>
  printf("Card version : %lu\r\n", hsd.SdCard.CardVersion);
 80006b6:	4b83      	ldr	r3, [pc, #524]	@ (80008c4 <main+0x270>)
 80006b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006ba:	4619      	mov	r1, r3
 80006bc:	4886      	ldr	r0, [pc, #536]	@ (80008d8 <main+0x284>)
 80006be:	f008 fa23 	bl	8008b08 <iprintf>
  printf("===== END SD CARD INFO =====\r\n");
 80006c2:	4886      	ldr	r0, [pc, #536]	@ (80008dc <main+0x288>)
 80006c4:	f008 fa88 	bl	8008bd8 <puts>
  printf("\r\n===== START FATFS =====\r\n");
 80006c8:	4885      	ldr	r0, [pc, #532]	@ (80008e0 <main+0x28c>)
 80006ca:	f008 fa85 	bl	8008bd8 <puts>

  FRESULT e;
  uint32_t wbytes, rbytes;

  if ((e=f_mount(&SDFatFS, (TCHAR const*) SDPath, 0)) != FR_OK) {
 80006ce:	2200      	movs	r2, #0
 80006d0:	4984      	ldr	r1, [pc, #528]	@ (80008e4 <main+0x290>)
 80006d2:	4885      	ldr	r0, [pc, #532]	@ (80008e8 <main+0x294>)
 80006d4:	f007 fa8a 	bl	8007bec <f_mount>
 80006d8:	4603      	mov	r3, r0
 80006da:	74fb      	strb	r3, [r7, #19]
 80006dc:	7cfb      	ldrb	r3, [r7, #19]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d006      	beq.n	80006f0 <main+0x9c>
	  printf("FATFS: ERROR. Unable to mount SD Card. Error #%u\r\n", e);
 80006e2:	7cfb      	ldrb	r3, [r7, #19]
 80006e4:	4619      	mov	r1, r3
 80006e6:	4881      	ldr	r0, [pc, #516]	@ (80008ec <main+0x298>)
 80006e8:	f008 fa0e 	bl	8008b08 <iprintf>
	  Error_Handler();
 80006ec:	f000 fb00 	bl	8000cf0 <Error_Handler>
  }

  printf("FATFS: Mounted SD Card successfully.\r\n");
 80006f0:	487f      	ldr	r0, [pc, #508]	@ (80008f0 <main+0x29c>)
 80006f2:	f008 fa71 	bl	8008bd8 <puts>
  printf("FATFS: SD PATH = '%s'\r\n", SDPath);
 80006f6:	497b      	ldr	r1, [pc, #492]	@ (80008e4 <main+0x290>)
 80006f8:	487e      	ldr	r0, [pc, #504]	@ (80008f4 <main+0x2a0>)
 80006fa:	f008 fa05 	bl	8008b08 <iprintf>
  printf("FATFS: Formatting Type = ");
 80006fe:	487e      	ldr	r0, [pc, #504]	@ (80008f8 <main+0x2a4>)
 8000700:	f008 fa02 	bl	8008b08 <iprintf>
  if (SDFatFS.fs_type == FS_FAT12) {
 8000704:	4b78      	ldr	r3, [pc, #480]	@ (80008e8 <main+0x294>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d103      	bne.n	8000714 <main+0xc0>
      printf("FAT12\r\n");
 800070c:	487b      	ldr	r0, [pc, #492]	@ (80008fc <main+0x2a8>)
 800070e:	f008 fa63 	bl	8008bd8 <puts>
 8000712:	e01d      	b.n	8000750 <main+0xfc>
  } else if (SDFatFS.fs_type == FS_FAT16) {
 8000714:	4b74      	ldr	r3, [pc, #464]	@ (80008e8 <main+0x294>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d103      	bne.n	8000724 <main+0xd0>
      printf("FAT16\r\n");
 800071c:	4878      	ldr	r0, [pc, #480]	@ (8000900 <main+0x2ac>)
 800071e:	f008 fa5b 	bl	8008bd8 <puts>
 8000722:	e015      	b.n	8000750 <main+0xfc>
  } else if (SDFatFS.fs_type == FS_FAT32) {
 8000724:	4b70      	ldr	r3, [pc, #448]	@ (80008e8 <main+0x294>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b03      	cmp	r3, #3
 800072a:	d103      	bne.n	8000734 <main+0xe0>
      printf("FAT32\r\n");
 800072c:	4875      	ldr	r0, [pc, #468]	@ (8000904 <main+0x2b0>)
 800072e:	f008 fa53 	bl	8008bd8 <puts>
 8000732:	e00d      	b.n	8000750 <main+0xfc>
  } else if (SDFatFS.fs_type == FS_EXFAT) {
 8000734:	4b6c      	ldr	r3, [pc, #432]	@ (80008e8 <main+0x294>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b04      	cmp	r3, #4
 800073a:	d103      	bne.n	8000744 <main+0xf0>
      printf("exFAT\r\n");
 800073c:	4872      	ldr	r0, [pc, #456]	@ (8000908 <main+0x2b4>)
 800073e:	f008 fa4b 	bl	8008bd8 <puts>
 8000742:	e005      	b.n	8000750 <main+0xfc>
  } else {
      printf("UNKNOWN (%u)\r\n", SDFatFS.fs_type);
 8000744:	4b68      	ldr	r3, [pc, #416]	@ (80008e8 <main+0x294>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	4870      	ldr	r0, [pc, #448]	@ (800090c <main+0x2b8>)
 800074c:	f008 f9dc 	bl	8008b08 <iprintf>
  }


  if ((e=f_open(&SDFile, total_uptime_filename, FA_OPEN_EXISTING | FA_READ)) == FR_OK) {
 8000750:	2201      	movs	r2, #1
 8000752:	496f      	ldr	r1, [pc, #444]	@ (8000910 <main+0x2bc>)
 8000754:	486f      	ldr	r0, [pc, #444]	@ (8000914 <main+0x2c0>)
 8000756:	f007 fa8f 	bl	8007c78 <f_open>
 800075a:	4603      	mov	r3, r0
 800075c:	74fb      	strb	r3, [r7, #19]
 800075e:	7cfb      	ldrb	r3, [r7, #19]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d11c      	bne.n	800079e <main+0x14a>
          if ((e=f_read(&SDFile, &total_uptime, sizeof(total_uptime), (void*) &rbytes)) == FR_OK) {
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2204      	movs	r2, #4
 8000768:	496b      	ldr	r1, [pc, #428]	@ (8000918 <main+0x2c4>)
 800076a:	486a      	ldr	r0, [pc, #424]	@ (8000914 <main+0x2c0>)
 800076c:	f007 fc4c 	bl	8008008 <f_read>
 8000770:	4603      	mov	r3, r0
 8000772:	74fb      	strb	r3, [r7, #19]
 8000774:	7cfb      	ldrb	r3, [r7, #19]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d109      	bne.n	800078e <main+0x13a>
              printf("FATFS: Total uptime = %lu\r\n", total_uptime);
 800077a:	4b67      	ldr	r3, [pc, #412]	@ (8000918 <main+0x2c4>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4619      	mov	r1, r3
 8000780:	4866      	ldr	r0, [pc, #408]	@ (800091c <main+0x2c8>)
 8000782:	f008 f9c1 	bl	8008b08 <iprintf>
              f_close(&SDFile);
 8000786:	4863      	ldr	r0, [pc, #396]	@ (8000914 <main+0x2c0>)
 8000788:	f007 ffaf 	bl	80086ea <f_close>
 800078c:	e034      	b.n	80007f8 <main+0x1a4>
          } else {
              printf("FATFS: ERROR. Unable to read. Error #%u\r\n", e);
 800078e:	7cfb      	ldrb	r3, [r7, #19]
 8000790:	4619      	mov	r1, r3
 8000792:	4863      	ldr	r0, [pc, #396]	@ (8000920 <main+0x2cc>)
 8000794:	f008 f9b8 	bl	8008b08 <iprintf>
              Error_Handler();
 8000798:	f000 faaa 	bl	8000cf0 <Error_Handler>
 800079c:	e02c      	b.n	80007f8 <main+0x1a4>
          }
      } else {
          // File did not exist - let's create it
          if ((e=f_open(&SDFile, total_uptime_filename, FA_CREATE_ALWAYS | FA_WRITE)) == FR_OK) {
 800079e:	220a      	movs	r2, #10
 80007a0:	495b      	ldr	r1, [pc, #364]	@ (8000910 <main+0x2bc>)
 80007a2:	485c      	ldr	r0, [pc, #368]	@ (8000914 <main+0x2c0>)
 80007a4:	f007 fa68 	bl	8007c78 <f_open>
 80007a8:	4603      	mov	r3, r0
 80007aa:	74fb      	strb	r3, [r7, #19]
 80007ac:	7cfb      	ldrb	r3, [r7, #19]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d11b      	bne.n	80007ea <main+0x196>
              if ((e=f_write(&SDFile, &total_uptime, sizeof(total_uptime), (void*) &wbytes)) == FR_OK) {
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	2204      	movs	r2, #4
 80007b8:	4957      	ldr	r1, [pc, #348]	@ (8000918 <main+0x2c4>)
 80007ba:	4856      	ldr	r0, [pc, #344]	@ (8000914 <main+0x2c0>)
 80007bc:	f007 fd83 	bl	80082c6 <f_write>
 80007c0:	4603      	mov	r3, r0
 80007c2:	74fb      	strb	r3, [r7, #19]
 80007c4:	7cfb      	ldrb	r3, [r7, #19]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d107      	bne.n	80007da <main+0x186>
                  printf("File %s created\n", total_uptime_filename);
 80007ca:	4951      	ldr	r1, [pc, #324]	@ (8000910 <main+0x2bc>)
 80007cc:	4855      	ldr	r0, [pc, #340]	@ (8000924 <main+0x2d0>)
 80007ce:	f008 f99b 	bl	8008b08 <iprintf>
                  f_close(&SDFile);
 80007d2:	4850      	ldr	r0, [pc, #320]	@ (8000914 <main+0x2c0>)
 80007d4:	f007 ff89 	bl	80086ea <f_close>
 80007d8:	e00e      	b.n	80007f8 <main+0x1a4>
              } else {
                  printf("FATFS: ERROR. Unable to write. Error #%u\r\n", e);
 80007da:	7cfb      	ldrb	r3, [r7, #19]
 80007dc:	4619      	mov	r1, r3
 80007de:	4852      	ldr	r0, [pc, #328]	@ (8000928 <main+0x2d4>)
 80007e0:	f008 f992 	bl	8008b08 <iprintf>
                  Error_Handler();
 80007e4:	f000 fa84 	bl	8000cf0 <Error_Handler>
 80007e8:	e006      	b.n	80007f8 <main+0x1a4>
              }
          } else {
              printf("FATFS: ERROR. Unable to create. Error #%u\r\n", e);
 80007ea:	7cfb      	ldrb	r3, [r7, #19]
 80007ec:	4619      	mov	r1, r3
 80007ee:	484f      	ldr	r0, [pc, #316]	@ (800092c <main+0x2d8>)
 80007f0:	f008 f98a 	bl	8008b08 <iprintf>
              Error_Handler();
 80007f4:	f000 fa7c 	bl	8000cf0 <Error_Handler>
          }
      }

  printf("===== END FATFS =====\r\n");
 80007f8:	484d      	ldr	r0, [pc, #308]	@ (8000930 <main+0x2dc>)
 80007fa:	f008 f9ed 	bl	8008bd8 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t now = 0, loop_cnt = 0, next_blink = 500, next_tick = 1000;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
 8000806:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000810:	617b      	str	r3, [r7, #20]
  printf("===== START MAIN LOOP =====\r\n");
 8000812:	4848      	ldr	r0, [pc, #288]	@ (8000934 <main+0x2e0>)
 8000814:	f008 f9e0 	bl	8008bd8 <puts>
  while (1)
  {
	  now = uwTick;
 8000818:	4b47      	ldr	r3, [pc, #284]	@ (8000938 <main+0x2e4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	60fb      	str	r3, [r7, #12]
	  if (now >= next_blink) {
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	429a      	cmp	r2, r3
 8000824:	d307      	bcc.n	8000836 <main+0x1e2>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000826:	2180      	movs	r1, #128	@ 0x80
 8000828:	4844      	ldr	r0, [pc, #272]	@ (800093c <main+0x2e8>)
 800082a:	f000 fff0 	bl	800180e <HAL_GPIO_TogglePin>
		  next_blink += 500;
 800082e:	69bb      	ldr	r3, [r7, #24]
 8000830:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000834:	61bb      	str	r3, [r7, #24]
	  }

	  if (now >= next_tick) {
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	429a      	cmp	r2, r3
 800083c:	d339      	bcc.n	80008b2 <main+0x25e>

		  ++total_uptime;
 800083e:	4b36      	ldr	r3, [pc, #216]	@ (8000918 <main+0x2c4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	4a34      	ldr	r2, [pc, #208]	@ (8000918 <main+0x2c4>)
 8000846:	6013      	str	r3, [r2, #0]

		  printf("ITER: TICK #%lu (LOOP_CNT = %lu, UPTIME = %lu)\r\n", now/1000, loop_cnt, total_uptime);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	4a21      	ldr	r2, [pc, #132]	@ (80008d0 <main+0x27c>)
 800084c:	fba2 2303 	umull	r2, r3, r2, r3
 8000850:	0999      	lsrs	r1, r3, #6
 8000852:	4b31      	ldr	r3, [pc, #196]	@ (8000918 <main+0x2c4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	69fa      	ldr	r2, [r7, #28]
 8000858:	4839      	ldr	r0, [pc, #228]	@ (8000940 <main+0x2ec>)
 800085a:	f008 f955 	bl	8008b08 <iprintf>


		  if ((e=f_open(&SDFile, total_uptime_filename, FA_OPEN_EXISTING | FA_WRITE)) == FR_OK) {
 800085e:	2202      	movs	r2, #2
 8000860:	492b      	ldr	r1, [pc, #172]	@ (8000910 <main+0x2bc>)
 8000862:	482c      	ldr	r0, [pc, #176]	@ (8000914 <main+0x2c0>)
 8000864:	f007 fa08 	bl	8007c78 <f_open>
 8000868:	4603      	mov	r3, r0
 800086a:	74fb      	strb	r3, [r7, #19]
 800086c:	7cfb      	ldrb	r3, [r7, #19]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d114      	bne.n	800089c <main+0x248>
			  if ((e=f_write(&SDFile, &total_uptime, sizeof(total_uptime), (void*) &wbytes)) != FR_OK) {
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	2204      	movs	r2, #4
 8000878:	4927      	ldr	r1, [pc, #156]	@ (8000918 <main+0x2c4>)
 800087a:	4826      	ldr	r0, [pc, #152]	@ (8000914 <main+0x2c0>)
 800087c:	f007 fd23 	bl	80082c6 <f_write>
 8000880:	4603      	mov	r3, r0
 8000882:	74fb      	strb	r3, [r7, #19]
 8000884:	7cfb      	ldrb	r3, [r7, #19]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d004      	beq.n	8000894 <main+0x240>
				  printf("FATFS: ERROR. Unable to write uptime file. Error #%u\r\n", e);
 800088a:	7cfb      	ldrb	r3, [r7, #19]
 800088c:	4619      	mov	r1, r3
 800088e:	482d      	ldr	r0, [pc, #180]	@ (8000944 <main+0x2f0>)
 8000890:	f008 f93a 	bl	8008b08 <iprintf>
			  }
			  f_close(&SDFile);
 8000894:	481f      	ldr	r0, [pc, #124]	@ (8000914 <main+0x2c0>)
 8000896:	f007 ff28 	bl	80086ea <f_close>
 800089a:	e004      	b.n	80008a6 <main+0x252>
		  } else {
			  printf("FATFS: ERROR. Unable to open uptime file. Error #%u\r\n", e);
 800089c:	7cfb      	ldrb	r3, [r7, #19]
 800089e:	4619      	mov	r1, r3
 80008a0:	4829      	ldr	r0, [pc, #164]	@ (8000948 <main+0x2f4>)
 80008a2:	f008 f931 	bl	8008b08 <iprintf>
		  }

		  loop_cnt = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
		  next_tick += 1000;
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80008b0:	617b      	str	r3, [r7, #20]
	  }

	  ++loop_cnt;
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3301      	adds	r3, #1
 80008b6:	61fb      	str	r3, [r7, #28]
	  now = uwTick;
 80008b8:	e7ae      	b.n	8000818 <main+0x1c4>
 80008ba:	bf00      	nop
 80008bc:	080098b0 	.word	0x080098b0
 80008c0:	080098cc 	.word	0x080098cc
 80008c4:	20000084 	.word	0x20000084
 80008c8:	080098f0 	.word	0x080098f0
 80008cc:	08009908 	.word	0x08009908
 80008d0:	10624dd3 	.word	0x10624dd3
 80008d4:	08009920 	.word	0x08009920
 80008d8:	08009938 	.word	0x08009938
 80008dc:	08009950 	.word	0x08009950
 80008e0:	08009970 	.word	0x08009970
 80008e4:	20000644 	.word	0x20000644
 80008e8:	20000648 	.word	0x20000648
 80008ec:	0800998c 	.word	0x0800998c
 80008f0:	080099c0 	.word	0x080099c0
 80008f4:	080099e8 	.word	0x080099e8
 80008f8:	08009a00 	.word	0x08009a00
 80008fc:	08009a1c 	.word	0x08009a1c
 8000900:	08009a24 	.word	0x08009a24
 8000904:	08009a2c 	.word	0x08009a2c
 8000908:	08009a34 	.word	0x08009a34
 800090c:	08009a3c 	.word	0x08009a3c
 8000910:	08009d00 	.word	0x08009d00
 8000914:	20001680 	.word	0x20001680
 8000918:	20000634 	.word	0x20000634
 800091c:	08009a4c 	.word	0x08009a4c
 8000920:	08009a68 	.word	0x08009a68
 8000924:	08009a94 	.word	0x08009a94
 8000928:	08009aa8 	.word	0x08009aa8
 800092c:	08009ad4 	.word	0x08009ad4
 8000930:	08009b00 	.word	0x08009b00
 8000934:	08009b18 	.word	0x08009b18
 8000938:	2000063c 	.word	0x2000063c
 800093c:	40020400 	.word	0x40020400
 8000940:	08009b38 	.word	0x08009b38
 8000944:	08009b6c 	.word	0x08009b6c
 8000948:	08009ba4 	.word	0x08009ba4

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b094      	sub	sp, #80	@ 0x50
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2234      	movs	r2, #52	@ 0x34
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f008 f944 	bl	8008be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	4b29      	ldr	r3, [pc, #164]	@ (8000a1c <SystemClock_Config+0xd0>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000978:	4a28      	ldr	r2, [pc, #160]	@ (8000a1c <SystemClock_Config+0xd0>)
 800097a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000980:	4b26      	ldr	r3, [pc, #152]	@ (8000a1c <SystemClock_Config+0xd0>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800098c:	2300      	movs	r3, #0
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	4b23      	ldr	r3, [pc, #140]	@ (8000a20 <SystemClock_Config+0xd4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a22      	ldr	r2, [pc, #136]	@ (8000a20 <SystemClock_Config+0xd4>)
 8000996:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	4b20      	ldr	r3, [pc, #128]	@ (8000a20 <SystemClock_Config+0xd4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009ac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80009b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	2302      	movs	r3, #2
 80009b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009bc:	2308      	movs	r3, #8
 80009be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 80009c0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80009c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009c6:	2304      	movs	r3, #4
 80009c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80009ca:	2308      	movs	r3, #8
 80009cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 fd1a 	bl	8002410 <HAL_RCC_OscConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009e2:	f000 f985 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e6:	230f      	movs	r3, #15
 80009e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ea:	2302      	movs	r3, #2
 80009ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009fc:	f107 0308 	add.w	r3, r7, #8
 8000a00:	2103      	movs	r1, #3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 f858 	bl	8001ab8 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a0e:	f000 f96f 	bl	8000cf0 <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3750      	adds	r7, #80	@ 0x50
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40007000 	.word	0x40007000

08000a24 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000a28:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa8 <MX_SDIO_SD_Init+0x84>)
 8000a2a:	4a20      	ldr	r2, [pc, #128]	@ (8000aac <MX_SDIO_SD_Init+0x88>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa8 <MX_SDIO_SD_Init+0x84>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000a34:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa8 <MX_SDIO_SD_Init+0x84>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <MX_SDIO_SD_Init+0x84>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000a40:	4b19      	ldr	r3, [pc, #100]	@ (8000aa8 <MX_SDIO_SD_Init+0x84>)
 8000a42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a46:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a48:	4b17      	ldr	r3, [pc, #92]	@ (8000aa8 <MX_SDIO_SD_Init+0x84>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <MX_SDIO_SD_Init+0x84>)
 8000a50:	2208      	movs	r2, #8
 8000a52:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  printf("\r\n\r\n===== START SDIO INIT =====\r\n");
 8000a54:	4816      	ldr	r0, [pc, #88]	@ (8000ab0 <MX_SDIO_SD_Init+0x8c>)
 8000a56:	f008 f8bf 	bl	8008bd8 <puts>
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <MX_SDIO_SD_Init+0x84>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  if (HAL_SD_Init(&hsd) != HAL_OK) {
 8000a60:	4811      	ldr	r0, [pc, #68]	@ (8000aa8 <MX_SDIO_SD_Init+0x84>)
 8000a62:	f001 ff59 	bl	8002918 <HAL_SD_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d004      	beq.n	8000a76 <MX_SDIO_SD_Init+0x52>
	  printf("SDIO: ERROR. Couldn't init SDIO in 1B\r\n");
 8000a6c:	4811      	ldr	r0, [pc, #68]	@ (8000ab4 <MX_SDIO_SD_Init+0x90>)
 8000a6e:	f008 f8b3 	bl	8008bd8 <puts>
	  Error_Handler();
 8000a72:	f000 f93d 	bl	8000cf0 <Error_Handler>
  }
  printf("SDIO: Successfully init SDIO in 1B\r\n");
 8000a76:	4810      	ldr	r0, [pc, #64]	@ (8000ab8 <MX_SDIO_SD_Init+0x94>)
 8000a78:	f008 f8ae 	bl	8008bd8 <puts>

  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK) {
 8000a7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a80:	4809      	ldr	r0, [pc, #36]	@ (8000aa8 <MX_SDIO_SD_Init+0x84>)
 8000a82:	f002 fd25 	bl	80034d0 <HAL_SD_ConfigWideBusOperation>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d004      	beq.n	8000a96 <MX_SDIO_SD_Init+0x72>
	  printf("SDIO: ERROR. Couldn't init SDIO in 4B\r\n");
 8000a8c:	480b      	ldr	r0, [pc, #44]	@ (8000abc <MX_SDIO_SD_Init+0x98>)
 8000a8e:	f008 f8a3 	bl	8008bd8 <puts>
	  Error_Handler();
 8000a92:	f000 f92d 	bl	8000cf0 <Error_Handler>
  }
  printf("SDIO: Successfully init SDIO in 4B\r\n");
 8000a96:	480a      	ldr	r0, [pc, #40]	@ (8000ac0 <MX_SDIO_SD_Init+0x9c>)
 8000a98:	f008 f89e 	bl	8008bd8 <puts>
  printf("====== END SDIO INIT ======\r\n");
 8000a9c:	4809      	ldr	r0, [pc, #36]	@ (8000ac4 <MX_SDIO_SD_Init+0xa0>)
 8000a9e:	f008 f89b 	bl	8008bd8 <puts>

  /* USER CODE END SDIO_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000084 	.word	0x20000084
 8000aac:	40012c00 	.word	0x40012c00
 8000ab0:	08009bdc 	.word	0x08009bdc
 8000ab4:	08009c00 	.word	0x08009c00
 8000ab8:	08009c28 	.word	0x08009c28
 8000abc:	08009c4c 	.word	0x08009c4c
 8000ac0:	08009c74 	.word	0x08009c74
 8000ac4:	08009c98 	.word	0x08009c98

08000ac8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000acc:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <MX_USART3_UART_Init+0x4c>)
 8000ace:	4a12      	ldr	r2, [pc, #72]	@ (8000b18 <MX_USART3_UART_Init+0x50>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <MX_USART3_UART_Init+0x4c>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <MX_USART3_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <MX_USART3_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <MX_USART3_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <MX_USART3_UART_Init+0x4c>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <MX_USART3_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <MX_USART3_UART_Init+0x4c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000afe:	4805      	ldr	r0, [pc, #20]	@ (8000b14 <MX_USART3_UART_Init+0x4c>)
 8000b00:	f003 f88d 	bl	8003c1e <HAL_UART_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b0a:	f000 f8f1 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000108 	.word	0x20000108
 8000b18:	40004800 	.word	0x40004800

08000b1c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b20:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b22:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b28:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b2a:	2206      	movs	r2, #6
 8000b2c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b34:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b40:	4b0d      	ldr	r3, [pc, #52]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b46:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b52:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b58:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b66:	f000 fe6c 	bl	8001842 <HAL_PCD_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8000b70:	f000 f8be 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000150 	.word	0x20000150

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	@ 0x30
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
 8000b96:	4b52      	ldr	r3, [pc, #328]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a51      	ldr	r2, [pc, #324]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b4f      	ldr	r3, [pc, #316]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	61bb      	str	r3, [r7, #24]
 8000bac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	4b4b      	ldr	r3, [pc, #300]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a4a      	ldr	r2, [pc, #296]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b48      	ldr	r3, [pc, #288]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b44      	ldr	r3, [pc, #272]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a43      	ldr	r2, [pc, #268]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b41      	ldr	r3, [pc, #260]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b3d      	ldr	r3, [pc, #244]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a3c      	ldr	r2, [pc, #240]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000bf0:	f043 0308 	orr.w	r3, r3, #8
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	4b36      	ldr	r3, [pc, #216]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a35      	ldr	r2, [pc, #212]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b33      	ldr	r3, [pc, #204]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a2e      	ldr	r2, [pc, #184]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce0 <MX_GPIO_Init+0x164>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000c40:	4828      	ldr	r0, [pc, #160]	@ (8000ce4 <MX_GPIO_Init+0x168>)
 8000c42:	f000 fdcb 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2140      	movs	r1, #64	@ 0x40
 8000c4a:	4827      	ldr	r0, [pc, #156]	@ (8000ce8 <MX_GPIO_Init+0x16c>)
 8000c4c:	f000 fdc6 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4821      	ldr	r0, [pc, #132]	@ (8000cec <MX_GPIO_Init+0x170>)
 8000c68:	f000 fc24 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c6c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4817      	ldr	r0, [pc, #92]	@ (8000ce4 <MX_GPIO_Init+0x168>)
 8000c86:	f000 fc15 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c8a:	2340      	movs	r3, #64	@ 0x40
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4811      	ldr	r0, [pc, #68]	@ (8000ce8 <MX_GPIO_Init+0x16c>)
 8000ca2:	f000 fc07 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ca6:	2380      	movs	r3, #128	@ 0x80
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480b      	ldr	r0, [pc, #44]	@ (8000ce8 <MX_GPIO_Init+0x16c>)
 8000cba:	f000 fbfb 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_DET_Pin */
  GPIO_InitStruct.Pin = SDIO_DET_Pin;
 8000cbe:	2320      	movs	r3, #32
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SDIO_DET_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <MX_GPIO_Init+0x168>)
 8000cd2:	f000 fbef 	bl	80014b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3730      	adds	r7, #48	@ 0x30
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020400 	.word	0x40020400
 8000ce8:	40021800 	.word	0x40021800
 8000cec:	40020800 	.word	0x40020800

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <Error_Handler+0x8>

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d12:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	4a08      	ldr	r2, [pc, #32]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2e:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800

08000d4c <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0a0      	sub	sp, #128	@ 0x80
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2258      	movs	r2, #88	@ 0x58
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f007 ff3b 	bl	8008be8 <memset>
  if(hsd->Instance==SDIO)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a39      	ldr	r2, [pc, #228]	@ (8000e5c <HAL_SD_MspInit+0x110>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d16b      	bne.n	8000e54 <HAL_SD_MspInit+0x108>

    /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000d7c:	2360      	movs	r3, #96	@ 0x60
 8000d7e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000d80:	2300      	movs	r3, #0
 8000d82:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000d84:	2300      	movs	r3, #0
 8000d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 f8b3 	bl	8001ef8 <HAL_RCCEx_PeriphCLKConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8000d98:	f7ff ffaa 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e60 <HAL_SD_MspInit+0x114>)
 8000da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da4:	4a2e      	ldr	r2, [pc, #184]	@ (8000e60 <HAL_SD_MspInit+0x114>)
 8000da6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000daa:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dac:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <HAL_SD_MspInit+0x114>)
 8000dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	4b28      	ldr	r3, [pc, #160]	@ (8000e60 <HAL_SD_MspInit+0x114>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc0:	4a27      	ldr	r2, [pc, #156]	@ (8000e60 <HAL_SD_MspInit+0x114>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc8:	4b25      	ldr	r3, [pc, #148]	@ (8000e60 <HAL_SD_MspInit+0x114>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	4b21      	ldr	r3, [pc, #132]	@ (8000e60 <HAL_SD_MspInit+0x114>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ddc:	4a20      	ldr	r2, [pc, #128]	@ (8000e60 <HAL_SD_MspInit+0x114>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e60 <HAL_SD_MspInit+0x114>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000df0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000df4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e02:	230c      	movs	r3, #12
 8000e04:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e06:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4815      	ldr	r0, [pc, #84]	@ (8000e64 <HAL_SD_MspInit+0x118>)
 8000e0e:	f000 fb51 	bl	80014b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e24:	230c      	movs	r3, #12
 8000e26:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e28:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480d      	ldr	r0, [pc, #52]	@ (8000e64 <HAL_SD_MspInit+0x118>)
 8000e30:	f000 fb40 	bl	80014b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e34:	2304      	movs	r3, #4
 8000e36:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e44:	230c      	movs	r3, #12
 8000e46:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e48:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4806      	ldr	r0, [pc, #24]	@ (8000e68 <HAL_SD_MspInit+0x11c>)
 8000e50:	f000 fb30 	bl	80014b4 <HAL_GPIO_Init>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 8000e54:	bf00      	nop
 8000e56:	3780      	adds	r7, #128	@ 0x80
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40012c00 	.word	0x40012c00
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020800 	.word	0x40020800
 8000e68:	40020c00 	.word	0x40020c00

08000e6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a19      	ldr	r2, [pc, #100]	@ (8000ef0 <HAL_UART_MspInit+0x84>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d12c      	bne.n	8000ee8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <HAL_UART_MspInit+0x88>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	4a17      	ldr	r2, [pc, #92]	@ (8000ef4 <HAL_UART_MspInit+0x88>)
 8000e98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <HAL_UART_MspInit+0x88>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <HAL_UART_MspInit+0x88>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a10      	ldr	r2, [pc, #64]	@ (8000ef4 <HAL_UART_MspInit+0x88>)
 8000eb4:	f043 0308 	orr.w	r3, r3, #8
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <HAL_UART_MspInit+0x88>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ec6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ed8:	2307      	movs	r3, #7
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <HAL_UART_MspInit+0x8c>)
 8000ee4:	f000 fae6 	bl	80014b4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000ee8:	bf00      	nop
 8000eea:	3728      	adds	r7, #40	@ 0x28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40004800 	.word	0x40004800
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020c00 	.word	0x40020c00

08000efc <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b0a0      	sub	sp, #128	@ 0x80
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2258      	movs	r2, #88	@ 0x58
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f007 fe63 	bl	8008be8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f2a:	d14d      	bne.n	8000fc8 <HAL_PCD_MspInit+0xcc>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f2c:	2320      	movs	r3, #32
 8000f2e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000f30:	2300      	movs	r3, #0
 8000f32:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 ffdd 	bl	8001ef8 <HAL_RCCEx_PeriphCLKConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000f44:	f7ff fed4 	bl	8000cf0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <HAL_PCD_MspInit+0xd4>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f50:	4a1f      	ldr	r2, [pc, #124]	@ (8000fd0 <HAL_PCD_MspInit+0xd4>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f58:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd0 <HAL_PCD_MspInit+0xd4>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f64:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000f68:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f72:	2303      	movs	r3, #3
 8000f74:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f76:	230a      	movs	r3, #10
 8000f78:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4814      	ldr	r0, [pc, #80]	@ (8000fd4 <HAL_PCD_MspInit+0xd8>)
 8000f82:	f000 fa97 	bl	80014b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480e      	ldr	r0, [pc, #56]	@ (8000fd4 <HAL_PCD_MspInit+0xd8>)
 8000f9c:	f000 fa8a 	bl	80014b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <HAL_PCD_MspInit+0xd4>)
 8000fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <HAL_PCD_MspInit+0xd4>)
 8000fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000faa:	6353      	str	r3, [r2, #52]	@ 0x34
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <HAL_PCD_MspInit+0xd4>)
 8000fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb4:	4a06      	ldr	r2, [pc, #24]	@ (8000fd0 <HAL_PCD_MspInit+0xd4>)
 8000fb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fba:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <HAL_PCD_MspInit+0xd4>)
 8000fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000fc8:	bf00      	nop
 8000fca:	3780      	adds	r7, #128	@ 0x80
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <NMI_Handler+0x4>

08000fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <MemManage_Handler+0x4>

08000ff0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <UsageFault_Handler+0x4>

08001000 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102e:	f000 f917 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}

08001036 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	e00a      	b.n	800105e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001048:	f3af 8000 	nop.w
 800104c:	4601      	mov	r1, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1c5a      	adds	r2, r3, #1
 8001052:	60ba      	str	r2, [r7, #8]
 8001054:	b2ca      	uxtb	r2, r1
 8001056:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	dbf0      	blt.n	8001048 <_read+0x12>
  }

  return len;
 8001066:	687b      	ldr	r3, [r7, #4]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001078:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001098:	605a      	str	r2, [r3, #4]
  return 0;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <_isatty>:

int _isatty(int file)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010b0:	2301      	movs	r3, #1
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e0:	4a14      	ldr	r2, [pc, #80]	@ (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d207      	bcs.n	8001118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001108:	f007 fd76 	bl	8008bf8 <__errno>
 800110c:	4603      	mov	r3, r0
 800110e:	220c      	movs	r2, #12
 8001110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001116:	e009      	b.n	800112c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	4a05      	ldr	r2, [pc, #20]	@ (800113c <_sbrk+0x64>)
 8001128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20050000 	.word	0x20050000
 8001138:	00000800 	.word	0x00000800
 800113c:	20000638 	.word	0x20000638
 8001140:	20002a30 	.word	0x20002a30

08001144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <SystemInit+0x20>)
 800114a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800114e:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <SystemInit+0x20>)
 8001150:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001154:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001168:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800116c:	f7ff ffea 	bl	8001144 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001172:	490d      	ldr	r1, [pc, #52]	@ (80011a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001174:	4a0d      	ldr	r2, [pc, #52]	@ (80011ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001188:	4c0a      	ldr	r4, [pc, #40]	@ (80011b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001196:	f007 fd35 	bl	8008c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119a:	f7ff fa5b 	bl	8000654 <main>
  bx  lr    
 800119e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011a0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011ac:	0800a1bc 	.word	0x0800a1bc
  ldr r2, =_sbss
 80011b0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011b4:	20002a30 	.word	0x20002a30

080011b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC_IRQHandler>
	...

080011bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c0:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0d      	ldr	r2, [pc, #52]	@ (80011fc <HAL_Init+0x40>)
 80011c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <HAL_Init+0x40>)
 80011d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <HAL_Init+0x40>)
 80011de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 f931 	bl	800144c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 f808 	bl	8001200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f0:	f7ff fd84 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023c00 	.word	0x40023c00

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <HAL_InitTick+0x54>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_InitTick+0x58>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f93b 	bl	800149a <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00e      	b.n	800124c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d80a      	bhi.n	800124a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800123c:	f000 f911 	bl	8001462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4a06      	ldr	r2, [pc, #24]	@ (800125c <HAL_InitTick+0x5c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000000 	.word	0x20000000
 8001258:	20000008 	.word	0x20000008
 800125c:	20000004 	.word	0x20000004

08001260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_IncTick+0x20>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_IncTick+0x24>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <HAL_IncTick+0x24>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008
 8001284:	2000063c 	.word	0x2000063c

08001288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b03      	ldr	r3, [pc, #12]	@ (800129c <HAL_GetTick+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	2000063c 	.word	0x2000063c

080012a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff ffee 	bl	8001288 <HAL_GetTick>
 80012ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012b8:	d005      	beq.n	80012c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ba:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <HAL_Delay+0x44>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4413      	add	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012c6:	bf00      	nop
 80012c8:	f7ff ffde 	bl	8001288 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d8f7      	bhi.n	80012c8 <HAL_Delay+0x28>
  {
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000008 	.word	0x20000008

080012e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001310:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	@ (800132c <__NVIC_SetPriorityGrouping+0x44>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	@ (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	@ (800139c <__NVIC_SetPriority+0x50>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	@ 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	@ 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001418:	d301      	bcc.n	800141e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2301      	movs	r3, #1
 800141c:	e00f      	b.n	800143e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141e:	4a0a      	ldr	r2, [pc, #40]	@ (8001448 <SysTick_Config+0x40>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001426:	210f      	movs	r1, #15
 8001428:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800142c:	f7ff ff8e 	bl	800134c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <SysTick_Config+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001436:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <SysTick_Config+0x40>)
 8001438:	2207      	movs	r2, #7
 800143a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000e010 	.word	0xe000e010

0800144c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff47 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff5c 	bl	8001330 <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff8e 	bl	80013a0 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5d 	bl	800134c <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffb0 	bl	8001408 <SysTick_Config>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	@ 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	e165      	b.n	800179c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014d0:	2201      	movs	r2, #1
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	f040 8154 	bne.w	8001796 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d005      	beq.n	8001506 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001502:	2b02      	cmp	r3, #2
 8001504:	d130      	bne.n	8001568 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	2203      	movs	r2, #3
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800153c:	2201      	movs	r2, #1
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f003 0201 	and.w	r2, r3, #1
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b03      	cmp	r3, #3
 8001572:	d017      	beq.n	80015a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d123      	bne.n	80015f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	08da      	lsrs	r2, r3, #3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3208      	adds	r2, #8
 80015b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	220f      	movs	r2, #15
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	691a      	ldr	r2, [r3, #16]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	08da      	lsrs	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3208      	adds	r2, #8
 80015f2:	69b9      	ldr	r1, [r7, #24]
 80015f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0203 	and.w	r2, r3, #3
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80ae 	beq.w	8001796 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b5d      	ldr	r3, [pc, #372]	@ (80017b4 <HAL_GPIO_Init+0x300>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	4a5c      	ldr	r2, [pc, #368]	@ (80017b4 <HAL_GPIO_Init+0x300>)
 8001644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001648:	6453      	str	r3, [r2, #68]	@ 0x44
 800164a:	4b5a      	ldr	r3, [pc, #360]	@ (80017b4 <HAL_GPIO_Init+0x300>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001656:	4a58      	ldr	r2, [pc, #352]	@ (80017b8 <HAL_GPIO_Init+0x304>)
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	3302      	adds	r3, #2
 800165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	220f      	movs	r2, #15
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a4f      	ldr	r2, [pc, #316]	@ (80017bc <HAL_GPIO_Init+0x308>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d025      	beq.n	80016ce <HAL_GPIO_Init+0x21a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4e      	ldr	r2, [pc, #312]	@ (80017c0 <HAL_GPIO_Init+0x30c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01f      	beq.n	80016ca <HAL_GPIO_Init+0x216>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4d      	ldr	r2, [pc, #308]	@ (80017c4 <HAL_GPIO_Init+0x310>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d019      	beq.n	80016c6 <HAL_GPIO_Init+0x212>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4c      	ldr	r2, [pc, #304]	@ (80017c8 <HAL_GPIO_Init+0x314>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d013      	beq.n	80016c2 <HAL_GPIO_Init+0x20e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4b      	ldr	r2, [pc, #300]	@ (80017cc <HAL_GPIO_Init+0x318>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d00d      	beq.n	80016be <HAL_GPIO_Init+0x20a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4a      	ldr	r2, [pc, #296]	@ (80017d0 <HAL_GPIO_Init+0x31c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d007      	beq.n	80016ba <HAL_GPIO_Init+0x206>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a49      	ldr	r2, [pc, #292]	@ (80017d4 <HAL_GPIO_Init+0x320>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d101      	bne.n	80016b6 <HAL_GPIO_Init+0x202>
 80016b2:	2306      	movs	r3, #6
 80016b4:	e00c      	b.n	80016d0 <HAL_GPIO_Init+0x21c>
 80016b6:	2307      	movs	r3, #7
 80016b8:	e00a      	b.n	80016d0 <HAL_GPIO_Init+0x21c>
 80016ba:	2305      	movs	r3, #5
 80016bc:	e008      	b.n	80016d0 <HAL_GPIO_Init+0x21c>
 80016be:	2304      	movs	r3, #4
 80016c0:	e006      	b.n	80016d0 <HAL_GPIO_Init+0x21c>
 80016c2:	2303      	movs	r3, #3
 80016c4:	e004      	b.n	80016d0 <HAL_GPIO_Init+0x21c>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e002      	b.n	80016d0 <HAL_GPIO_Init+0x21c>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <HAL_GPIO_Init+0x21c>
 80016ce:	2300      	movs	r3, #0
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	f002 0203 	and.w	r2, r2, #3
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	4093      	lsls	r3, r2
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e0:	4935      	ldr	r1, [pc, #212]	@ (80017b8 <HAL_GPIO_Init+0x304>)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	089b      	lsrs	r3, r3, #2
 80016e6:	3302      	adds	r3, #2
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ee:	4b3a      	ldr	r3, [pc, #232]	@ (80017d8 <HAL_GPIO_Init+0x324>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001712:	4a31      	ldr	r2, [pc, #196]	@ (80017d8 <HAL_GPIO_Init+0x324>)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001718:	4b2f      	ldr	r3, [pc, #188]	@ (80017d8 <HAL_GPIO_Init+0x324>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800173c:	4a26      	ldr	r2, [pc, #152]	@ (80017d8 <HAL_GPIO_Init+0x324>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001742:	4b25      	ldr	r3, [pc, #148]	@ (80017d8 <HAL_GPIO_Init+0x324>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001766:	4a1c      	ldr	r2, [pc, #112]	@ (80017d8 <HAL_GPIO_Init+0x324>)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800176c:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <HAL_GPIO_Init+0x324>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001790:	4a11      	ldr	r2, [pc, #68]	@ (80017d8 <HAL_GPIO_Init+0x324>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3301      	adds	r3, #1
 800179a:	61fb      	str	r3, [r7, #28]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	2b0f      	cmp	r3, #15
 80017a0:	f67f ae96 	bls.w	80014d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3724      	adds	r7, #36	@ 0x24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40013800 	.word	0x40013800
 80017bc:	40020000 	.word	0x40020000
 80017c0:	40020400 	.word	0x40020400
 80017c4:	40020800 	.word	0x40020800
 80017c8:	40020c00 	.word	0x40020c00
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40021400 	.word	0x40021400
 80017d4:	40021800 	.word	0x40021800
 80017d8:	40013c00 	.word	0x40013c00

080017dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
 80017e8:	4613      	mov	r3, r2
 80017ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017ec:	787b      	ldrb	r3, [r7, #1]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017f8:	e003      	b.n	8001802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017fa:	887b      	ldrh	r3, [r7, #2]
 80017fc:	041a      	lsls	r2, r3, #16
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	619a      	str	r2, [r3, #24]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800180e:	b480      	push	{r7}
 8001810:	b085      	sub	sp, #20
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001820:	887a      	ldrh	r2, [r7, #2]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	041a      	lsls	r2, r3, #16
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	43d9      	mvns	r1, r3
 800182c:	887b      	ldrh	r3, [r7, #2]
 800182e:	400b      	ands	r3, r1
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	619a      	str	r2, [r3, #24]
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af02      	add	r7, sp, #8
 8001848:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e108      	b.n	8001a66 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d106      	bne.n	8001874 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fb44 	bl	8000efc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2203      	movs	r2, #3
 8001878:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001882:	d102      	bne.n	800188a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f003 fbb8 	bl	8005004 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	7c1a      	ldrb	r2, [r3, #16]
 800189c:	f88d 2000 	strb.w	r2, [sp]
 80018a0:	3304      	adds	r3, #4
 80018a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018a4:	f003 fb4a 	bl	8004f3c <USB_CoreInit>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2202      	movs	r2, #2
 80018b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0d5      	b.n	8001a66 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f003 fbb0 	bl	8005026 <USB_SetCurrentMode>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0c6      	b.n	8001a66 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	e04a      	b.n	8001974 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	3315      	adds	r3, #21
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3314      	adds	r3, #20
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	b298      	uxth	r0, r3
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	332e      	adds	r3, #46	@ 0x2e
 800191a:	4602      	mov	r2, r0
 800191c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800191e:	7bfa      	ldrb	r2, [r7, #15]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	3318      	adds	r3, #24
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	331c      	adds	r3, #28
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	3320      	adds	r3, #32
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800195a:	7bfa      	ldrb	r2, [r7, #15]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	3324      	adds	r3, #36	@ 0x24
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	3301      	adds	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	791b      	ldrb	r3, [r3, #4]
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	429a      	cmp	r2, r3
 800197c:	d3af      	bcc.n	80018de <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]
 8001982:	e044      	b.n	8001a0e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800199a:	7bfa      	ldrb	r2, [r7, #15]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019c6:	7bfa      	ldrb	r2, [r7, #15]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019f2:	7bfa      	ldrb	r2, [r7, #15]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	73fb      	strb	r3, [r7, #15]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	791b      	ldrb	r3, [r3, #4]
 8001a12:	7bfa      	ldrb	r2, [r7, #15]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d3b5      	bcc.n	8001984 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7c1a      	ldrb	r2, [r3, #16]
 8001a20:	f88d 2000 	strb.w	r2, [sp]
 8001a24:	3304      	adds	r3, #4
 8001a26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a28:	f003 fb4a 	bl	80050c0 <USB_DevInit>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2202      	movs	r2, #2
 8001a36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e013      	b.n	8001a66 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7b1b      	ldrb	r3, [r3, #12]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d102      	bne.n	8001a5a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f80a 	bl	8001a6e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f003 fd05 	bl	800546e <USB_DevDisconnect>

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b085      	sub	sp, #20
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa0:	f043 0303 	orr.w	r3, r3, #3
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0cc      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001acc:	4b68      	ldr	r3, [pc, #416]	@ (8001c70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d90c      	bls.n	8001af4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b65      	ldr	r3, [pc, #404]	@ (8001c70 <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	4b63      	ldr	r3, [pc, #396]	@ (8001c70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0b8      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d020      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b0c:	4b59      	ldr	r3, [pc, #356]	@ (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4a58      	ldr	r2, [pc, #352]	@ (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b24:	4b53      	ldr	r3, [pc, #332]	@ (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4a52      	ldr	r2, [pc, #328]	@ (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b30:	4b50      	ldr	r3, [pc, #320]	@ (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	494d      	ldr	r1, [pc, #308]	@ (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d044      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b47      	ldr	r3, [pc, #284]	@ (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d119      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e07f      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d003      	beq.n	8001b76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b76:	4b3f      	ldr	r3, [pc, #252]	@ (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d109      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e06f      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b86:	4b3b      	ldr	r3, [pc, #236]	@ (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e067      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b96:	4b37      	ldr	r3, [pc, #220]	@ (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f023 0203 	bic.w	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	4934      	ldr	r1, [pc, #208]	@ (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba8:	f7ff fb6e 	bl	8001288 <HAL_GetTick>
 8001bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb0:	f7ff fb6a 	bl	8001288 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e04f      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 020c 	and.w	r2, r3, #12
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d1eb      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd8:	4b25      	ldr	r3, [pc, #148]	@ (8001c70 <HAL_RCC_ClockConfig+0x1b8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d20c      	bcs.n	8001c00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be6:	4b22      	ldr	r3, [pc, #136]	@ (8001c70 <HAL_RCC_ClockConfig+0x1b8>)
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bee:	4b20      	ldr	r3, [pc, #128]	@ (8001c70 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e032      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c0c:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4916      	ldr	r1, [pc, #88]	@ (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d009      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c2a:	4b12      	ldr	r3, [pc, #72]	@ (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	490e      	ldr	r1, [pc, #56]	@ (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c3e:	f000 f821 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8001c42:	4602      	mov	r2, r0
 8001c44:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	490a      	ldr	r1, [pc, #40]	@ (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	5ccb      	ldrb	r3, [r1, r3]
 8001c52:	fa22 f303 	lsr.w	r3, r2, r3
 8001c56:	4a09      	ldr	r2, [pc, #36]	@ (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff face 	bl	8001200 <HAL_InitTick>

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023c00 	.word	0x40023c00
 8001c74:	40023800 	.word	0x40023800
 8001c78:	08009d0c 	.word	0x08009d0c
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c88:	b094      	sub	sp, #80	@ 0x50
 8001c8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c9c:	4b79      	ldr	r3, [pc, #484]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d00d      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	f200 80e1 	bhi.w	8001e70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d003      	beq.n	8001cbe <HAL_RCC_GetSysClockFreq+0x3a>
 8001cb6:	e0db      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cb8:	4b73      	ldr	r3, [pc, #460]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cbc:	e0db      	b.n	8001e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cbe:	4b73      	ldr	r3, [pc, #460]	@ (8001e8c <HAL_RCC_GetSysClockFreq+0x208>)
 8001cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cc2:	e0d8      	b.n	8001e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cc4:	4b6f      	ldr	r3, [pc, #444]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ccc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cce:	4b6d      	ldr	r3, [pc, #436]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d063      	beq.n	8001da2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cda:	4b6a      	ldr	r3, [pc, #424]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	099b      	lsrs	r3, r3, #6
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ce4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cec:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cee:	2300      	movs	r3, #0
 8001cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cf6:	4622      	mov	r2, r4
 8001cf8:	462b      	mov	r3, r5
 8001cfa:	f04f 0000 	mov.w	r0, #0
 8001cfe:	f04f 0100 	mov.w	r1, #0
 8001d02:	0159      	lsls	r1, r3, #5
 8001d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d08:	0150      	lsls	r0, r2, #5
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4621      	mov	r1, r4
 8001d10:	1a51      	subs	r1, r2, r1
 8001d12:	6139      	str	r1, [r7, #16]
 8001d14:	4629      	mov	r1, r5
 8001d16:	eb63 0301 	sbc.w	r3, r3, r1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d28:	4659      	mov	r1, fp
 8001d2a:	018b      	lsls	r3, r1, #6
 8001d2c:	4651      	mov	r1, sl
 8001d2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d32:	4651      	mov	r1, sl
 8001d34:	018a      	lsls	r2, r1, #6
 8001d36:	4651      	mov	r1, sl
 8001d38:	ebb2 0801 	subs.w	r8, r2, r1
 8001d3c:	4659      	mov	r1, fp
 8001d3e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d56:	4690      	mov	r8, r2
 8001d58:	4699      	mov	r9, r3
 8001d5a:	4623      	mov	r3, r4
 8001d5c:	eb18 0303 	adds.w	r3, r8, r3
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	462b      	mov	r3, r5
 8001d64:	eb49 0303 	adc.w	r3, r9, r3
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d76:	4629      	mov	r1, r5
 8001d78:	024b      	lsls	r3, r1, #9
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d80:	4621      	mov	r1, r4
 8001d82:	024a      	lsls	r2, r1, #9
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d94:	f7fe fa94 	bl	80002c0 <__aeabi_uldivmod>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001da0:	e058      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da2:	4b38      	ldr	r3, [pc, #224]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	099b      	lsrs	r3, r3, #6
 8001da8:	2200      	movs	r2, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	4611      	mov	r1, r2
 8001dae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001db2:	623b      	str	r3, [r7, #32]
 8001db4:	2300      	movs	r3, #0
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dbc:	4642      	mov	r2, r8
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	f04f 0000 	mov.w	r0, #0
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	0159      	lsls	r1, r3, #5
 8001dca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dce:	0150      	lsls	r0, r2, #5
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4641      	mov	r1, r8
 8001dd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dda:	4649      	mov	r1, r9
 8001ddc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001df0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001df4:	ebb2 040a 	subs.w	r4, r2, sl
 8001df8:	eb63 050b 	sbc.w	r5, r3, fp
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	00eb      	lsls	r3, r5, #3
 8001e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e0a:	00e2      	lsls	r2, r4, #3
 8001e0c:	4614      	mov	r4, r2
 8001e0e:	461d      	mov	r5, r3
 8001e10:	4643      	mov	r3, r8
 8001e12:	18e3      	adds	r3, r4, r3
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	464b      	mov	r3, r9
 8001e18:	eb45 0303 	adc.w	r3, r5, r3
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	028b      	lsls	r3, r1, #10
 8001e2e:	4621      	mov	r1, r4
 8001e30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e34:	4621      	mov	r1, r4
 8001e36:	028a      	lsls	r2, r1, #10
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	61fa      	str	r2, [r7, #28]
 8001e44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e48:	f7fe fa3a 	bl	80002c0 <__aeabi_uldivmod>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4613      	mov	r3, r2
 8001e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e54:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	0c1b      	lsrs	r3, r3, #16
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	3301      	adds	r3, #1
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e6e:	e002      	b.n	8001e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3750      	adds	r7, #80	@ 0x50
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	00f42400 	.word	0x00f42400
 8001e8c:	007a1200 	.word	0x007a1200

08001e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e94:	4b03      	ldr	r3, [pc, #12]	@ (8001ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000000 	.word	0x20000000

08001ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eac:	f7ff fff0 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	0a9b      	lsrs	r3, r3, #10
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	4903      	ldr	r1, [pc, #12]	@ (8001ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ebe:	5ccb      	ldrb	r3, [r1, r3]
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	08009d1c 	.word	0x08009d1c

08001ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ed4:	f7ff ffdc 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	0b5b      	lsrs	r3, r3, #13
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	4903      	ldr	r1, [pc, #12]	@ (8001ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	08009d1c 	.word	0x08009d1c

08001ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d010      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001f1c:	4b7a      	ldr	r3, [pc, #488]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f22:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4977      	ldr	r1, [pc, #476]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d010      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001f4a:	4b6f      	ldr	r3, [pc, #444]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f50:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	496b      	ldr	r1, [pc, #428]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d022      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8001f78:	4b63      	ldr	r3, [pc, #396]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f86:	4960      	ldr	r1, [pc, #384]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8001f96:	2301      	movs	r3, #1
 8001f98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001fa2:	d10c      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001fa4:	4b58      	ldr	r3, [pc, #352]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001faa:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	021b      	lsls	r3, r3, #8
 8001fb6:	4954      	ldr	r1, [pc, #336]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d022      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8001fca:	4b4f      	ldr	r3, [pc, #316]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fd0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd8:	494b      	ldr	r1, [pc, #300]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001ff6:	4b44      	ldr	r3, [pc, #272]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ffc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	3b01      	subs	r3, #1
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	493f      	ldr	r1, [pc, #252]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 808a 	beq.w	8002132 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	4b39      	ldr	r3, [pc, #228]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	4a38      	ldr	r2, [pc, #224]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800202c:	6413      	str	r3, [r2, #64]	@ 0x40
 800202e:	4b36      	ldr	r3, [pc, #216]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800203a:	4b34      	ldr	r3, [pc, #208]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a33      	ldr	r2, [pc, #204]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002044:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002046:	f7ff f91f 	bl	8001288 <HAL_GetTick>
 800204a:	61b8      	str	r0, [r7, #24]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204e:	f7ff f91b 	bl	8001288 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1d1      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002060:	4b2a      	ldr	r3, [pc, #168]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800206c:	4b26      	ldr	r3, [pc, #152]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800206e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002070:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002074:	617b      	str	r3, [r7, #20]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d02f      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002080:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	429a      	cmp	r2, r3
 8002088:	d028      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800208a:	4b1f      	ldr	r3, [pc, #124]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002092:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002094:	4b1e      	ldr	r3, [pc, #120]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800209a:	4b1d      	ldr	r3, [pc, #116]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80020a0:	4a19      	ldr	r2, [pc, #100]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020a6:	4b18      	ldr	r3, [pc, #96]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80020a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d114      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80020b2:	f7ff f8e9 	bl	8001288 <HAL_GetTick>
 80020b6:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7ff f8e5 	bl	8001288 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e199      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0ee      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80020e8:	d114      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80020ea:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80020fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020fe:	4902      	ldr	r1, [pc, #8]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]
 8002104:	e00c      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800
 800210c:	40007000 	.word	0x40007000
 8002110:	42470e40 	.word	0x42470e40
 8002114:	4b89      	ldr	r3, [pc, #548]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4a88      	ldr	r2, [pc, #544]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800211a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800211e:	6093      	str	r3, [r2, #8]
 8002120:	4b86      	ldr	r3, [pc, #536]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002122:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212c:	4983      	ldr	r1, [pc, #524]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800212e:	4313      	orrs	r3, r2
 8002130:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8002144:	4b7e      	ldr	r3, [pc, #504]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8002146:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002154:	4b79      	ldr	r3, [pc, #484]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800215a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002162:	4976      	ldr	r1, [pc, #472]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b00      	cmp	r3, #0
 8002174:	d011      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002176:	4b71      	ldr	r3, [pc, #452]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002178:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800217c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002184:	496d      	ldr	r1, [pc, #436]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002190:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002194:	d101      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8002196:	2301      	movs	r3, #1
 8002198:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80021a6:	4b65      	ldr	r3, [pc, #404]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80021a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ac:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b4:	4961      	ldr	r1, [pc, #388]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d004      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b80      	cmp	r3, #128	@ 0x80
 80021c8:	f040 80c6 	bne.w	8002358 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021cc:	4b5d      	ldr	r3, [pc, #372]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021d2:	f7ff f859 	bl	8001288 <HAL_GetTick>
 80021d6:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021da:	f7ff f855 	bl	8001288 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e10b      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021ec:	4b53      	ldr	r3, [pc, #332]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f0      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80021f8:	4a53      	ldr	r2, [pc, #332]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021fe:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x31c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d023      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x364>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x330>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d019      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x364>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002230:	2b00      	cmp	r3, #0
 8002232:	d004      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x346>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002238:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800223c:	d00e      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x364>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002246:	2b00      	cmp	r3, #0
 8002248:	d019      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x386>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224e:	2b00      	cmp	r3, #0
 8002250:	d115      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800225a:	d110      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	019b      	lsls	r3, r3, #6
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	061b      	lsls	r3, r3, #24
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	071b      	lsls	r3, r3, #28
 8002276:	4931      	ldr	r1, [pc, #196]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x39a>
         && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800228e:	2b00      	cmp	r3, #0
 8002290:	d009      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
         && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800229a:	2b00      	cmp	r3, #0
 800229c:	d026      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d122      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022a6:	4b25      	ldr	r3, [pc, #148]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80022a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022ac:	0e1b      	lsrs	r3, r3, #24
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	019b      	lsls	r3, r3, #6
 80022be:	431a      	orrs	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	061b      	lsls	r3, r3, #24
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	071b      	lsls	r3, r3, #28
 80022cc:	491b      	ldr	r1, [pc, #108]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80022d4:	4b19      	ldr	r3, [pc, #100]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80022d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022da:	f023 021f 	bic.w	r2, r3, #31
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	4915      	ldr	r1, [pc, #84]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d010      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	019b      	lsls	r3, r3, #6
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	061b      	lsls	r3, r3, #24
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	071b      	lsls	r3, r3, #28
 8002312:	490a      	ldr	r1, [pc, #40]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800231a:	4b0a      	ldr	r3, [pc, #40]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800231c:	2201      	movs	r2, #1
 800231e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002320:	f7fe ffb2 	bl	8001288 <HAL_GetTick>
 8002324:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002326:	e011      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002328:	f7fe ffae 	bl	8001288 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d90a      	bls.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e064      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800
 8002340:	424711e0 	.word	0x424711e0
 8002344:	42470068 	.word	0x42470068
 8002348:	424710d8 	.word	0x424710d8
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800234c:	4b2f      	ldr	r3, [pc, #188]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0e7      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002364:	4b29      	ldr	r3, [pc, #164]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002366:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800236a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002372:	4926      	ldr	r1, [pc, #152]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002386:	4b21      	ldr	r3, [pc, #132]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002388:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800238c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002394:	491d      	ldr	r1, [pc, #116]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80023a8:	4b18      	ldr	r3, [pc, #96]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80023aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b6:	4915      	ldr	r1, [pc, #84]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80023ca:	4b10      	ldr	r3, [pc, #64]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80023cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023d0:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d8:	490c      	ldr	r1, [pc, #48]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ec:	4b07      	ldr	r3, [pc, #28]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80023ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023f2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fa:	4904      	ldr	r1, [pc, #16]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40023800 	.word	0x40023800

08002410 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e273      	b.n	800290a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d075      	beq.n	800251a <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800242e:	4b88      	ldr	r3, [pc, #544]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b04      	cmp	r3, #4
 8002438:	d00c      	beq.n	8002454 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800243a:	4b85      	ldr	r3, [pc, #532]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002442:	2b08      	cmp	r3, #8
 8002444:	d112      	bne.n	800246c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002446:	4b82      	ldr	r3, [pc, #520]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800244e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002452:	d10b      	bne.n	800246c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002454:	4b7e      	ldr	r3, [pc, #504]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d05b      	beq.n	8002518 <HAL_RCC_OscConfig+0x108>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d157      	bne.n	8002518 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e24e      	b.n	800290a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002474:	d106      	bne.n	8002484 <HAL_RCC_OscConfig+0x74>
 8002476:	4b76      	ldr	r3, [pc, #472]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a75      	ldr	r2, [pc, #468]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e01d      	b.n	80024c0 <HAL_RCC_OscConfig+0xb0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x98>
 800248e:	4b70      	ldr	r3, [pc, #448]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a6f      	ldr	r2, [pc, #444]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b6d      	ldr	r3, [pc, #436]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a6c      	ldr	r2, [pc, #432]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e00b      	b.n	80024c0 <HAL_RCC_OscConfig+0xb0>
 80024a8:	4b69      	ldr	r3, [pc, #420]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a68      	ldr	r2, [pc, #416]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b66      	ldr	r3, [pc, #408]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a65      	ldr	r2, [pc, #404]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe fede 	bl	8001288 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7fe feda 	bl	8001288 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	@ 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e213      	b.n	800290a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0xc0>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe feca 	bl	8001288 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7fe fec6 	bl	8001288 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	@ 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e1ff      	b.n	800290a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	4b51      	ldr	r3, [pc, #324]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0xe8>
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d063      	beq.n	80025ee <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002526:	4b4a      	ldr	r3, [pc, #296]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002532:	4b47      	ldr	r3, [pc, #284]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
        || \
 800253a:	2b08      	cmp	r3, #8
 800253c:	d11c      	bne.n	8002578 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253e:	4b44      	ldr	r3, [pc, #272]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d116      	bne.n	8002578 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	4b41      	ldr	r3, [pc, #260]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_RCC_OscConfig+0x152>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d001      	beq.n	8002562 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e1d3      	b.n	800290a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002562:	4b3b      	ldr	r3, [pc, #236]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4937      	ldr	r1, [pc, #220]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002576:	e03a      	b.n	80025ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d020      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002580:	4b34      	ldr	r3, [pc, #208]	@ (8002654 <HAL_RCC_OscConfig+0x244>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002586:	f7fe fe7f 	bl	8001288 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258e:	f7fe fe7b 	bl	8001288 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e1b4      	b.n	800290a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ac:	4b28      	ldr	r3, [pc, #160]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4925      	ldr	r1, [pc, #148]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]
 80025c0:	e015      	b.n	80025ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c2:	4b24      	ldr	r3, [pc, #144]	@ (8002654 <HAL_RCC_OscConfig+0x244>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe fe5e 	bl	8001288 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d0:	f7fe fe5a 	bl	8001288 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e193      	b.n	800290a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d036      	beq.n	8002668 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d016      	beq.n	8002630 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002602:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <HAL_RCC_OscConfig+0x248>)
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002608:	f7fe fe3e 	bl	8001288 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002610:	f7fe fe3a 	bl	8001288 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e173      	b.n	800290a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x200>
 800262e:	e01b      	b.n	8002668 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002630:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <HAL_RCC_OscConfig+0x248>)
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002636:	f7fe fe27 	bl	8001288 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263c:	e00e      	b.n	800265c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263e:	f7fe fe23 	bl	8001288 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d907      	bls.n	800265c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e15c      	b.n	800290a <HAL_RCC_OscConfig+0x4fa>
 8002650:	40023800 	.word	0x40023800
 8002654:	42470000 	.word	0x42470000
 8002658:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	4b8a      	ldr	r3, [pc, #552]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 800265e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1ea      	bne.n	800263e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8097 	beq.w	80027a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267a:	4b83      	ldr	r3, [pc, #524]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10f      	bne.n	80026a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	4b7f      	ldr	r3, [pc, #508]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	4a7e      	ldr	r2, [pc, #504]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002694:	6413      	str	r3, [r2, #64]	@ 0x40
 8002696:	4b7c      	ldr	r3, [pc, #496]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a2:	2301      	movs	r3, #1
 80026a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a6:	4b79      	ldr	r3, [pc, #484]	@ (800288c <HAL_RCC_OscConfig+0x47c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d118      	bne.n	80026e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b2:	4b76      	ldr	r3, [pc, #472]	@ (800288c <HAL_RCC_OscConfig+0x47c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a75      	ldr	r2, [pc, #468]	@ (800288c <HAL_RCC_OscConfig+0x47c>)
 80026b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026be:	f7fe fde3 	bl	8001288 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c6:	f7fe fddf 	bl	8001288 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e118      	b.n	800290a <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	4b6c      	ldr	r3, [pc, #432]	@ (800288c <HAL_RCC_OscConfig+0x47c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d106      	bne.n	80026fa <HAL_RCC_OscConfig+0x2ea>
 80026ec:	4b66      	ldr	r3, [pc, #408]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f0:	4a65      	ldr	r2, [pc, #404]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f8:	e01c      	b.n	8002734 <HAL_RCC_OscConfig+0x324>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b05      	cmp	r3, #5
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x30c>
 8002702:	4b61      	ldr	r3, [pc, #388]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002706:	4a60      	ldr	r2, [pc, #384]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	6713      	str	r3, [r2, #112]	@ 0x70
 800270e:	4b5e      	ldr	r3, [pc, #376]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002712:	4a5d      	ldr	r2, [pc, #372]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6713      	str	r3, [r2, #112]	@ 0x70
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0x324>
 800271c:	4b5a      	ldr	r3, [pc, #360]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002720:	4a59      	ldr	r2, [pc, #356]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	6713      	str	r3, [r2, #112]	@ 0x70
 8002728:	4b57      	ldr	r3, [pc, #348]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272c:	4a56      	ldr	r2, [pc, #344]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 800272e:	f023 0304 	bic.w	r3, r3, #4
 8002732:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d015      	beq.n	8002768 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7fe fda4 	bl	8001288 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002742:	e00a      	b.n	800275a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002744:	f7fe fda0 	bl	8001288 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0d7      	b.n	800290a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275a:	4b4b      	ldr	r3, [pc, #300]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0ee      	beq.n	8002744 <HAL_RCC_OscConfig+0x334>
 8002766:	e014      	b.n	8002792 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7fe fd8e 	bl	8001288 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276e:	e00a      	b.n	8002786 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002770:	f7fe fd8a 	bl	8001288 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e0c1      	b.n	800290a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002786:	4b40      	ldr	r3, [pc, #256]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1ee      	bne.n	8002770 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d105      	bne.n	80027a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002798:	4b3b      	ldr	r3, [pc, #236]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	4a3a      	ldr	r2, [pc, #232]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 800279e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80ad 	beq.w	8002908 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ae:	4b36      	ldr	r3, [pc, #216]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d060      	beq.n	800287c <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d145      	bne.n	800284e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c2:	4b33      	ldr	r3, [pc, #204]	@ (8002890 <HAL_RCC_OscConfig+0x480>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7fe fd5e 	bl	8001288 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d0:	f7fe fd5a 	bl	8001288 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e093      	b.n	800290a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e2:	4b29      	ldr	r3, [pc, #164]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69da      	ldr	r2, [r3, #28]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	019b      	lsls	r3, r3, #6
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002804:	085b      	lsrs	r3, r3, #1
 8002806:	3b01      	subs	r3, #1
 8002808:	041b      	lsls	r3, r3, #16
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002818:	071b      	lsls	r3, r3, #28
 800281a:	491b      	ldr	r1, [pc, #108]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002820:	4b1b      	ldr	r3, [pc, #108]	@ (8002890 <HAL_RCC_OscConfig+0x480>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe fd2f 	bl	8001288 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe fd2b 	bl	8001288 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e064      	b.n	800290a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002840:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x41e>
 800284c:	e05c      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284e:	4b10      	ldr	r3, [pc, #64]	@ (8002890 <HAL_RCC_OscConfig+0x480>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7fe fd18 	bl	8001288 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285c:	f7fe fd14 	bl	8001288 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e04d      	b.n	800290a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286e:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x44c>
 800287a:	e045      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d107      	bne.n	8002894 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e040      	b.n	800290a <HAL_RCC_OscConfig+0x4fa>
 8002888:	40023800 	.word	0x40023800
 800288c:	40007000 	.word	0x40007000
 8002890:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002894:	4b1f      	ldr	r3, [pc, #124]	@ (8002914 <HAL_RCC_OscConfig+0x504>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d030      	beq.n	8002904 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d129      	bne.n	8002904 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d122      	bne.n	8002904 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028c4:	4013      	ands	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d119      	bne.n	8002904 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	3b01      	subs	r3, #1
 80028de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d10f      	bne.n	8002904 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d107      	bne.n	8002904 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800

08002918 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e022      	b.n	8002970 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d105      	bne.n	8002942 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7fe fa05 	bl	8000d4c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2203      	movs	r2, #3
 8002946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f814 	bl	8002978 <HAL_SD_InitCard>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e00a      	b.n	8002970 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002978:	b5b0      	push	{r4, r5, r7, lr}
 800297a:	b08e      	sub	sp, #56	@ 0x38
 800297c:	af04      	add	r7, sp, #16
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800298c:	2300      	movs	r3, #0
 800298e:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002990:	2300      	movs	r3, #0
 8002992:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002994:	2376      	movs	r3, #118	@ 0x76
 8002996:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681d      	ldr	r5, [r3, #0]
 800299c:	466c      	mov	r4, sp
 800299e:	f107 0318 	add.w	r3, r7, #24
 80029a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029b0:	4628      	mov	r0, r5
 80029b2:	f001 fd4f 	bl	8004454 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80029b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a60 <HAL_SD_InitCard+0xe8>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 fd90 	bl	80044e6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80029c6:	4b26      	ldr	r3, [pc, #152]	@ (8002a60 <HAL_SD_InitCard+0xe8>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80029cc:	2002      	movs	r0, #2
 80029ce:	f7fe fc67 	bl	80012a0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 ff04 	bl	80037e0 <SD_PowerON>
 80029d8:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00b      	beq.n	80029f8 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e02e      	b.n	8002a56 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fe23 	bl	8003644 <SD_InitCard>
 80029fe:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e01b      	b.n	8002a56 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a26:	4618      	mov	r0, r3
 8002a28:	f001 fdef 	bl	800460a <SDMMC_CmdBlockLength>
 8002a2c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00f      	beq.n	8002a54 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a0a      	ldr	r2, [pc, #40]	@ (8002a64 <HAL_SD_InitCard+0xec>)
 8002a3a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3728      	adds	r7, #40	@ 0x28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	422580a0 	.word	0x422580a0
 8002a64:	004005ff 	.word	0x004005ff

08002a68 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b092      	sub	sp, #72	@ 0x48
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002a76:	f7fe fc07 	bl	8001288 <HAL_GetTick>
 8002a7a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d107      	bne.n	8002a9a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e1bd      	b.n	8002e16 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	f040 81b0 	bne.w	8002e08 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002aae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	441a      	add	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d907      	bls.n	8002acc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e1a4      	b.n	8002e16 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2203      	movs	r2, #3
 8002ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d002      	beq.n	8002aea <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae6:	025b      	lsls	r3, r3, #9
 8002ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002aea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002aee:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	025b      	lsls	r3, r3, #9
 8002af4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002af6:	2390      	movs	r3, #144	@ 0x90
 8002af8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002afa:	2302      	movs	r3, #2
 8002afc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002b02:	2301      	movs	r3, #1
 8002b04:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f107 0214 	add.w	r2, r7, #20
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f001 fd4e 	bl	80045b2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d90a      	bls.n	8002b32 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f001 fdb2 	bl	8004692 <SDMMC_CmdReadMultiBlock>
 8002b2e:	6478      	str	r0, [r7, #68]	@ 0x44
 8002b30:	e009      	b.n	8002b46 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f001 fd85 	bl	800464e <SDMMC_CmdReadSingleBlock>
 8002b44:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d012      	beq.n	8002b72 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a7a      	ldr	r2, [pc, #488]	@ (8002d3c <HAL_SD_ReadBlocks+0x2d4>)
 8002b52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e151      	b.n	8002e16 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002b76:	e061      	b.n	8002c3c <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d03c      	beq.n	8002c00 <HAL_SD_ReadBlocks+0x198>
 8002b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d039      	beq.n	8002c00 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b90:	e033      	b.n	8002bfa <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f001 fc87 	bl	80044aa <SDIO_ReadFIFO>
 8002b9c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba8:	3301      	adds	r3, #1
 8002baa:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bba:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be0:	0e1b      	lsrs	r3, r3, #24
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bea:	3301      	adds	r3, #1
 8002bec:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8002bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bfc:	2b07      	cmp	r3, #7
 8002bfe:	d9c8      	bls.n	8002b92 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002c00:	f7fe fb42 	bl	8001288 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d902      	bls.n	8002c16 <HAL_SD_ReadBlocks+0x1ae>
 8002c10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d112      	bne.n	8002c3c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a48      	ldr	r2, [pc, #288]	@ (8002d3c <HAL_SD_ReadBlocks+0x2d4>)
 8002c1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c22:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e0ec      	b.n	8002e16 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c42:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d096      	beq.n	8002b78 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d022      	beq.n	8002c9e <HAL_SD_ReadBlocks+0x236>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d91f      	bls.n	8002c9e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d01b      	beq.n	8002c9e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f001 fd78 	bl	8004760 <SDMMC_CmdStopTransfer>
 8002c70:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002c72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d012      	beq.n	8002c9e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a2f      	ldr	r2, [pc, #188]	@ (8002d3c <HAL_SD_ReadBlocks+0x2d4>)
 8002c7e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c86:	431a      	orrs	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0bb      	b.n	8002e16 <HAL_SD_ReadBlocks+0x3ae>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d012      	beq.n	8002cd2 <HAL_SD_ReadBlocks+0x26a>
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a22      	ldr	r2, [pc, #136]	@ (8002d3c <HAL_SD_ReadBlocks+0x2d4>)
 8002cb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb8:	f043 0208 	orr.w	r2, r3, #8
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0a1      	b.n	8002e16 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d012      	beq.n	8002d06 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a15      	ldr	r2, [pc, #84]	@ (8002d3c <HAL_SD_ReadBlocks+0x2d4>)
 8002ce6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cec:	f043 0202 	orr.w	r2, r3, #2
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e087      	b.n	8002e16 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d064      	beq.n	8002dde <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a08      	ldr	r2, [pc, #32]	@ (8002d3c <HAL_SD_ReadBlocks+0x2d4>)
 8002d1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d20:	f043 0220 	orr.w	r2, r3, #32
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e06d      	b.n	8002e16 <HAL_SD_ReadBlocks+0x3ae>
 8002d3a:	bf00      	nop
 8002d3c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f001 fbb0 	bl	80044aa <SDIO_ReadFIFO>
 8002d4a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d52:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d56:	3301      	adds	r3, #1
 8002d58:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d68:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d72:	3b01      	subs	r3, #1
 8002d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d82:	3301      	adds	r3, #1
 8002d84:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8e:	0e1b      	lsrs	r3, r3, #24
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d94:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d98:	3301      	adds	r3, #1
 8002d9a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002da2:	f7fe fa71 	bl	8001288 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d902      	bls.n	8002db8 <HAL_SD_ReadBlocks+0x350>
 8002db2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d112      	bne.n	8002dde <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a18      	ldr	r2, [pc, #96]	@ (8002e20 <HAL_SD_ReadBlocks+0x3b8>)
 8002dbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e01b      	b.n	8002e16 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <HAL_SD_ReadBlocks+0x38a>
 8002dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1a6      	bne.n	8002d40 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002dfa:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	e006      	b.n	8002e16 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
  }
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3748      	adds	r7, #72	@ 0x48
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	004005ff 	.word	0x004005ff

08002e24 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b092      	sub	sp, #72	@ 0x48
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002e32:	f7fe fa29 	bl	8001288 <HAL_GetTick>
 8002e36:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d107      	bne.n	8002e56 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e165      	b.n	8003122 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	f040 8158 	bne.w	8003114 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002e6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	441a      	add	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d907      	bls.n	8002e88 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e14c      	b.n	8003122 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2200      	movs	r2, #0
 8002e96:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d002      	beq.n	8002ea6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea2:	025b      	lsls	r3, r3, #9
 8002ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ea6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002eaa:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	025b      	lsls	r3, r3, #9
 8002eb0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002eb2:	2390      	movs	r3, #144	@ 0x90
 8002eb4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f107 0218 	add.w	r2, r7, #24
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 fb70 	bl	80045b2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d90a      	bls.n	8002eee <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 fc18 	bl	800471a <SDMMC_CmdWriteMultiBlock>
 8002eea:	6478      	str	r0, [r7, #68]	@ 0x44
 8002eec:	e009      	b.n	8002f02 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002efa:	4618      	mov	r0, r3
 8002efc:	f001 fbeb 	bl	80046d6 <SDMMC_CmdWriteSingleBlock>
 8002f00:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d012      	beq.n	8002f2e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a87      	ldr	r2, [pc, #540]	@ (800312c <HAL_SD_WriteBlocks+0x308>)
 8002f0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f16:	431a      	orrs	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0f9      	b.n	8003122 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002f32:	e065      	b.n	8003000 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d040      	beq.n	8002fc4 <HAL_SD_WriteBlocks+0x1a0>
 8002f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d03d      	beq.n	8002fc4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f4c:	e037      	b.n	8002fbe <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f56:	3301      	adds	r3, #1
 8002f58:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	021a      	lsls	r2, r3, #8
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f6e:	3301      	adds	r3, #1
 8002f70:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f74:	3b01      	subs	r3, #1
 8002f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	041a      	lsls	r2, r3, #16
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f86:	3301      	adds	r3, #1
 8002f88:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	061a      	lsls	r2, r3, #24
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f107 0214 	add.w	r2, r7, #20
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f001 fa86 	bl	80044c4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fba:	3301      	adds	r3, #1
 8002fbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fc0:	2b07      	cmp	r3, #7
 8002fc2:	d9c4      	bls.n	8002f4e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002fc4:	f7fe f960 	bl	8001288 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d902      	bls.n	8002fda <HAL_SD_WriteBlocks+0x1b6>
 8002fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d112      	bne.n	8003000 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a53      	ldr	r2, [pc, #332]	@ (800312c <HAL_SD_WriteBlocks+0x308>)
 8002fe0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e090      	b.n	8003122 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003006:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800300a:	2b00      	cmp	r3, #0
 800300c:	d092      	beq.n	8002f34 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d022      	beq.n	8003062 <HAL_SD_WriteBlocks+0x23e>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d91f      	bls.n	8003062 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003026:	2b03      	cmp	r3, #3
 8003028:	d01b      	beq.n	8003062 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f001 fb96 	bl	8004760 <SDMMC_CmdStopTransfer>
 8003034:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003038:	2b00      	cmp	r3, #0
 800303a:	d012      	beq.n	8003062 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a3a      	ldr	r2, [pc, #232]	@ (800312c <HAL_SD_WriteBlocks+0x308>)
 8003042:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800304a:	431a      	orrs	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e05f      	b.n	8003122 <HAL_SD_WriteBlocks+0x2fe>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d012      	beq.n	8003096 <HAL_SD_WriteBlocks+0x272>
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a2d      	ldr	r2, [pc, #180]	@ (800312c <HAL_SD_WriteBlocks+0x308>)
 8003076:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307c:	f043 0208 	orr.w	r2, r3, #8
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e045      	b.n	8003122 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d012      	beq.n	80030ca <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a20      	ldr	r2, [pc, #128]	@ (800312c <HAL_SD_WriteBlocks+0x308>)
 80030aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b0:	f043 0202 	orr.w	r2, r3, #2
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e02b      	b.n	8003122 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d012      	beq.n	80030fe <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a13      	ldr	r2, [pc, #76]	@ (800312c <HAL_SD_WriteBlocks+0x308>)
 80030de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e4:	f043 0210 	orr.w	r2, r3, #16
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e011      	b.n	8003122 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003106:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	e006      	b.n	8003122 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003118:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
  }
}
 8003122:	4618      	mov	r0, r3
 8003124:	3748      	adds	r7, #72	@ 0x48
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	004005ff 	.word	0x004005ff

08003130 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800313e:	0f9b      	lsrs	r3, r3, #30
 8003140:	b2da      	uxtb	r2, r3
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800314a:	0e9b      	lsrs	r3, r3, #26
 800314c:	b2db      	uxtb	r3, r3
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	b2da      	uxtb	r2, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800315c:	0e1b      	lsrs	r3, r3, #24
 800315e:	b2db      	uxtb	r3, r3
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	b2da      	uxtb	r2, r3
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800316e:	0c1b      	lsrs	r3, r3, #16
 8003170:	b2da      	uxtb	r2, r3
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800317a:	0a1b      	lsrs	r3, r3, #8
 800317c:	b2da      	uxtb	r2, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003186:	b2da      	uxtb	r2, r3
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003190:	0d1b      	lsrs	r3, r3, #20
 8003192:	b29a      	uxth	r2, r3
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031ae:	0bdb      	lsrs	r3, r3, #15
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031c0:	0b9b      	lsrs	r3, r3, #14
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031d2:	0b5b      	lsrs	r3, r3, #13
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031e4:	0b1b      	lsrs	r3, r3, #12
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2200      	movs	r2, #0
 80031f6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d163      	bne.n	80032c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003204:	009a      	lsls	r2, r3, #2
 8003206:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800320a:	4013      	ands	r3, r2
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003210:	0f92      	lsrs	r2, r2, #30
 8003212:	431a      	orrs	r2, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800321c:	0edb      	lsrs	r3, r3, #27
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	b2da      	uxtb	r2, r3
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800322e:	0e1b      	lsrs	r3, r3, #24
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b2da      	uxtb	r2, r3
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003240:	0d5b      	lsrs	r3, r3, #21
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	b2da      	uxtb	r2, r3
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003252:	0c9b      	lsrs	r3, r3, #18
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	b2da      	uxtb	r2, r3
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003264:	0bdb      	lsrs	r3, r3, #15
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	b2da      	uxtb	r2, r3
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	7e1b      	ldrb	r3, [r3, #24]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	3302      	adds	r3, #2
 8003288:	2201      	movs	r2, #1
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003292:	fb03 f202 	mul.w	r2, r3, r2
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	7a1b      	ldrb	r3, [r3, #8]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	2201      	movs	r2, #1
 80032a6:	409a      	lsls	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80032b4:	0a52      	lsrs	r2, r2, #9
 80032b6:	fb03 f202 	mul.w	r2, r3, r2
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032c4:	661a      	str	r2, [r3, #96]	@ 0x60
 80032c6:	e031      	b.n	800332c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d11d      	bne.n	800330c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032d4:	041b      	lsls	r3, r3, #16
 80032d6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032de:	0c1b      	lsrs	r3, r3, #16
 80032e0:	431a      	orrs	r2, r3
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	3301      	adds	r3, #1
 80032ec:	029a      	lsls	r2, r3, #10
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003300:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	661a      	str	r2, [r3, #96]	@ 0x60
 800330a:	e00f      	b.n	800332c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a58      	ldr	r2, [pc, #352]	@ (8003474 <HAL_SD_GetCardCSD+0x344>)
 8003312:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003318:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e09d      	b.n	8003468 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003330:	0b9b      	lsrs	r3, r3, #14
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	b2da      	uxtb	r2, r3
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003342:	09db      	lsrs	r3, r3, #7
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800334a:	b2da      	uxtb	r2, r3
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003354:	b2db      	uxtb	r3, r3
 8003356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800335a:	b2da      	uxtb	r2, r3
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003364:	0fdb      	lsrs	r3, r3, #31
 8003366:	b2da      	uxtb	r2, r3
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003370:	0f5b      	lsrs	r3, r3, #29
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	b2da      	uxtb	r2, r3
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003382:	0e9b      	lsrs	r3, r3, #26
 8003384:	b2db      	uxtb	r3, r3
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	b2da      	uxtb	r2, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003394:	0d9b      	lsrs	r3, r3, #22
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	b2da      	uxtb	r2, r3
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a6:	0d5b      	lsrs	r3, r3, #21
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c2:	0c1b      	lsrs	r3, r3, #16
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	0bdb      	lsrs	r3, r3, #15
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ea:	0b9b      	lsrs	r3, r3, #14
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fe:	0b5b      	lsrs	r3, r3, #13
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	b2da      	uxtb	r2, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003412:	0b1b      	lsrs	r3, r3, #12
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	b2da      	uxtb	r2, r3
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003426:	0a9b      	lsrs	r3, r3, #10
 8003428:	b2db      	uxtb	r3, r3
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	b2da      	uxtb	r2, r3
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343a:	0a1b      	lsrs	r3, r3, #8
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	b2da      	uxtb	r2, r3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344e:	085b      	lsrs	r3, r3, #1
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003456:	b2da      	uxtb	r2, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	004005ff 	.word	0x004005ff

08003478 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80034d0:	b5b0      	push	{r4, r5, r7, lr}
 80034d2:	b08e      	sub	sp, #56	@ 0x38
 80034d4:	af04      	add	r7, sp, #16
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2203      	movs	r2, #3
 80034e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d02e      	beq.n	800354e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f6:	d106      	bne.n	8003506 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	639a      	str	r2, [r3, #56]	@ 0x38
 8003504:	e029      	b.n	800355a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800350c:	d10a      	bne.n	8003524 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fa1c 	bl	800394c <SD_WideBus_Enable>
 8003514:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	639a      	str	r2, [r3, #56]	@ 0x38
 8003522:	e01a      	b.n	800355a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10a      	bne.n	8003540 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fa59 	bl	80039e2 <SD_WideBus_Disable>
 8003530:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	639a      	str	r2, [r3, #56]	@ 0x38
 800353e:	e00c      	b.n	800355a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003544:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	639a      	str	r2, [r3, #56]	@ 0x38
 800354c:	e005      	b.n	800355a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003552:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a26      	ldr	r2, [pc, #152]	@ (8003600 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003568:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003578:	e01f      	b.n	80035ba <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681d      	ldr	r5, [r3, #0]
 80035a0:	466c      	mov	r4, sp
 80035a2:	f107 0314 	add.w	r3, r7, #20
 80035a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035ae:	f107 0308 	add.w	r3, r7, #8
 80035b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035b4:	4628      	mov	r0, r5
 80035b6:	f000 ff4d 	bl	8004454 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80035c2:	4618      	mov	r0, r3
 80035c4:	f001 f821 	bl	800460a <SDMMC_CmdBlockLength>
 80035c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00c      	beq.n	80035ea <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003600 <HAL_SD_ConfigWideBusOperation+0x130>)
 80035d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 80035f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3728      	adds	r7, #40	@ 0x28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bdb0      	pop	{r4, r5, r7, pc}
 80035fe:	bf00      	nop
 8003600:	004005ff 	.word	0x004005ff

08003604 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003610:	f107 030c 	add.w	r3, r7, #12
 8003614:	4619      	mov	r1, r3
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f970 	bl	80038fc <SD_SendStatus>
 800361c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	0a5b      	lsrs	r3, r3, #9
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800363a:	693b      	ldr	r3, [r7, #16]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003644:	b5b0      	push	{r4, r5, r7, lr}
 8003646:	b094      	sub	sp, #80	@ 0x50
 8003648:	af04      	add	r7, sp, #16
 800364a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800364c:	2301      	movs	r3, #1
 800364e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f000 ff54 	bl	8004502 <SDIO_GetPowerState>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003660:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003664:	e0b8      	b.n	80037d8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	2b03      	cmp	r3, #3
 800366c:	d02f      	beq.n	80036ce <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f001 f97e 	bl	8004974 <SDMMC_CmdSendCID>
 8003678:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800367a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <SD_InitCard+0x40>
    {
      return errorstate;
 8003680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003682:	e0a9      	b.n	80037d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2100      	movs	r1, #0
 800368a:	4618      	mov	r0, r3
 800368c:	f000 ff7e 	bl	800458c <SDIO_GetResponse>
 8003690:	4602      	mov	r2, r0
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2104      	movs	r1, #4
 800369c:	4618      	mov	r0, r3
 800369e:	f000 ff75 	bl	800458c <SDIO_GetResponse>
 80036a2:	4602      	mov	r2, r0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2108      	movs	r1, #8
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 ff6c 	bl	800458c <SDIO_GetResponse>
 80036b4:	4602      	mov	r2, r0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	210c      	movs	r1, #12
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 ff63 	bl	800458c <SDIO_GetResponse>
 80036c6:	4602      	mov	r2, r0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d00d      	beq.n	80036f2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f107 020e 	add.w	r2, r7, #14
 80036de:	4611      	mov	r1, r2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f001 f984 	bl	80049ee <SDMMC_CmdSetRelAdd>
 80036e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80036e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <SD_InitCard+0xae>
    {
      return errorstate;
 80036ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036f0:	e072      	b.n	80037d8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d036      	beq.n	8003768 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80036fa:	89fb      	ldrh	r3, [r7, #14]
 80036fc:	461a      	mov	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800370a:	041b      	lsls	r3, r3, #16
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f001 f94e 	bl	80049b0 <SDMMC_CmdSendCSD>
 8003714:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <SD_InitCard+0xdc>
    {
      return errorstate;
 800371c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800371e:	e05b      	b.n	80037d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f000 ff30 	bl	800458c <SDIO_GetResponse>
 800372c:	4602      	mov	r2, r0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2104      	movs	r1, #4
 8003738:	4618      	mov	r0, r3
 800373a:	f000 ff27 	bl	800458c <SDIO_GetResponse>
 800373e:	4602      	mov	r2, r0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2108      	movs	r1, #8
 800374a:	4618      	mov	r0, r3
 800374c:	f000 ff1e 	bl	800458c <SDIO_GetResponse>
 8003750:	4602      	mov	r2, r0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	210c      	movs	r1, #12
 800375c:	4618      	mov	r0, r3
 800375e:	f000 ff15 	bl	800458c <SDIO_GetResponse>
 8003762:	4602      	mov	r2, r0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2104      	movs	r1, #4
 800376e:	4618      	mov	r0, r3
 8003770:	f000 ff0c 	bl	800458c <SDIO_GetResponse>
 8003774:	4603      	mov	r3, r0
 8003776:	0d1a      	lsrs	r2, r3, #20
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800377c:	f107 0310 	add.w	r3, r7, #16
 8003780:	4619      	mov	r1, r3
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff fcd4 	bl	8003130 <HAL_SD_GetCardCSD>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800378e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003792:	e021      	b.n	80037d8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6819      	ldr	r1, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800379c:	041b      	lsls	r3, r3, #16
 800379e:	2200      	movs	r2, #0
 80037a0:	461c      	mov	r4, r3
 80037a2:	4615      	mov	r5, r2
 80037a4:	4622      	mov	r2, r4
 80037a6:	462b      	mov	r3, r5
 80037a8:	4608      	mov	r0, r1
 80037aa:	f000 fffb 	bl	80047a4 <SDMMC_CmdSelDesel>
 80037ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80037b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <SD_InitCard+0x176>
  {
    return errorstate;
 80037b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b8:	e00e      	b.n	80037d8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681d      	ldr	r5, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	466c      	mov	r4, sp
 80037c2:	f103 0210 	add.w	r2, r3, #16
 80037c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80037c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037cc:	3304      	adds	r3, #4
 80037ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037d0:	4628      	mov	r0, r5
 80037d2:	f000 fe3f 	bl	8004454 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3740      	adds	r7, #64	@ 0x40
 80037dc:	46bd      	mov	sp, r7
 80037de:	bdb0      	pop	{r4, r5, r7, pc}

080037e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	2300      	movs	r3, #0
 80037f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fff6 	bl	80047ea <SDMMC_CmdGoIdleState>
 80037fe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <SD_PowerON+0x2a>
  {
    return errorstate;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	e072      	b.n	80038f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f001 f809 	bl	8004826 <SDMMC_CmdOperCond>
 8003814:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00d      	beq.n	8003838 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f000 ffdf 	bl	80047ea <SDMMC_CmdGoIdleState>
 800382c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d004      	beq.n	800383e <SD_PowerON+0x5e>
    {
      return errorstate;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	e05b      	b.n	80038f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003842:	2b01      	cmp	r3, #1
 8003844:	d137      	bne.n	80038b6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f001 f809 	bl	8004864 <SDMMC_CmdAppCommand>
 8003852:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d02d      	beq.n	80038b6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800385a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800385e:	e047      	b.n	80038f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2100      	movs	r1, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fffc 	bl	8004864 <SDMMC_CmdAppCommand>
 800386c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <SD_PowerON+0x98>
    {
      return errorstate;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	e03b      	b.n	80038f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	491e      	ldr	r1, [pc, #120]	@ (80038f8 <SD_PowerON+0x118>)
 800387e:	4618      	mov	r0, r3
 8003880:	f001 f812 	bl	80048a8 <SDMMC_CmdAppOperCommand>
 8003884:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800388c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003890:	e02e      	b.n	80038f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fe77 	bl	800458c <SDIO_GetResponse>
 800389e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	0fdb      	lsrs	r3, r3, #31
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <SD_PowerON+0xcc>
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <SD_PowerON+0xce>
 80038ac:	2300      	movs	r3, #0
 80038ae:	613b      	str	r3, [r7, #16]

    count++;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	3301      	adds	r3, #1
 80038b4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80038bc:	4293      	cmp	r3, r2
 80038be:	d802      	bhi.n	80038c6 <SD_PowerON+0xe6>
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0cc      	beq.n	8003860 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d902      	bls.n	80038d6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80038d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038d4:	e00c      	b.n	80038f0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80038e6:	e002      	b.n	80038ee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	c1100000 	.word	0xc1100000

080038fc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800390c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003910:	e018      	b.n	8003944 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800391a:	041b      	lsls	r3, r3, #16
 800391c:	4619      	mov	r1, r3
 800391e:	4610      	mov	r0, r2
 8003920:	f001 f886 	bl	8004a30 <SDMMC_CmdSendStatus>
 8003924:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <SD_SendStatus+0x34>
  {
    return errorstate;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	e009      	b.n	8003944 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fe28 	bl	800458c <SDIO_GetResponse>
 800393c:	4602      	mov	r2, r0
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	2300      	movs	r3, #0
 800395a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2100      	movs	r1, #0
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fe12 	bl	800458c <SDIO_GetResponse>
 8003968:	4603      	mov	r3, r0
 800396a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003972:	d102      	bne.n	800397a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003974:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003978:	e02f      	b.n	80039da <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800397a:	f107 030c 	add.w	r3, r7, #12
 800397e:	4619      	mov	r1, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f879 	bl	8003a78 <SD_FindSCR>
 8003986:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	e023      	b.n	80039da <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01c      	beq.n	80039d6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a4:	041b      	lsls	r3, r3, #16
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f000 ff5b 	bl	8004864 <SDMMC_CmdAppCommand>
 80039ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	e00f      	b.n	80039da <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2102      	movs	r1, #2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 ff94 	bl	80048ee <SDMMC_CmdBusWidth>
 80039c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	e003      	b.n	80039da <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e001      	b.n	80039da <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80039d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b086      	sub	sp, #24
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	2300      	movs	r3, #0
 80039f0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fdc7 	bl	800458c <SDIO_GetResponse>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a08:	d102      	bne.n	8003a10 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003a0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a0e:	e02f      	b.n	8003a70 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003a10:	f107 030c 	add.w	r3, r7, #12
 8003a14:	4619      	mov	r1, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f82e 	bl	8003a78 <SD_FindSCR>
 8003a1c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	e023      	b.n	8003a70 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d01c      	beq.n	8003a6c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a3a:	041b      	lsls	r3, r3, #16
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	f000 ff10 	bl	8004864 <SDMMC_CmdAppCommand>
 8003a44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	e00f      	b.n	8003a70 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2100      	movs	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 ff49 	bl	80048ee <SDMMC_CmdBusWidth>
 8003a5c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	e003      	b.n	8003a70 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	e001      	b.n	8003a70 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003a6c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003a78:	b590      	push	{r4, r7, lr}
 8003a7a:	b08f      	sub	sp, #60	@ 0x3c
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003a82:	f7fd fc01 	bl	8001288 <HAL_GetTick>
 8003a86:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60bb      	str	r3, [r7, #8]
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2108      	movs	r1, #8
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fdb3 	bl	800460a <SDMMC_CmdBlockLength>
 8003aa4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aae:	e0b2      	b.n	8003c16 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab8:	041b      	lsls	r3, r3, #16
 8003aba:	4619      	mov	r1, r3
 8003abc:	4610      	mov	r0, r2
 8003abe:	f000 fed1 	bl	8004864 <SDMMC_CmdAppCommand>
 8003ac2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <SD_FindSCR+0x56>
  {
    return errorstate;
 8003aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003acc:	e0a3      	b.n	8003c16 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ace:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ad2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003ad4:	2308      	movs	r3, #8
 8003ad6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003ad8:	2330      	movs	r3, #48	@ 0x30
 8003ada:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003adc:	2302      	movs	r3, #2
 8003ade:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f107 0210 	add.w	r2, r7, #16
 8003af0:	4611      	mov	r1, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fd5d 	bl	80045b2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 ff18 	bl	8004932 <SDMMC_CmdSendSCR>
 8003b02:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d02a      	beq.n	8003b60 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0c:	e083      	b.n	8003c16 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00f      	beq.n	8003b3c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6819      	ldr	r1, [r3, #0]
 8003b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	f107 0208 	add.w	r2, r7, #8
 8003b28:	18d4      	adds	r4, r2, r3
 8003b2a:	4608      	mov	r0, r1
 8003b2c:	f000 fcbd 	bl	80044aa <SDIO_ReadFIFO>
 8003b30:	4603      	mov	r3, r0
 8003b32:	6023      	str	r3, [r4, #0]
      index++;
 8003b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b36:	3301      	adds	r3, #1
 8003b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b3a:	e006      	b.n	8003b4a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d012      	beq.n	8003b70 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8003b4a:	f7fd fb9d 	bl	8001288 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b58:	d102      	bne.n	8003b60 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003b5a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003b5e:	e05a      	b.n	8003c16 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b66:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0cf      	beq.n	8003b0e <SD_FindSCR+0x96>
 8003b6e:	e000      	b.n	8003b72 <SD_FindSCR+0xfa>
      break;
 8003b70:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2208      	movs	r2, #8
 8003b86:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003b88:	2308      	movs	r3, #8
 8003b8a:	e044      	b.n	8003c16 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e037      	b.n	8003c16 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	e02a      	b.n	8003c16 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003bc8:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	061a      	lsls	r2, r3, #24
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003bd6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003be0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	0e1b      	lsrs	r3, r3, #24
 8003be6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bea:	601a      	str	r2, [r3, #0]
    scr++;
 8003bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bee:	3304      	adds	r3, #4
 8003bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	061a      	lsls	r2, r3, #24
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	021b      	lsls	r3, r3, #8
 8003bfa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003bfe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	0a1b      	lsrs	r3, r3, #8
 8003c04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003c08:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	0e1b      	lsrs	r3, r3, #24
 8003c0e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c12:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	373c      	adds	r7, #60	@ 0x3c
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd90      	pop	{r4, r7, pc}

08003c1e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e042      	b.n	8003cb6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d106      	bne.n	8003c4a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7fd f911 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2224      	movs	r2, #36	@ 0x24
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c60:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f972 	bl	8003f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c76:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c86:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c96:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b08a      	sub	sp, #40	@ 0x28
 8003cc2:	af02      	add	r7, sp, #8
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d175      	bne.n	8003dca <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_UART_Transmit+0x2c>
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e06e      	b.n	8003dcc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2221      	movs	r2, #33	@ 0x21
 8003cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cfc:	f7fd fac4 	bl	8001288 <HAL_GetTick>
 8003d00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	88fa      	ldrh	r2, [r7, #6]
 8003d06:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	88fa      	ldrh	r2, [r7, #6]
 8003d0c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d16:	d108      	bne.n	8003d2a <HAL_UART_Transmit+0x6c>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d104      	bne.n	8003d2a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	61bb      	str	r3, [r7, #24]
 8003d28:	e003      	b.n	8003d32 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d32:	e02e      	b.n	8003d92 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2180      	movs	r1, #128	@ 0x80
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f848 	bl	8003dd4 <UART_WaitOnFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e03a      	b.n	8003dcc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10b      	bne.n	8003d74 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d6a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	3302      	adds	r3, #2
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	e007      	b.n	8003d84 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	781a      	ldrb	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3301      	adds	r3, #1
 8003d82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1cb      	bne.n	8003d34 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2200      	movs	r2, #0
 8003da4:	2140      	movs	r1, #64	@ 0x40
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f814 	bl	8003dd4 <UART_WaitOnFlagUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d005      	beq.n	8003dbe <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e006      	b.n	8003dcc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e000      	b.n	8003dcc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
  }
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3720      	adds	r7, #32
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de4:	e03b      	b.n	8003e5e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dec:	d037      	beq.n	8003e5e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dee:	f7fd fa4b 	bl	8001288 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	6a3a      	ldr	r2, [r7, #32]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d302      	bcc.n	8003e04 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e03a      	b.n	8003e7e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d023      	beq.n	8003e5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b80      	cmp	r3, #128	@ 0x80
 8003e1a:	d020      	beq.n	8003e5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b40      	cmp	r3, #64	@ 0x40
 8003e20:	d01d      	beq.n	8003e5e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d116      	bne.n	8003e5e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f81d 	bl	8003e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2208      	movs	r2, #8
 8003e50:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e00f      	b.n	8003e7e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4013      	ands	r3, r2
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	bf0c      	ite	eq
 8003e6e:	2301      	moveq	r3, #1
 8003e70:	2300      	movne	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d0b4      	beq.n	8003de6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b095      	sub	sp, #84	@ 0x54
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	330c      	adds	r3, #12
 8003eac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003eae:	643a      	str	r2, [r7, #64]	@ 0x40
 8003eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003eb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e5      	bne.n	8003e8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3314      	adds	r3, #20
 8003ec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3314      	adds	r3, #20
 8003ee0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ee2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ee8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e5      	bne.n	8003ec2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d119      	bne.n	8003f32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	e853 3f00 	ldrex	r3, [r3]
 8003f0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f023 0310 	bic.w	r3, r3, #16
 8003f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	330c      	adds	r3, #12
 8003f1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f1e:	61ba      	str	r2, [r7, #24]
 8003f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	6979      	ldr	r1, [r7, #20]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e5      	bne.n	8003efe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f40:	bf00      	nop
 8003f42:	3754      	adds	r7, #84	@ 0x54
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f50:	b0c0      	sub	sp, #256	@ 0x100
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f68:	68d9      	ldr	r1, [r3, #12]
 8003f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	ea40 0301 	orr.w	r3, r0, r1
 8003f74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fa4:	f021 010c 	bic.w	r1, r1, #12
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fb2:	430b      	orrs	r3, r1
 8003fb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc6:	6999      	ldr	r1, [r3, #24]
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	ea40 0301 	orr.w	r3, r0, r1
 8003fd2:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4b95      	ldr	r3, [pc, #596]	@ (8004230 <UART_SetConfig+0x2e4>)
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d011      	beq.n	8004004 <UART_SetConfig+0xb8>
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b93      	ldr	r3, [pc, #588]	@ (8004234 <UART_SetConfig+0x2e8>)
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d00b      	beq.n	8004004 <UART_SetConfig+0xb8>
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4b91      	ldr	r3, [pc, #580]	@ (8004238 <UART_SetConfig+0x2ec>)
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d005      	beq.n	8004004 <UART_SetConfig+0xb8>
 8003ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4b8f      	ldr	r3, [pc, #572]	@ (800423c <UART_SetConfig+0x2f0>)
 8004000:	429a      	cmp	r2, r3
 8004002:	d104      	bne.n	800400e <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004004:	f7fd ff64 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 8004008:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800400c:	e003      	b.n	8004016 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800400e:	f7fd ff4b 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 8004012:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004020:	f040 8110 	bne.w	8004244 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004028:	2200      	movs	r2, #0
 800402a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800402e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004032:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004036:	4622      	mov	r2, r4
 8004038:	462b      	mov	r3, r5
 800403a:	1891      	adds	r1, r2, r2
 800403c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800403e:	415b      	adcs	r3, r3
 8004040:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004042:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004046:	4621      	mov	r1, r4
 8004048:	eb12 0801 	adds.w	r8, r2, r1
 800404c:	4629      	mov	r1, r5
 800404e:	eb43 0901 	adc.w	r9, r3, r1
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	f04f 0300 	mov.w	r3, #0
 800405a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800405e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004066:	4690      	mov	r8, r2
 8004068:	4699      	mov	r9, r3
 800406a:	4623      	mov	r3, r4
 800406c:	eb18 0303 	adds.w	r3, r8, r3
 8004070:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004074:	462b      	mov	r3, r5
 8004076:	eb49 0303 	adc.w	r3, r9, r3
 800407a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800407e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800408a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800408e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004092:	460b      	mov	r3, r1
 8004094:	18db      	adds	r3, r3, r3
 8004096:	653b      	str	r3, [r7, #80]	@ 0x50
 8004098:	4613      	mov	r3, r2
 800409a:	eb42 0303 	adc.w	r3, r2, r3
 800409e:	657b      	str	r3, [r7, #84]	@ 0x54
 80040a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040a8:	f7fc f90a 	bl	80002c0 <__aeabi_uldivmod>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4b63      	ldr	r3, [pc, #396]	@ (8004240 <UART_SetConfig+0x2f4>)
 80040b2:	fba3 2302 	umull	r2, r3, r3, r2
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	011c      	lsls	r4, r3, #4
 80040ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040be:	2200      	movs	r2, #0
 80040c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040cc:	4642      	mov	r2, r8
 80040ce:	464b      	mov	r3, r9
 80040d0:	1891      	adds	r1, r2, r2
 80040d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040d4:	415b      	adcs	r3, r3
 80040d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040dc:	4641      	mov	r1, r8
 80040de:	eb12 0a01 	adds.w	sl, r2, r1
 80040e2:	4649      	mov	r1, r9
 80040e4:	eb43 0b01 	adc.w	fp, r3, r1
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040fc:	4692      	mov	sl, r2
 80040fe:	469b      	mov	fp, r3
 8004100:	4643      	mov	r3, r8
 8004102:	eb1a 0303 	adds.w	r3, sl, r3
 8004106:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800410a:	464b      	mov	r3, r9
 800410c:	eb4b 0303 	adc.w	r3, fp, r3
 8004110:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004120:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004124:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004128:	460b      	mov	r3, r1
 800412a:	18db      	adds	r3, r3, r3
 800412c:	643b      	str	r3, [r7, #64]	@ 0x40
 800412e:	4613      	mov	r3, r2
 8004130:	eb42 0303 	adc.w	r3, r2, r3
 8004134:	647b      	str	r3, [r7, #68]	@ 0x44
 8004136:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800413a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800413e:	f7fc f8bf 	bl	80002c0 <__aeabi_uldivmod>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4611      	mov	r1, r2
 8004148:	4b3d      	ldr	r3, [pc, #244]	@ (8004240 <UART_SetConfig+0x2f4>)
 800414a:	fba3 2301 	umull	r2, r3, r3, r1
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2264      	movs	r2, #100	@ 0x64
 8004152:	fb02 f303 	mul.w	r3, r2, r3
 8004156:	1acb      	subs	r3, r1, r3
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800415e:	4b38      	ldr	r3, [pc, #224]	@ (8004240 <UART_SetConfig+0x2f4>)
 8004160:	fba3 2302 	umull	r2, r3, r3, r2
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800416c:	441c      	add	r4, r3
 800416e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004172:	2200      	movs	r2, #0
 8004174:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004178:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800417c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004180:	4642      	mov	r2, r8
 8004182:	464b      	mov	r3, r9
 8004184:	1891      	adds	r1, r2, r2
 8004186:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004188:	415b      	adcs	r3, r3
 800418a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800418c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004190:	4641      	mov	r1, r8
 8004192:	1851      	adds	r1, r2, r1
 8004194:	6339      	str	r1, [r7, #48]	@ 0x30
 8004196:	4649      	mov	r1, r9
 8004198:	414b      	adcs	r3, r1
 800419a:	637b      	str	r3, [r7, #52]	@ 0x34
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041a8:	4659      	mov	r1, fp
 80041aa:	00cb      	lsls	r3, r1, #3
 80041ac:	4651      	mov	r1, sl
 80041ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041b2:	4651      	mov	r1, sl
 80041b4:	00ca      	lsls	r2, r1, #3
 80041b6:	4610      	mov	r0, r2
 80041b8:	4619      	mov	r1, r3
 80041ba:	4603      	mov	r3, r0
 80041bc:	4642      	mov	r2, r8
 80041be:	189b      	adds	r3, r3, r2
 80041c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041c4:	464b      	mov	r3, r9
 80041c6:	460a      	mov	r2, r1
 80041c8:	eb42 0303 	adc.w	r3, r2, r3
 80041cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041e4:	460b      	mov	r3, r1
 80041e6:	18db      	adds	r3, r3, r3
 80041e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041ea:	4613      	mov	r3, r2
 80041ec:	eb42 0303 	adc.w	r3, r2, r3
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80041fa:	f7fc f861 	bl	80002c0 <__aeabi_uldivmod>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4b0f      	ldr	r3, [pc, #60]	@ (8004240 <UART_SetConfig+0x2f4>)
 8004204:	fba3 1302 	umull	r1, r3, r3, r2
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	2164      	movs	r1, #100	@ 0x64
 800420c:	fb01 f303 	mul.w	r3, r1, r3
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	3332      	adds	r3, #50	@ 0x32
 8004216:	4a0a      	ldr	r2, [pc, #40]	@ (8004240 <UART_SetConfig+0x2f4>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	095b      	lsrs	r3, r3, #5
 800421e:	f003 0207 	and.w	r2, r3, #7
 8004222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4422      	add	r2, r4
 800422a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800422c:	e10a      	b.n	8004444 <UART_SetConfig+0x4f8>
 800422e:	bf00      	nop
 8004230:	40011000 	.word	0x40011000
 8004234:	40011400 	.word	0x40011400
 8004238:	40011800 	.word	0x40011800
 800423c:	40011c00 	.word	0x40011c00
 8004240:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004248:	2200      	movs	r2, #0
 800424a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800424e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004252:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004256:	4642      	mov	r2, r8
 8004258:	464b      	mov	r3, r9
 800425a:	1891      	adds	r1, r2, r2
 800425c:	6239      	str	r1, [r7, #32]
 800425e:	415b      	adcs	r3, r3
 8004260:	627b      	str	r3, [r7, #36]	@ 0x24
 8004262:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004266:	4641      	mov	r1, r8
 8004268:	1854      	adds	r4, r2, r1
 800426a:	4649      	mov	r1, r9
 800426c:	eb43 0501 	adc.w	r5, r3, r1
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	00eb      	lsls	r3, r5, #3
 800427a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800427e:	00e2      	lsls	r2, r4, #3
 8004280:	4614      	mov	r4, r2
 8004282:	461d      	mov	r5, r3
 8004284:	4643      	mov	r3, r8
 8004286:	18e3      	adds	r3, r4, r3
 8004288:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800428c:	464b      	mov	r3, r9
 800428e:	eb45 0303 	adc.w	r3, r5, r3
 8004292:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042b2:	4629      	mov	r1, r5
 80042b4:	008b      	lsls	r3, r1, #2
 80042b6:	4621      	mov	r1, r4
 80042b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042bc:	4621      	mov	r1, r4
 80042be:	008a      	lsls	r2, r1, #2
 80042c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042c4:	f7fb fffc 	bl	80002c0 <__aeabi_uldivmod>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4b60      	ldr	r3, [pc, #384]	@ (8004450 <UART_SetConfig+0x504>)
 80042ce:	fba3 2302 	umull	r2, r3, r3, r2
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	011c      	lsls	r4, r3, #4
 80042d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042da:	2200      	movs	r2, #0
 80042dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042e8:	4642      	mov	r2, r8
 80042ea:	464b      	mov	r3, r9
 80042ec:	1891      	adds	r1, r2, r2
 80042ee:	61b9      	str	r1, [r7, #24]
 80042f0:	415b      	adcs	r3, r3
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042f8:	4641      	mov	r1, r8
 80042fa:	1851      	adds	r1, r2, r1
 80042fc:	6139      	str	r1, [r7, #16]
 80042fe:	4649      	mov	r1, r9
 8004300:	414b      	adcs	r3, r1
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004310:	4659      	mov	r1, fp
 8004312:	00cb      	lsls	r3, r1, #3
 8004314:	4651      	mov	r1, sl
 8004316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800431a:	4651      	mov	r1, sl
 800431c:	00ca      	lsls	r2, r1, #3
 800431e:	4610      	mov	r0, r2
 8004320:	4619      	mov	r1, r3
 8004322:	4603      	mov	r3, r0
 8004324:	4642      	mov	r2, r8
 8004326:	189b      	adds	r3, r3, r2
 8004328:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800432c:	464b      	mov	r3, r9
 800432e:	460a      	mov	r2, r1
 8004330:	eb42 0303 	adc.w	r3, r2, r3
 8004334:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004342:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004350:	4649      	mov	r1, r9
 8004352:	008b      	lsls	r3, r1, #2
 8004354:	4641      	mov	r1, r8
 8004356:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800435a:	4641      	mov	r1, r8
 800435c:	008a      	lsls	r2, r1, #2
 800435e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004362:	f7fb ffad 	bl	80002c0 <__aeabi_uldivmod>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4611      	mov	r1, r2
 800436c:	4b38      	ldr	r3, [pc, #224]	@ (8004450 <UART_SetConfig+0x504>)
 800436e:	fba3 2301 	umull	r2, r3, r3, r1
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2264      	movs	r2, #100	@ 0x64
 8004376:	fb02 f303 	mul.w	r3, r2, r3
 800437a:	1acb      	subs	r3, r1, r3
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	3332      	adds	r3, #50	@ 0x32
 8004380:	4a33      	ldr	r2, [pc, #204]	@ (8004450 <UART_SetConfig+0x504>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800438c:	441c      	add	r4, r3
 800438e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004392:	2200      	movs	r2, #0
 8004394:	673b      	str	r3, [r7, #112]	@ 0x70
 8004396:	677a      	str	r2, [r7, #116]	@ 0x74
 8004398:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800439c:	4642      	mov	r2, r8
 800439e:	464b      	mov	r3, r9
 80043a0:	1891      	adds	r1, r2, r2
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	415b      	adcs	r3, r3
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043ac:	4641      	mov	r1, r8
 80043ae:	1851      	adds	r1, r2, r1
 80043b0:	6039      	str	r1, [r7, #0]
 80043b2:	4649      	mov	r1, r9
 80043b4:	414b      	adcs	r3, r1
 80043b6:	607b      	str	r3, [r7, #4]
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043c4:	4659      	mov	r1, fp
 80043c6:	00cb      	lsls	r3, r1, #3
 80043c8:	4651      	mov	r1, sl
 80043ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ce:	4651      	mov	r1, sl
 80043d0:	00ca      	lsls	r2, r1, #3
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	4603      	mov	r3, r0
 80043d8:	4642      	mov	r2, r8
 80043da:	189b      	adds	r3, r3, r2
 80043dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043de:	464b      	mov	r3, r9
 80043e0:	460a      	mov	r2, r1
 80043e2:	eb42 0303 	adc.w	r3, r2, r3
 80043e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80043f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004400:	4649      	mov	r1, r9
 8004402:	008b      	lsls	r3, r1, #2
 8004404:	4641      	mov	r1, r8
 8004406:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800440a:	4641      	mov	r1, r8
 800440c:	008a      	lsls	r2, r1, #2
 800440e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004412:	f7fb ff55 	bl	80002c0 <__aeabi_uldivmod>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4b0d      	ldr	r3, [pc, #52]	@ (8004450 <UART_SetConfig+0x504>)
 800441c:	fba3 1302 	umull	r1, r3, r3, r2
 8004420:	095b      	lsrs	r3, r3, #5
 8004422:	2164      	movs	r1, #100	@ 0x64
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	3332      	adds	r3, #50	@ 0x32
 800442e:	4a08      	ldr	r2, [pc, #32]	@ (8004450 <UART_SetConfig+0x504>)
 8004430:	fba2 2303 	umull	r2, r3, r2, r3
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	f003 020f 	and.w	r2, r3, #15
 800443a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4422      	add	r2, r4
 8004442:	609a      	str	r2, [r3, #8]
}
 8004444:	bf00      	nop
 8004446:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800444a:	46bd      	mov	sp, r7
 800444c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004450:	51eb851f 	.word	0x51eb851f

08004454 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004454:	b084      	sub	sp, #16
 8004456:	b480      	push	{r7}
 8004458:	b085      	sub	sp, #20
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	f107 001c 	add.w	r0, r7, #28
 8004462:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800446a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800446c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800446e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8004472:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004476:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800447a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800447c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800447e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800448e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	b004      	add	sp, #16
 80044a8:	4770      	bx	lr

080044aa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2203      	movs	r2, #3
 80044f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0303 	and.w	r3, r3, #3
}
 8004512:	4618      	mov	r0, r3
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800451e:	b480      	push	{r7}
 8004520:	b085      	sub	sp, #20
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800453c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004542:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004548:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004558:	f023 030f 	bic.w	r3, r3, #15
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	b2db      	uxtb	r3, r3
}
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3314      	adds	r3, #20
 800459a:	461a      	mov	r2, r3
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	4413      	add	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
}  
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b085      	sub	sp, #20
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80045d8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80045de:	431a      	orrs	r2, r3
                       Data->DPSM);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80045e4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0

}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b088      	sub	sp, #32
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004618:	2310      	movs	r3, #16
 800461a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800461c:	2340      	movs	r3, #64	@ 0x40
 800461e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004624:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004628:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800462a:	f107 0308 	add.w	r3, r7, #8
 800462e:	4619      	mov	r1, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ff74 	bl	800451e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800463a:	2110      	movs	r1, #16
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 fa19 	bl	8004a74 <SDMMC_GetCmdResp1>
 8004642:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004644:	69fb      	ldr	r3, [r7, #28]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b088      	sub	sp, #32
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800465c:	2311      	movs	r3, #17
 800465e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004660:	2340      	movs	r3, #64	@ 0x40
 8004662:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004668:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800466c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800466e:	f107 0308 	add.w	r3, r7, #8
 8004672:	4619      	mov	r1, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff ff52 	bl	800451e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800467a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467e:	2111      	movs	r1, #17
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f9f7 	bl	8004a74 <SDMMC_GetCmdResp1>
 8004686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004688:	69fb      	ldr	r3, [r7, #28]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3720      	adds	r7, #32
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b088      	sub	sp, #32
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80046a0:	2312      	movs	r3, #18
 80046a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046a4:	2340      	movs	r3, #64	@ 0x40
 80046a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046b2:	f107 0308 	add.w	r3, r7, #8
 80046b6:	4619      	mov	r1, r3
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff ff30 	bl	800451e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80046be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c2:	2112      	movs	r1, #18
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f9d5 	bl	8004a74 <SDMMC_GetCmdResp1>
 80046ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046cc:	69fb      	ldr	r3, [r7, #28]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3720      	adds	r7, #32
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b088      	sub	sp, #32
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80046e4:	2318      	movs	r3, #24
 80046e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046e8:	2340      	movs	r3, #64	@ 0x40
 80046ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046f6:	f107 0308 	add.w	r3, r7, #8
 80046fa:	4619      	mov	r1, r3
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff ff0e 	bl	800451e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004706:	2118      	movs	r1, #24
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f9b3 	bl	8004a74 <SDMMC_GetCmdResp1>
 800470e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004710:	69fb      	ldr	r3, [r7, #28]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b088      	sub	sp, #32
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004728:	2319      	movs	r3, #25
 800472a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800472c:	2340      	movs	r3, #64	@ 0x40
 800472e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004734:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004738:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800473a:	f107 0308 	add.w	r3, r7, #8
 800473e:	4619      	mov	r1, r3
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff feec 	bl	800451e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474a:	2119      	movs	r1, #25
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f991 	bl	8004a74 <SDMMC_GetCmdResp1>
 8004752:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004754:	69fb      	ldr	r3, [r7, #28]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800476c:	230c      	movs	r3, #12
 800476e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004770:	2340      	movs	r3, #64	@ 0x40
 8004772:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004778:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800477c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800477e:	f107 0308 	add.w	r3, r7, #8
 8004782:	4619      	mov	r1, r3
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff feca 	bl	800451e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800478a:	4a05      	ldr	r2, [pc, #20]	@ (80047a0 <SDMMC_CmdStopTransfer+0x40>)
 800478c:	210c      	movs	r1, #12
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f970 	bl	8004a74 <SDMMC_GetCmdResp1>
 8004794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004796:	69fb      	ldr	r3, [r7, #28]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3720      	adds	r7, #32
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	05f5e100 	.word	0x05f5e100

080047a4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08a      	sub	sp, #40	@ 0x28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80047b4:	2307      	movs	r3, #7
 80047b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047b8:	2340      	movs	r3, #64	@ 0x40
 80047ba:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047bc:	2300      	movs	r3, #0
 80047be:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047c4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047c6:	f107 0310 	add.w	r3, r7, #16
 80047ca:	4619      	mov	r1, r3
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f7ff fea6 	bl	800451e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80047d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d6:	2107      	movs	r1, #7
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f94b 	bl	8004a74 <SDMMC_GetCmdResp1>
 80047de:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3728      	adds	r7, #40	@ 0x28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b088      	sub	sp, #32
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80047fa:	2300      	movs	r3, #0
 80047fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004802:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004806:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004808:	f107 0308 	add.w	r3, r7, #8
 800480c:	4619      	mov	r1, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff fe85 	bl	800451e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fb65 	bl	8004ee4 <SDMMC_GetCmdError>
 800481a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800481c:	69fb      	ldr	r3, [r7, #28]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b088      	sub	sp, #32
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800482e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8004832:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004834:	2308      	movs	r3, #8
 8004836:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004838:	2340      	movs	r3, #64	@ 0x40
 800483a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004844:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004846:	f107 0308 	add.w	r3, r7, #8
 800484a:	4619      	mov	r1, r3
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff fe66 	bl	800451e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 faf8 	bl	8004e48 <SDMMC_GetCmdResp7>
 8004858:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800485a:	69fb      	ldr	r3, [r7, #28]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3720      	adds	r7, #32
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004872:	2337      	movs	r3, #55	@ 0x37
 8004874:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004876:	2340      	movs	r3, #64	@ 0x40
 8004878:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800487e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004882:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004884:	f107 0308 	add.w	r3, r7, #8
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff fe47 	bl	800451e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004894:	2137      	movs	r1, #55	@ 0x37
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f8ec 	bl	8004a74 <SDMMC_GetCmdResp1>
 800489c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800489e:	69fb      	ldr	r3, [r7, #28]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3720      	adds	r7, #32
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80048be:	2329      	movs	r3, #41	@ 0x29
 80048c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048c2:	2340      	movs	r3, #64	@ 0x40
 80048c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048d0:	f107 0308 	add.w	r3, r7, #8
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff fe21 	bl	800451e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f9ff 	bl	8004ce0 <SDMMC_GetCmdResp3>
 80048e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048e4:	69fb      	ldr	r3, [r7, #28]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b088      	sub	sp, #32
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80048fc:	2306      	movs	r3, #6
 80048fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004900:	2340      	movs	r3, #64	@ 0x40
 8004902:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800490c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800490e:	f107 0308 	add.w	r3, r7, #8
 8004912:	4619      	mov	r1, r3
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff fe02 	bl	800451e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800491a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491e:	2106      	movs	r1, #6
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f8a7 	bl	8004a74 <SDMMC_GetCmdResp1>
 8004926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004928:	69fb      	ldr	r3, [r7, #28]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b088      	sub	sp, #32
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800493e:	2333      	movs	r3, #51	@ 0x33
 8004940:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004942:	2340      	movs	r3, #64	@ 0x40
 8004944:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800494a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800494e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004950:	f107 0308 	add.w	r3, r7, #8
 8004954:	4619      	mov	r1, r3
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff fde1 	bl	800451e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800495c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004960:	2133      	movs	r1, #51	@ 0x33
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f886 	bl	8004a74 <SDMMC_GetCmdResp1>
 8004968:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800496a:	69fb      	ldr	r3, [r7, #28]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3720      	adds	r7, #32
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004980:	2302      	movs	r3, #2
 8004982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004984:	23c0      	movs	r3, #192	@ 0xc0
 8004986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800498c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004990:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004992:	f107 0308 	add.w	r3, r7, #8
 8004996:	4619      	mov	r1, r3
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff fdc0 	bl	800451e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f956 	bl	8004c50 <SDMMC_GetCmdResp2>
 80049a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049a6:	69fb      	ldr	r3, [r7, #28]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3720      	adds	r7, #32
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80049be:	2309      	movs	r3, #9
 80049c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80049c2:	23c0      	movs	r3, #192	@ 0xc0
 80049c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049d0:	f107 0308 	add.w	r3, r7, #8
 80049d4:	4619      	mov	r1, r3
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7ff fda1 	bl	800451e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f937 	bl	8004c50 <SDMMC_GetCmdResp2>
 80049e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049e4:	69fb      	ldr	r3, [r7, #28]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b088      	sub	sp, #32
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80049fc:	2303      	movs	r3, #3
 80049fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a00:	2340      	movs	r3, #64	@ 0x40
 8004a02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a0e:	f107 0308 	add.w	r3, r7, #8
 8004a12:	4619      	mov	r1, r3
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff fd82 	bl	800451e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	2103      	movs	r1, #3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f99c 	bl	8004d5c <SDMMC_GetCmdResp6>
 8004a24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a26:	69fb      	ldr	r3, [r7, #28]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3720      	adds	r7, #32
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004a3e:	230d      	movs	r3, #13
 8004a40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a42:	2340      	movs	r3, #64	@ 0x40
 8004a44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a50:	f107 0308 	add.w	r3, r7, #8
 8004a54:	4619      	mov	r1, r3
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff fd61 	bl	800451e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a60:	210d      	movs	r1, #13
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f806 	bl	8004a74 <SDMMC_GetCmdResp1>
 8004a68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a6a:	69fb      	ldr	r3, [r7, #28]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3720      	adds	r7, #32
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004a82:	4b70      	ldr	r3, [pc, #448]	@ (8004c44 <SDMMC_GetCmdResp1+0x1d0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a70      	ldr	r2, [pc, #448]	@ (8004c48 <SDMMC_GetCmdResp1+0x1d4>)
 8004a88:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8c:	0a5a      	lsrs	r2, r3, #9
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	fb02 f303 	mul.w	r3, r2, r3
 8004a94:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	1e5a      	subs	r2, r3, #1
 8004a9a:	61fa      	str	r2, [r7, #28]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d102      	bne.n	8004aa6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004aa0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004aa4:	e0c9      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aaa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0ef      	beq.n	8004a96 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1ea      	bne.n	8004a96 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d004      	beq.n	8004ad6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2204      	movs	r2, #4
 8004ad0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	e0b1      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d004      	beq.n	8004aec <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0a6      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	22c5      	movs	r2, #197	@ 0xc5
 8004af0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f7ff fd3d 	bl	8004572 <SDIO_GetCommandResponse>
 8004af8:	4603      	mov	r3, r0
 8004afa:	461a      	mov	r2, r3
 8004afc:	7afb      	ldrb	r3, [r7, #11]
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d001      	beq.n	8004b06 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e099      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004b06:	2100      	movs	r1, #0
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f7ff fd3f 	bl	800458c <SDIO_GetResponse>
 8004b0e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	4b4e      	ldr	r3, [pc, #312]	@ (8004c4c <SDMMC_GetCmdResp1+0x1d8>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e08d      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	da02      	bge.n	8004b2a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004b24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b28:	e087      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004b34:	2340      	movs	r3, #64	@ 0x40
 8004b36:	e080      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004b42:	2380      	movs	r3, #128	@ 0x80
 8004b44:	e079      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004b50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b54:	e071      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004b60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b64:	e069      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004b70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b74:	e061      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004b80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b84:	e059      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b94:	e051      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004ba0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ba4:	e049      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004bb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004bb4:	e041      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004bc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bc4:	e039      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004bd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004bd4:	e031      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004be0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004be4:	e029      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004bf0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004bf4:	e021      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004c00:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004c04:	e019      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004c10:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004c14:	e011      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004c20:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004c24:	e009      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004c30:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004c34:	e001      	b.n	8004c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004c36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000000 	.word	0x20000000
 8004c48:	10624dd3 	.word	0x10624dd3
 8004c4c:	fdffe008 	.word	0xfdffe008

08004c50 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c58:	4b1f      	ldr	r3, [pc, #124]	@ (8004cd8 <SDMMC_GetCmdResp2+0x88>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004cdc <SDMMC_GetCmdResp2+0x8c>)
 8004c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c62:	0a5b      	lsrs	r3, r3, #9
 8004c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c68:	fb02 f303 	mul.w	r3, r2, r3
 8004c6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1e5a      	subs	r2, r3, #1
 8004c72:	60fa      	str	r2, [r7, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d102      	bne.n	8004c7e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004c7c:	e026      	b.n	8004ccc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c82:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0ef      	beq.n	8004c6e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1ea      	bne.n	8004c6e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d004      	beq.n	8004cae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2204      	movs	r2, #4
 8004ca8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004caa:	2304      	movs	r3, #4
 8004cac:	e00e      	b.n	8004ccc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d004      	beq.n	8004cc4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e003      	b.n	8004ccc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	22c5      	movs	r2, #197	@ 0xc5
 8004cc8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	20000000 	.word	0x20000000
 8004cdc:	10624dd3 	.word	0x10624dd3

08004ce0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d54 <SDMMC_GetCmdResp3+0x74>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1a      	ldr	r2, [pc, #104]	@ (8004d58 <SDMMC_GetCmdResp3+0x78>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	0a5b      	lsrs	r3, r3, #9
 8004cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf8:	fb02 f303 	mul.w	r3, r2, r3
 8004cfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1e5a      	subs	r2, r3, #1
 8004d02:	60fa      	str	r2, [r7, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d102      	bne.n	8004d0e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004d0c:	e01b      	b.n	8004d46 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0ef      	beq.n	8004cfe <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1ea      	bne.n	8004cfe <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d004      	beq.n	8004d3e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2204      	movs	r2, #4
 8004d38:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d3a:	2304      	movs	r3, #4
 8004d3c:	e003      	b.n	8004d46 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	22c5      	movs	r2, #197	@ 0xc5
 8004d42:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	20000000 	.word	0x20000000
 8004d58:	10624dd3 	.word	0x10624dd3

08004d5c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	460b      	mov	r3, r1
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d6a:	4b35      	ldr	r3, [pc, #212]	@ (8004e40 <SDMMC_GetCmdResp6+0xe4>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a35      	ldr	r2, [pc, #212]	@ (8004e44 <SDMMC_GetCmdResp6+0xe8>)
 8004d70:	fba2 2303 	umull	r2, r3, r2, r3
 8004d74:	0a5b      	lsrs	r3, r3, #9
 8004d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	1e5a      	subs	r2, r3, #1
 8004d84:	61fa      	str	r2, [r7, #28]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d102      	bne.n	8004d90 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d8a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004d8e:	e052      	b.n	8004e36 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d94:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0ef      	beq.n	8004d80 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1ea      	bne.n	8004d80 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d004      	beq.n	8004dc0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2204      	movs	r2, #4
 8004dba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	e03a      	b.n	8004e36 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d004      	beq.n	8004dd6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e02f      	b.n	8004e36 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7ff fbcb 	bl	8004572 <SDIO_GetCommandResponse>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	461a      	mov	r2, r3
 8004de0:	7afb      	ldrb	r3, [r7, #11]
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d001      	beq.n	8004dea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e025      	b.n	8004e36 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	22c5      	movs	r2, #197	@ 0xc5
 8004dee:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004df0:	2100      	movs	r1, #0
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f7ff fbca 	bl	800458c <SDIO_GetResponse>
 8004df8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d106      	bne.n	8004e12 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	0c1b      	lsrs	r3, r3, #16
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e011      	b.n	8004e36 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e20:	e009      	b.n	8004e36 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e30:	e001      	b.n	8004e36 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004e32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3720      	adds	r7, #32
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000000 	.word	0x20000000
 8004e44:	10624dd3 	.word	0x10624dd3

08004e48 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e50:	4b22      	ldr	r3, [pc, #136]	@ (8004edc <SDMMC_GetCmdResp7+0x94>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a22      	ldr	r2, [pc, #136]	@ (8004ee0 <SDMMC_GetCmdResp7+0x98>)
 8004e56:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5a:	0a5b      	lsrs	r3, r3, #9
 8004e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e60:	fb02 f303 	mul.w	r3, r2, r3
 8004e64:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1e5a      	subs	r2, r3, #1
 8004e6a:	60fa      	str	r2, [r7, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e70:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004e74:	e02c      	b.n	8004ed0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e7a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0ef      	beq.n	8004e66 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1ea      	bne.n	8004e66 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d004      	beq.n	8004ea6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2204      	movs	r2, #4
 8004ea0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ea2:	2304      	movs	r3, #4
 8004ea4:	e014      	b.n	8004ed0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d004      	beq.n	8004ebc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e009      	b.n	8004ed0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2240      	movs	r2, #64	@ 0x40
 8004ecc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004ece:	2300      	movs	r3, #0
  
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	20000000 	.word	0x20000000
 8004ee0:	10624dd3 	.word	0x10624dd3

08004ee4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004eec:	4b11      	ldr	r3, [pc, #68]	@ (8004f34 <SDMMC_GetCmdError+0x50>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a11      	ldr	r2, [pc, #68]	@ (8004f38 <SDMMC_GetCmdError+0x54>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	0a5b      	lsrs	r3, r3, #9
 8004ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004efc:	fb02 f303 	mul.w	r3, r2, r3
 8004f00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	1e5a      	subs	r2, r3, #1
 8004f06:	60fa      	str	r2, [r7, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d102      	bne.n	8004f12 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f0c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004f10:	e009      	b.n	8004f26 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f1      	beq.n	8004f02 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	22c5      	movs	r2, #197	@ 0xc5
 8004f22:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	20000000 	.word	0x20000000
 8004f38:	10624dd3 	.word	0x10624dd3

08004f3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	f107 001c 	add.w	r0, r7, #28
 8004f4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f4e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d123      	bne.n	8004f9e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004f6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d105      	bne.n	8004f92 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fa9a 	bl	80054cc <USB_CoreReset>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	73fb      	strb	r3, [r7, #15]
 8004f9c:	e01b      	b.n	8004fd6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fa8e 	bl	80054cc <USB_CoreReset>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fb4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d106      	bne.n	8004fca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	639a      	str	r2, [r3, #56]	@ 0x38
 8004fc8:	e005      	b.n	8004fd6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004fd6:	7fbb      	ldrb	r3, [r7, #30]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d10b      	bne.n	8004ff4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f043 0206 	orr.w	r2, r3, #6
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f043 0220 	orr.w	r2, r3, #32
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005000:	b004      	add	sp, #16
 8005002:	4770      	bx	lr

08005004 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f023 0201 	bic.w	r2, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d115      	bne.n	8005074 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005054:	200a      	movs	r0, #10
 8005056:	f7fc f923 	bl	80012a0 <HAL_Delay>
      ms += 10U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	330a      	adds	r3, #10
 800505e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fa25 	bl	80054b0 <USB_GetMode>
 8005066:	4603      	mov	r3, r0
 8005068:	2b01      	cmp	r3, #1
 800506a:	d01e      	beq.n	80050aa <USB_SetCurrentMode+0x84>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005070:	d9f0      	bls.n	8005054 <USB_SetCurrentMode+0x2e>
 8005072:	e01a      	b.n	80050aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d115      	bne.n	80050a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005086:	200a      	movs	r0, #10
 8005088:	f7fc f90a 	bl	80012a0 <HAL_Delay>
      ms += 10U;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	330a      	adds	r3, #10
 8005090:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fa0c 	bl	80054b0 <USB_GetMode>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d005      	beq.n	80050aa <USB_SetCurrentMode+0x84>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80050a2:	d9f0      	bls.n	8005086 <USB_SetCurrentMode+0x60>
 80050a4:	e001      	b.n	80050aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e005      	b.n	80050b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80050ae:	d101      	bne.n	80050b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e000      	b.n	80050b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050c0:	b084      	sub	sp, #16
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b086      	sub	sp, #24
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80050ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050da:	2300      	movs	r3, #0
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	e009      	b.n	80050f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	3340      	adds	r3, #64	@ 0x40
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	2200      	movs	r2, #0
 80050ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	3301      	adds	r3, #1
 80050f2:	613b      	str	r3, [r7, #16]
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b0e      	cmp	r3, #14
 80050f8:	d9f2      	bls.n	80050e0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d11c      	bne.n	800513c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005110:	f043 0302 	orr.w	r3, r3, #2
 8005114:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	e005      	b.n	8005148 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005140:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800514e:	461a      	mov	r2, r3
 8005150:	2300      	movs	r3, #0
 8005152:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005154:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005158:	2b01      	cmp	r3, #1
 800515a:	d10d      	bne.n	8005178 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800515c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005164:	2100      	movs	r1, #0
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f968 	bl	800543c <USB_SetDevSpeed>
 800516c:	e008      	b.n	8005180 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800516e:	2101      	movs	r1, #1
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f963 	bl	800543c <USB_SetDevSpeed>
 8005176:	e003      	b.n	8005180 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005178:	2103      	movs	r1, #3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f95e 	bl	800543c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005180:	2110      	movs	r1, #16
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f8fa 	bl	800537c <USB_FlushTxFifo>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f924 	bl	80053e0 <USB_FlushRxFifo>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051a8:	461a      	mov	r2, r3
 80051aa:	2300      	movs	r3, #0
 80051ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051b4:	461a      	mov	r2, r3
 80051b6:	2300      	movs	r3, #0
 80051b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051c0:	461a      	mov	r2, r3
 80051c2:	2300      	movs	r3, #0
 80051c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051c6:	2300      	movs	r3, #0
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	e043      	b.n	8005254 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051e2:	d118      	bne.n	8005216 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051f6:	461a      	mov	r2, r3
 80051f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	e013      	b.n	8005228 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800520c:	461a      	mov	r2, r3
 800520e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	e008      	b.n	8005228 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005222:	461a      	mov	r2, r3
 8005224:	2300      	movs	r3, #0
 8005226:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005234:	461a      	mov	r2, r3
 8005236:	2300      	movs	r3, #0
 8005238:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005246:	461a      	mov	r2, r3
 8005248:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800524c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	3301      	adds	r3, #1
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005258:	461a      	mov	r2, r3
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	4293      	cmp	r3, r2
 800525e:	d3b5      	bcc.n	80051cc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005260:	2300      	movs	r3, #0
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	e043      	b.n	80052ee <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005278:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800527c:	d118      	bne.n	80052b0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005290:	461a      	mov	r2, r3
 8005292:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	e013      	b.n	80052c2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052a6:	461a      	mov	r2, r3
 80052a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e008      	b.n	80052c2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052bc:	461a      	mov	r2, r3
 80052be:	2300      	movs	r3, #0
 80052c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ce:	461a      	mov	r2, r3
 80052d0:	2300      	movs	r3, #0
 80052d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e0:	461a      	mov	r2, r3
 80052e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80052e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	3301      	adds	r3, #1
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80052f2:	461a      	mov	r2, r3
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d3b5      	bcc.n	8005266 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800530c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800531a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800531c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005320:	2b00      	cmp	r3, #0
 8005322:	d105      	bne.n	8005330 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	f043 0210 	orr.w	r2, r3, #16
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	4b10      	ldr	r3, [pc, #64]	@ (8005378 <USB_DevInit+0x2b8>)
 8005336:	4313      	orrs	r3, r2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800533c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005340:	2b00      	cmp	r3, #0
 8005342:	d005      	beq.n	8005350 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f043 0208 	orr.w	r2, r3, #8
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005350:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005354:	2b01      	cmp	r3, #1
 8005356:	d107      	bne.n	8005368 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005360:	f043 0304 	orr.w	r3, r3, #4
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005368:	7dfb      	ldrb	r3, [r7, #23]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005374:	b004      	add	sp, #16
 8005376:	4770      	bx	lr
 8005378:	803c3800 	.word	0x803c3800

0800537c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3301      	adds	r3, #1
 800538e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005396:	d901      	bls.n	800539c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e01b      	b.n	80053d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	daf2      	bge.n	800538a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	019b      	lsls	r3, r3, #6
 80053ac:	f043 0220 	orr.w	r2, r3, #32
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3301      	adds	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053c0:	d901      	bls.n	80053c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e006      	b.n	80053d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	d0f0      	beq.n	80053b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3301      	adds	r3, #1
 80053f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053f8:	d901      	bls.n	80053fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e018      	b.n	8005430 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	daf2      	bge.n	80053ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005406:	2300      	movs	r3, #0
 8005408:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2210      	movs	r2, #16
 800540e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3301      	adds	r3, #1
 8005414:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800541c:	d901      	bls.n	8005422 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e006      	b.n	8005430 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f003 0310 	and.w	r3, r3, #16
 800542a:	2b10      	cmp	r3, #16
 800542c:	d0f0      	beq.n	8005410 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	68f9      	ldr	r1, [r7, #12]
 8005458:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800545c:	4313      	orrs	r3, r2
 800545e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005488:	f023 0303 	bic.w	r3, r3, #3
 800548c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800549c:	f043 0302 	orr.w	r3, r3, #2
 80054a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	f003 0301 	and.w	r3, r3, #1
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3301      	adds	r3, #1
 80054dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054e4:	d901      	bls.n	80054ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e022      	b.n	8005530 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	daf2      	bge.n	80054d8 <USB_CoreReset+0xc>

  count = 10U;
 80054f2:	230a      	movs	r3, #10
 80054f4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80054f6:	e002      	b.n	80054fe <USB_CoreReset+0x32>
  {
    count--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1f9      	bne.n	80054f8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f043 0201 	orr.w	r2, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3301      	adds	r3, #1
 8005514:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800551c:	d901      	bls.n	8005522 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e006      	b.n	8005530 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b01      	cmp	r3, #1
 800552c:	d0f0      	beq.n	8005510 <USB_CoreReset+0x44>

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005540:	4904      	ldr	r1, [pc, #16]	@ (8005554 <MX_FATFS_Init+0x18>)
 8005542:	4805      	ldr	r0, [pc, #20]	@ (8005558 <MX_FATFS_Init+0x1c>)
 8005544:	f003 f948 	bl	80087d8 <FATFS_LinkDriver>
 8005548:	4603      	mov	r3, r0
 800554a:	461a      	mov	r2, r3
 800554c:	4b03      	ldr	r3, [pc, #12]	@ (800555c <MX_FATFS_Init+0x20>)
 800554e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005550:	bf00      	nop
 8005552:	bd80      	pop	{r7, pc}
 8005554:	20000644 	.word	0x20000644
 8005558:	08009d24 	.word	0x08009d24
 800555c:	20000640 	.word	0x20000640

08005560 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005564:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005566:	4618      	mov	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800557a:	f7fb f85d 	bl	8000638 <BSP_SD_IsDetected>
 800557e:	4603      	mov	r3, r0
 8005580:	2b01      	cmp	r3, #1
 8005582:	d001      	beq.n	8005588 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e012      	b.n	80055ae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005588:	480b      	ldr	r0, [pc, #44]	@ (80055b8 <BSP_SD_Init+0x48>)
 800558a:	f7fd f9c5 	bl	8002918 <HAL_SD_Init>
 800558e:	4603      	mov	r3, r0
 8005590:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d109      	bne.n	80055ac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005598:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800559c:	4806      	ldr	r0, [pc, #24]	@ (80055b8 <BSP_SD_Init+0x48>)
 800559e:	f7fd ff97 	bl	80034d0 <HAL_SD_ConfigWideBusOperation>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80055ac:	79fb      	ldrb	r3, [r7, #7]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000084 	.word	0x20000084

080055bc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	68f9      	ldr	r1, [r7, #12]
 80055d8:	4806      	ldr	r0, [pc, #24]	@ (80055f4 <BSP_SD_ReadBlocks+0x38>)
 80055da:	f7fd fa45 	bl	8002a68 <HAL_SD_ReadBlocks>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80055e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20000084 	.word	0x20000084

080055f8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af02      	add	r7, sp, #8
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	68f9      	ldr	r1, [r7, #12]
 8005614:	4806      	ldr	r0, [pc, #24]	@ (8005630 <BSP_SD_WriteBlocks+0x38>)
 8005616:	f7fd fc05 	bl	8002e24 <HAL_SD_WriteBlocks>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005624:	7dfb      	ldrb	r3, [r7, #23]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20000084 	.word	0x20000084

08005634 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005638:	4805      	ldr	r0, [pc, #20]	@ (8005650 <BSP_SD_GetCardState+0x1c>)
 800563a:	f7fd ffe3 	bl	8003604 <HAL_SD_GetCardState>
 800563e:	4603      	mov	r3, r0
 8005640:	2b04      	cmp	r3, #4
 8005642:	bf14      	ite	ne
 8005644:	2301      	movne	r3, #1
 8005646:	2300      	moveq	r3, #0
 8005648:	b2db      	uxtb	r3, r3
}
 800564a:	4618      	mov	r0, r3
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000084 	.word	0x20000084

08005654 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4803      	ldr	r0, [pc, #12]	@ (800566c <BSP_SD_GetCardInfo+0x18>)
 8005660:	f7fd ff0a 	bl	8003478 <HAL_SD_GetCardInfo>
}
 8005664:	bf00      	nop
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	20000084 	.word	0x20000084

08005670 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800567a:	4b0b      	ldr	r3, [pc, #44]	@ (80056a8 <SD_CheckStatus+0x38>)
 800567c:	2201      	movs	r2, #1
 800567e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005680:	f7ff ffd8 	bl	8005634 <BSP_SD_GetCardState>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d107      	bne.n	800569a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800568a:	4b07      	ldr	r3, [pc, #28]	@ (80056a8 <SD_CheckStatus+0x38>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	b2db      	uxtb	r3, r3
 8005690:	f023 0301 	bic.w	r3, r3, #1
 8005694:	b2da      	uxtb	r2, r3
 8005696:	4b04      	ldr	r3, [pc, #16]	@ (80056a8 <SD_CheckStatus+0x38>)
 8005698:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800569a:	4b03      	ldr	r3, [pc, #12]	@ (80056a8 <SD_CheckStatus+0x38>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	b2db      	uxtb	r3, r3
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20000009 	.word	0x20000009

080056ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80056b6:	4b0b      	ldr	r3, [pc, #44]	@ (80056e4 <SD_initialize+0x38>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80056bc:	f7ff ff58 	bl	8005570 <BSP_SD_Init>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d107      	bne.n	80056d6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff ffd1 	bl	8005670 <SD_CheckStatus>
 80056ce:	4603      	mov	r3, r0
 80056d0:	461a      	mov	r2, r3
 80056d2:	4b04      	ldr	r3, [pc, #16]	@ (80056e4 <SD_initialize+0x38>)
 80056d4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80056d6:	4b03      	ldr	r3, [pc, #12]	@ (80056e4 <SD_initialize+0x38>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	b2db      	uxtb	r3, r3
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	20000009 	.word	0x20000009

080056e8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	4603      	mov	r3, r0
 80056f0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff ffbb 	bl	8005670 <SD_CheckStatus>
 80056fa:	4603      	mov	r3, r0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	4603      	mov	r3, r0
 8005712:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005718:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	68b8      	ldr	r0, [r7, #8]
 8005722:	f7ff ff4b 	bl	80055bc <BSP_SD_ReadBlocks>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d107      	bne.n	800573c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800572c:	bf00      	nop
 800572e:	f7ff ff81 	bl	8005634 <BSP_SD_GetCardState>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1fa      	bne.n	800572e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800573c:	7dfb      	ldrb	r3, [r7, #23]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b086      	sub	sp, #24
 800574a:	af00      	add	r7, sp, #0
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
 8005752:	4603      	mov	r3, r0
 8005754:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800575a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	68b8      	ldr	r0, [r7, #8]
 8005764:	f7ff ff48 	bl	80055f8 <BSP_SD_WriteBlocks>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d107      	bne.n	800577e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800576e:	bf00      	nop
 8005770:	f7ff ff60 	bl	8005634 <BSP_SD_GetCardState>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1fa      	bne.n	8005770 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800577e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08c      	sub	sp, #48	@ 0x30
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	603a      	str	r2, [r7, #0]
 8005792:	71fb      	strb	r3, [r7, #7]
 8005794:	460b      	mov	r3, r1
 8005796:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800579e:	4b25      	ldr	r3, [pc, #148]	@ (8005834 <SD_ioctl+0xac>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <SD_ioctl+0x28>
 80057ac:	2303      	movs	r3, #3
 80057ae:	e03c      	b.n	800582a <SD_ioctl+0xa2>

  switch (cmd)
 80057b0:	79bb      	ldrb	r3, [r7, #6]
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d834      	bhi.n	8005820 <SD_ioctl+0x98>
 80057b6:	a201      	add	r2, pc, #4	@ (adr r2, 80057bc <SD_ioctl+0x34>)
 80057b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057bc:	080057cd 	.word	0x080057cd
 80057c0:	080057d5 	.word	0x080057d5
 80057c4:	080057ed 	.word	0x080057ed
 80057c8:	08005807 	.word	0x08005807
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80057cc:	2300      	movs	r3, #0
 80057ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80057d2:	e028      	b.n	8005826 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80057d4:	f107 030c 	add.w	r3, r7, #12
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff ff3b 	bl	8005654 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80057de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80057ea:	e01c      	b.n	8005826 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80057ec:	f107 030c 	add.w	r3, r7, #12
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff ff2f 	bl	8005654 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80057f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005804:	e00f      	b.n	8005826 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005806:	f107 030c 	add.w	r3, r7, #12
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff ff22 	bl	8005654 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005812:	0a5a      	lsrs	r2, r3, #9
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800581e:	e002      	b.n	8005826 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005820:	2304      	movs	r3, #4
 8005822:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005826:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800582a:	4618      	mov	r0, r3
 800582c:	3730      	adds	r7, #48	@ 0x30
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	20000009 	.word	0x20000009

08005838 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	4603      	mov	r3, r0
 8005840:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	4a08      	ldr	r2, [pc, #32]	@ (8005868 <disk_status+0x30>)
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	79fa      	ldrb	r2, [r7, #7]
 8005850:	4905      	ldr	r1, [pc, #20]	@ (8005868 <disk_status+0x30>)
 8005852:	440a      	add	r2, r1
 8005854:	7a12      	ldrb	r2, [r2, #8]
 8005856:	4610      	mov	r0, r2
 8005858:	4798      	blx	r3
 800585a:	4603      	mov	r3, r0
 800585c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800585e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	200028d8 	.word	0x200028d8

0800586c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	4603      	mov	r3, r0
 8005874:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	4a0e      	ldr	r2, [pc, #56]	@ (80058b8 <disk_initialize+0x4c>)
 800587e:	5cd3      	ldrb	r3, [r2, r3]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d114      	bne.n	80058ae <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	4a0c      	ldr	r2, [pc, #48]	@ (80058b8 <disk_initialize+0x4c>)
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	79fa      	ldrb	r2, [r7, #7]
 8005892:	4909      	ldr	r1, [pc, #36]	@ (80058b8 <disk_initialize+0x4c>)
 8005894:	440a      	add	r2, r1
 8005896:	7a12      	ldrb	r2, [r2, #8]
 8005898:	4610      	mov	r0, r2
 800589a:	4798      	blx	r3
 800589c:	4603      	mov	r3, r0
 800589e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	4a03      	ldr	r2, [pc, #12]	@ (80058b8 <disk_initialize+0x4c>)
 80058aa:	2101      	movs	r1, #1
 80058ac:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	200028d8 	.word	0x200028d8

080058bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80058bc:	b590      	push	{r4, r7, lr}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	4603      	mov	r3, r0
 80058ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	4a0a      	ldr	r2, [pc, #40]	@ (80058f8 <disk_read+0x3c>)
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	689c      	ldr	r4, [r3, #8]
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	4a07      	ldr	r2, [pc, #28]	@ (80058f8 <disk_read+0x3c>)
 80058dc:	4413      	add	r3, r2
 80058de:	7a18      	ldrb	r0, [r3, #8]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	47a0      	blx	r4
 80058e8:	4603      	mov	r3, r0
 80058ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd90      	pop	{r4, r7, pc}
 80058f6:	bf00      	nop
 80058f8:	200028d8 	.word	0x200028d8

080058fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80058fc:	b590      	push	{r4, r7, lr}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	607a      	str	r2, [r7, #4]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	4603      	mov	r3, r0
 800590a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800590c:	7bfb      	ldrb	r3, [r7, #15]
 800590e:	4a0a      	ldr	r2, [pc, #40]	@ (8005938 <disk_write+0x3c>)
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	68dc      	ldr	r4, [r3, #12]
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	4a07      	ldr	r2, [pc, #28]	@ (8005938 <disk_write+0x3c>)
 800591c:	4413      	add	r3, r2
 800591e:	7a18      	ldrb	r0, [r3, #8]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	47a0      	blx	r4
 8005928:	4603      	mov	r3, r0
 800592a:	75fb      	strb	r3, [r7, #23]
  return res;
 800592c:	7dfb      	ldrb	r3, [r7, #23]
}
 800592e:	4618      	mov	r0, r3
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	bd90      	pop	{r4, r7, pc}
 8005936:	bf00      	nop
 8005938:	200028d8 	.word	0x200028d8

0800593c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	4603      	mov	r3, r0
 8005944:	603a      	str	r2, [r7, #0]
 8005946:	71fb      	strb	r3, [r7, #7]
 8005948:	460b      	mov	r3, r1
 800594a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800594c:	79fb      	ldrb	r3, [r7, #7]
 800594e:	4a09      	ldr	r2, [pc, #36]	@ (8005974 <disk_ioctl+0x38>)
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	79fa      	ldrb	r2, [r7, #7]
 800595a:	4906      	ldr	r1, [pc, #24]	@ (8005974 <disk_ioctl+0x38>)
 800595c:	440a      	add	r2, r1
 800595e:	7a10      	ldrb	r0, [r2, #8]
 8005960:	79b9      	ldrb	r1, [r7, #6]
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	4798      	blx	r3
 8005966:	4603      	mov	r3, r0
 8005968:	73fb      	strb	r3, [r7, #15]
  return res;
 800596a:	7bfb      	ldrb	r3, [r7, #15]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	200028d8 	.word	0x200028d8

08005978 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3301      	adds	r3, #1
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005988:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	b21a      	sxth	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	b21b      	sxth	r3, r3
 8005996:	4313      	orrs	r3, r2
 8005998:	b21b      	sxth	r3, r3
 800599a:	81fb      	strh	r3, [r7, #14]
	return rv;
 800599c:	89fb      	ldrh	r3, [r7, #14]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80059aa:	b480      	push	{r7}
 80059ac:	b085      	sub	sp, #20
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3303      	adds	r3, #3
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	3202      	adds	r2, #2
 80059c2:	7812      	ldrb	r2, [r2, #0]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	021b      	lsls	r3, r3, #8
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	3201      	adds	r2, #1
 80059d0:	7812      	ldrb	r2, [r2, #0]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	021b      	lsls	r3, r3, #8
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	7812      	ldrb	r2, [r2, #0]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
	return rv;
 80059e2:	68fb      	ldr	r3, [r7, #12]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	607a      	str	r2, [r7, #4]
 8005a02:	887a      	ldrh	r2, [r7, #2]
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	887b      	ldrh	r3, [r7, #2]
 8005a0a:	0a1b      	lsrs	r3, r3, #8
 8005a0c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	887a      	ldrh	r2, [r7, #2]
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	701a      	strb	r2, [r3, #0]
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	607a      	str	r2, [r7, #4]
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	0a1b      	lsrs	r3, r3, #8
 8005a40:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	701a      	strb	r2, [r3, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	0a1b      	lsrs	r3, r3, #8
 8005a52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	607a      	str	r2, [r7, #4]
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	0a1b      	lsrs	r3, r3, #8
 8005a64:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005a7e:	b480      	push	{r7}
 8005a80:	b087      	sub	sp, #28
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00d      	beq.n	8005ab4 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	1c53      	adds	r3, r2, #1
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	1c59      	adds	r1, r3, #1
 8005aa2:	6179      	str	r1, [r7, #20]
 8005aa4:	7812      	ldrb	r2, [r2, #0]
 8005aa6:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	607b      	str	r3, [r7, #4]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1f1      	bne.n	8005a98 <mem_cpy+0x1a>
	}
}
 8005ab4:	bf00      	nop
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	617a      	str	r2, [r7, #20]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	607b      	str	r3, [r7, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1f3      	bne.n	8005ad0 <mem_set+0x10>
}
 8005ae8:	bf00      	nop
 8005aea:	bf00      	nop
 8005aec:	371c      	adds	r7, #28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005af6:	b480      	push	{r7}
 8005af8:	b089      	sub	sp, #36	@ 0x24
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	61fb      	str	r3, [r7, #28]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	61fa      	str	r2, [r7, #28]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	4619      	mov	r1, r3
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	61ba      	str	r2, [r7, #24]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	1acb      	subs	r3, r1, r3
 8005b22:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	607b      	str	r3, [r7, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <mem_cmp+0x40>
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0eb      	beq.n	8005b0e <mem_cmp+0x18>

	return r;
 8005b36:	697b      	ldr	r3, [r7, #20]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3724      	adds	r7, #36	@ 0x24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005b4e:	e002      	b.n	8005b56 <chk_chr+0x12>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3301      	adds	r3, #1
 8005b54:	607b      	str	r3, [r7, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d005      	beq.n	8005b6a <chk_chr+0x26>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d1f2      	bne.n	8005b50 <chk_chr+0xc>
	return *str;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b86:	2300      	movs	r3, #0
 8005b88:	60bb      	str	r3, [r7, #8]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e029      	b.n	8005be4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005b90:	4a27      	ldr	r2, [pc, #156]	@ (8005c30 <chk_lock+0xb4>)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	4413      	add	r3, r2
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d01d      	beq.n	8005bda <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b9e:	4a24      	ldr	r2, [pc, #144]	@ (8005c30 <chk_lock+0xb4>)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	4413      	add	r3, r2
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d116      	bne.n	8005bde <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8005c30 <chk_lock+0xb4>)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3304      	adds	r3, #4
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d10c      	bne.n	8005bde <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8005c30 <chk_lock+0xb4>)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	4413      	add	r3, r2
 8005bcc:	3308      	adds	r3, #8
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d102      	bne.n	8005bde <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005bd8:	e007      	b.n	8005bea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3301      	adds	r3, #1
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d9d2      	bls.n	8005b90 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d109      	bne.n	8005c04 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d102      	bne.n	8005bfc <chk_lock+0x80>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d101      	bne.n	8005c00 <chk_lock+0x84>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	e010      	b.n	8005c22 <chk_lock+0xa6>
 8005c00:	2312      	movs	r3, #18
 8005c02:	e00e      	b.n	8005c22 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d108      	bne.n	8005c1c <chk_lock+0xa0>
 8005c0a:	4a09      	ldr	r2, [pc, #36]	@ (8005c30 <chk_lock+0xb4>)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	4413      	add	r3, r2
 8005c12:	330c      	adds	r3, #12
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c1a:	d101      	bne.n	8005c20 <chk_lock+0xa4>
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	e000      	b.n	8005c22 <chk_lock+0xa6>
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	200026b8 	.word	0x200026b8

08005c34 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	607b      	str	r3, [r7, #4]
 8005c3e:	e002      	b.n	8005c46 <enq_lock+0x12>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3301      	adds	r3, #1
 8005c44:	607b      	str	r3, [r7, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d806      	bhi.n	8005c5a <enq_lock+0x26>
 8005c4c:	4a09      	ldr	r2, [pc, #36]	@ (8005c74 <enq_lock+0x40>)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	011b      	lsls	r3, r3, #4
 8005c52:	4413      	add	r3, r2
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f2      	bne.n	8005c40 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	bf14      	ite	ne
 8005c60:	2301      	movne	r3, #1
 8005c62:	2300      	moveq	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	200026b8 	.word	0x200026b8

08005c78 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	e01f      	b.n	8005cc8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005c88:	4a41      	ldr	r2, [pc, #260]	@ (8005d90 <inc_lock+0x118>)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	011b      	lsls	r3, r3, #4
 8005c8e:	4413      	add	r3, r2
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d113      	bne.n	8005cc2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005c9a:	4a3d      	ldr	r2, [pc, #244]	@ (8005d90 <inc_lock+0x118>)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	4413      	add	r3, r2
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d109      	bne.n	8005cc2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005cae:	4a38      	ldr	r2, [pc, #224]	@ (8005d90 <inc_lock+0x118>)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	4413      	add	r3, r2
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d006      	beq.n	8005cd0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d9dc      	bls.n	8005c88 <inc_lock+0x10>
 8005cce:	e000      	b.n	8005cd2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005cd0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d132      	bne.n	8005d3e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	e002      	b.n	8005ce4 <inc_lock+0x6c>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d806      	bhi.n	8005cf8 <inc_lock+0x80>
 8005cea:	4a29      	ldr	r2, [pc, #164]	@ (8005d90 <inc_lock+0x118>)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	4413      	add	r3, r2
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f2      	bne.n	8005cde <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d101      	bne.n	8005d02 <inc_lock+0x8a>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e040      	b.n	8005d84 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	4922      	ldr	r1, [pc, #136]	@ (8005d90 <inc_lock+0x118>)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	440b      	add	r3, r1
 8005d0e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	491e      	ldr	r1, [pc, #120]	@ (8005d90 <inc_lock+0x118>)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	440b      	add	r3, r1
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	695a      	ldr	r2, [r3, #20]
 8005d24:	491a      	ldr	r1, [pc, #104]	@ (8005d90 <inc_lock+0x118>)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	440b      	add	r3, r1
 8005d2c:	3308      	adds	r3, #8
 8005d2e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005d30:	4a17      	ldr	r2, [pc, #92]	@ (8005d90 <inc_lock+0x118>)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	4413      	add	r3, r2
 8005d38:	330c      	adds	r3, #12
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d009      	beq.n	8005d58 <inc_lock+0xe0>
 8005d44:	4a12      	ldr	r2, [pc, #72]	@ (8005d90 <inc_lock+0x118>)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	4413      	add	r3, r2
 8005d4c:	330c      	adds	r3, #12
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <inc_lock+0xe0>
 8005d54:	2300      	movs	r3, #0
 8005d56:	e015      	b.n	8005d84 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d108      	bne.n	8005d70 <inc_lock+0xf8>
 8005d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8005d90 <inc_lock+0x118>)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	4413      	add	r3, r2
 8005d66:	330c      	adds	r3, #12
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	e001      	b.n	8005d74 <inc_lock+0xfc>
 8005d70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d74:	4906      	ldr	r1, [pc, #24]	@ (8005d90 <inc_lock+0x118>)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	440b      	add	r3, r1
 8005d7c:	330c      	adds	r3, #12
 8005d7e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3301      	adds	r3, #1
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	200026b8 	.word	0x200026b8

08005d94 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	607b      	str	r3, [r7, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d825      	bhi.n	8005df4 <dec_lock+0x60>
		n = Files[i].ctr;
 8005da8:	4a17      	ldr	r2, [pc, #92]	@ (8005e08 <dec_lock+0x74>)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	4413      	add	r3, r2
 8005db0:	330c      	adds	r3, #12
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005db6:	89fb      	ldrh	r3, [r7, #14]
 8005db8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dbc:	d101      	bne.n	8005dc2 <dec_lock+0x2e>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005dc2:	89fb      	ldrh	r3, [r7, #14]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <dec_lock+0x3a>
 8005dc8:	89fb      	ldrh	r3, [r7, #14]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005dce:	4a0e      	ldr	r2, [pc, #56]	@ (8005e08 <dec_lock+0x74>)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	4413      	add	r3, r2
 8005dd6:	330c      	adds	r3, #12
 8005dd8:	89fa      	ldrh	r2, [r7, #14]
 8005dda:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005ddc:	89fb      	ldrh	r3, [r7, #14]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d105      	bne.n	8005dee <dec_lock+0x5a>
 8005de2:	4a09      	ldr	r2, [pc, #36]	@ (8005e08 <dec_lock+0x74>)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	4413      	add	r3, r2
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	737b      	strb	r3, [r7, #13]
 8005df2:	e001      	b.n	8005df8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005df4:	2302      	movs	r3, #2
 8005df6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005df8:	7b7b      	ldrb	r3, [r7, #13]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	200026b8 	.word	0x200026b8

08005e0c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e010      	b.n	8005e3c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005e1a:	4a0d      	ldr	r2, [pc, #52]	@ (8005e50 <clear_lock+0x44>)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	4413      	add	r3, r2
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d105      	bne.n	8005e36 <clear_lock+0x2a>
 8005e2a:	4a09      	ldr	r2, [pc, #36]	@ (8005e50 <clear_lock+0x44>)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	4413      	add	r3, r2
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d9eb      	bls.n	8005e1a <clear_lock+0xe>
	}
}
 8005e42:	bf00      	nop
 8005e44:	bf00      	nop
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	200026b8 	.word	0x200026b8

08005e54 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	78db      	ldrb	r3, [r3, #3]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d034      	beq.n	8005ed2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e6c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	7858      	ldrb	r0, [r3, #1]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005e78:	2301      	movs	r3, #1
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	f7ff fd3e 	bl	80058fc <disk_write>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	73fb      	strb	r3, [r7, #15]
 8005e8a:	e022      	b.n	8005ed2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	1ad2      	subs	r2, r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d217      	bcs.n	8005ed2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	789b      	ldrb	r3, [r3, #2]
 8005ea6:	613b      	str	r3, [r7, #16]
 8005ea8:	e010      	b.n	8005ecc <sync_window+0x78>
					wsect += fs->fsize;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	7858      	ldrb	r0, [r3, #1]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	f7ff fd1b 	bl	80058fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	613b      	str	r3, [r7, #16]
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d8eb      	bhi.n	8005eaa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d01b      	beq.n	8005f2c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff ffad 	bl	8005e54 <sync_window>
 8005efa:	4603      	mov	r3, r0
 8005efc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d113      	bne.n	8005f2c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	7858      	ldrb	r0, [r3, #1]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005f0e:	2301      	movs	r3, #1
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	f7ff fcd3 	bl	80058bc <disk_read>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005f1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f20:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff ff87 	bl	8005e54 <sync_window>
 8005f46:	4603      	mov	r3, r0
 8005f48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d159      	bne.n	8006004 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d149      	bne.n	8005fec <sync_fs+0xb4>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	791b      	ldrb	r3, [r3, #4]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d145      	bne.n	8005fec <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	899b      	ldrh	r3, [r3, #12]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	f7ff fda7 	bl	8005ac0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3338      	adds	r3, #56	@ 0x38
 8005f76:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005f7a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff fd36 	bl	80059f0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	3338      	adds	r3, #56	@ 0x38
 8005f88:	4921      	ldr	r1, [pc, #132]	@ (8006010 <sync_fs+0xd8>)
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fd4b 	bl	8005a26 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3338      	adds	r3, #56	@ 0x38
 8005f94:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005f98:	491e      	ldr	r1, [pc, #120]	@ (8006014 <sync_fs+0xdc>)
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7ff fd43 	bl	8005a26 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3338      	adds	r3, #56	@ 0x38
 8005fa4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	4619      	mov	r1, r3
 8005fae:	4610      	mov	r0, r2
 8005fb0:	f7ff fd39 	bl	8005a26 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3338      	adds	r3, #56	@ 0x38
 8005fb8:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f7ff fd2f 	bl	8005a26 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	7858      	ldrb	r0, [r3, #1]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f7ff fc8b 	bl	80058fc <disk_write>
			fs->fsi_flag = 0;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	785b      	ldrb	r3, [r3, #1]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff fca1 	bl	800593c <disk_ioctl>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <sync_fs+0xcc>
 8006000:	2301      	movs	r3, #1
 8006002:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006004:	7bfb      	ldrb	r3, [r7, #15]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	41615252 	.word	0x41615252
 8006014:	61417272 	.word	0x61417272

08006018 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	3b02      	subs	r3, #2
 8006026:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	3b02      	subs	r3, #2
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d301      	bcc.n	8006038 <clust2sect+0x20>
 8006034:	2300      	movs	r3, #0
 8006036:	e008      	b.n	800604a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	895b      	ldrh	r3, [r3, #10]
 800603c:	461a      	mov	r2, r3
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	fb03 f202 	mul.w	r2, r3, r2
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006048:	4413      	add	r3, r2
}
 800604a:	4618      	mov	r0, r3
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b086      	sub	sp, #24
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d904      	bls.n	8006076 <get_fat+0x20>
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d302      	bcc.n	800607c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006076:	2301      	movs	r3, #1
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	e0ba      	b.n	80061f2 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800607c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006080:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b03      	cmp	r3, #3
 8006088:	f000 8082 	beq.w	8006190 <get_fat+0x13a>
 800608c:	2b03      	cmp	r3, #3
 800608e:	f300 80a6 	bgt.w	80061de <get_fat+0x188>
 8006092:	2b01      	cmp	r3, #1
 8006094:	d002      	beq.n	800609c <get_fat+0x46>
 8006096:	2b02      	cmp	r3, #2
 8006098:	d055      	beq.n	8006146 <get_fat+0xf0>
 800609a:	e0a0      	b.n	80061de <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	085b      	lsrs	r3, r3, #1
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	899b      	ldrh	r3, [r3, #12]
 80060b2:	4619      	mov	r1, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80060ba:	4413      	add	r3, r2
 80060bc:	4619      	mov	r1, r3
 80060be:	6938      	ldr	r0, [r7, #16]
 80060c0:	f7ff ff0c 	bl	8005edc <move_window>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f040 808c 	bne.w	80061e4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	60fa      	str	r2, [r7, #12]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	8992      	ldrh	r2, [r2, #12]
 80060d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80060da:	fb01 f202 	mul.w	r2, r1, r2
 80060de:	1a9b      	subs	r3, r3, r2
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4413      	add	r3, r2
 80060e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80060e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	899b      	ldrh	r3, [r3, #12]
 80060f2:	4619      	mov	r1, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80060fa:	4413      	add	r3, r2
 80060fc:	4619      	mov	r1, r3
 80060fe:	6938      	ldr	r0, [r7, #16]
 8006100:	f7ff feec 	bl	8005edc <move_window>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d16e      	bne.n	80061e8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	899b      	ldrh	r3, [r3, #12]
 800610e:	461a      	mov	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	fbb3 f1f2 	udiv	r1, r3, r2
 8006116:	fb01 f202 	mul.w	r2, r1, r2
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4413      	add	r3, r2
 8006120:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006124:	021b      	lsls	r3, r3, #8
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	4313      	orrs	r3, r2
 800612a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <get_fat+0xe6>
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	091b      	lsrs	r3, r3, #4
 800613a:	e002      	b.n	8006142 <get_fat+0xec>
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006142:	617b      	str	r3, [r7, #20]
			break;
 8006144:	e055      	b.n	80061f2 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	899b      	ldrh	r3, [r3, #12]
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	b29b      	uxth	r3, r3
 8006152:	4619      	mov	r1, r3
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	fbb3 f3f1 	udiv	r3, r3, r1
 800615a:	4413      	add	r3, r2
 800615c:	4619      	mov	r1, r3
 800615e:	6938      	ldr	r0, [r7, #16]
 8006160:	f7ff febc 	bl	8005edc <move_window>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d140      	bne.n	80061ec <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	8992      	ldrh	r2, [r2, #12]
 8006178:	fbb3 f0f2 	udiv	r0, r3, r2
 800617c:	fb00 f202 	mul.w	r2, r0, r2
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	440b      	add	r3, r1
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff fbf7 	bl	8005978 <ld_word>
 800618a:	4603      	mov	r3, r0
 800618c:	617b      	str	r3, [r7, #20]
			break;
 800618e:	e030      	b.n	80061f2 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	899b      	ldrh	r3, [r3, #12]
 8006198:	089b      	lsrs	r3, r3, #2
 800619a:	b29b      	uxth	r3, r3
 800619c:	4619      	mov	r1, r3
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80061a4:	4413      	add	r3, r2
 80061a6:	4619      	mov	r1, r3
 80061a8:	6938      	ldr	r0, [r7, #16]
 80061aa:	f7ff fe97 	bl	8005edc <move_window>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d11d      	bne.n	80061f0 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	8992      	ldrh	r2, [r2, #12]
 80061c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80061c6:	fb00 f202 	mul.w	r2, r0, r2
 80061ca:	1a9b      	subs	r3, r3, r2
 80061cc:	440b      	add	r3, r1
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff fbeb 	bl	80059aa <ld_dword>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80061da:	617b      	str	r3, [r7, #20]
			break;
 80061dc:	e009      	b.n	80061f2 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80061de:	2301      	movs	r3, #1
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	e006      	b.n	80061f2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061e4:	bf00      	nop
 80061e6:	e004      	b.n	80061f2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061e8:	bf00      	nop
 80061ea:	e002      	b.n	80061f2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80061ec:	bf00      	nop
 80061ee:	e000      	b.n	80061f2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80061f0:	bf00      	nop
		}
	}

	return val;
 80061f2:	697b      	ldr	r3, [r7, #20]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80061fc:	b590      	push	{r4, r7, lr}
 80061fe:	b089      	sub	sp, #36	@ 0x24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006208:	2302      	movs	r3, #2
 800620a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b01      	cmp	r3, #1
 8006210:	f240 8109 	bls.w	8006426 <put_fat+0x22a>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	429a      	cmp	r2, r3
 800621c:	f080 8103 	bcs.w	8006426 <put_fat+0x22a>
		switch (fs->fs_type) {
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b03      	cmp	r3, #3
 8006226:	f000 80b6 	beq.w	8006396 <put_fat+0x19a>
 800622a:	2b03      	cmp	r3, #3
 800622c:	f300 80fb 	bgt.w	8006426 <put_fat+0x22a>
 8006230:	2b01      	cmp	r3, #1
 8006232:	d003      	beq.n	800623c <put_fat+0x40>
 8006234:	2b02      	cmp	r3, #2
 8006236:	f000 8083 	beq.w	8006340 <put_fat+0x144>
 800623a:	e0f4      	b.n	8006426 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	61bb      	str	r3, [r7, #24]
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	085b      	lsrs	r3, r3, #1
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	4413      	add	r3, r2
 8006248:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	899b      	ldrh	r3, [r3, #12]
 8006252:	4619      	mov	r1, r3
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	fbb3 f3f1 	udiv	r3, r3, r1
 800625a:	4413      	add	r3, r2
 800625c:	4619      	mov	r1, r3
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f7ff fe3c 	bl	8005edc <move_window>
 8006264:	4603      	mov	r3, r0
 8006266:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006268:	7ffb      	ldrb	r3, [r7, #31]
 800626a:	2b00      	cmp	r3, #0
 800626c:	f040 80d4 	bne.w	8006418 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	61ba      	str	r2, [r7, #24]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	8992      	ldrh	r2, [r2, #12]
 8006280:	fbb3 f0f2 	udiv	r0, r3, r2
 8006284:	fb00 f202 	mul.w	r2, r0, r2
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	440b      	add	r3, r1
 800628c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00d      	beq.n	80062b4 <put_fat+0xb8>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	b25b      	sxtb	r3, r3
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	b25a      	sxtb	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	b25b      	sxtb	r3, r3
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	b25b      	sxtb	r3, r3
 80062ac:	4313      	orrs	r3, r2
 80062ae:	b25b      	sxtb	r3, r3
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	e001      	b.n	80062b8 <put_fat+0xbc>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	899b      	ldrh	r3, [r3, #12]
 80062ca:	4619      	mov	r1, r3
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80062d2:	4413      	add	r3, r2
 80062d4:	4619      	mov	r1, r3
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f7ff fe00 	bl	8005edc <move_window>
 80062dc:	4603      	mov	r3, r0
 80062de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062e0:	7ffb      	ldrb	r3, [r7, #31]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f040 809a 	bne.w	800641c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	899b      	ldrh	r3, [r3, #12]
 80062f2:	461a      	mov	r2, r3
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80062fa:	fb00 f202 	mul.w	r2, r0, r2
 80062fe:	1a9b      	subs	r3, r3, r2
 8006300:	440b      	add	r3, r1
 8006302:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <put_fat+0x11a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	091b      	lsrs	r3, r3, #4
 8006312:	b2db      	uxtb	r3, r3
 8006314:	e00e      	b.n	8006334 <put_fat+0x138>
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	b25b      	sxtb	r3, r3
 800631c:	f023 030f 	bic.w	r3, r3, #15
 8006320:	b25a      	sxtb	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	0a1b      	lsrs	r3, r3, #8
 8006326:	b25b      	sxtb	r3, r3
 8006328:	f003 030f 	and.w	r3, r3, #15
 800632c:	b25b      	sxtb	r3, r3
 800632e:	4313      	orrs	r3, r2
 8006330:	b25b      	sxtb	r3, r3
 8006332:	b2db      	uxtb	r3, r3
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2201      	movs	r2, #1
 800633c:	70da      	strb	r2, [r3, #3]
			break;
 800633e:	e072      	b.n	8006426 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	899b      	ldrh	r3, [r3, #12]
 8006348:	085b      	lsrs	r3, r3, #1
 800634a:	b29b      	uxth	r3, r3
 800634c:	4619      	mov	r1, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	fbb3 f3f1 	udiv	r3, r3, r1
 8006354:	4413      	add	r3, r2
 8006356:	4619      	mov	r1, r3
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f7ff fdbf 	bl	8005edc <move_window>
 800635e:	4603      	mov	r3, r0
 8006360:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006362:	7ffb      	ldrb	r3, [r7, #31]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d15b      	bne.n	8006420 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	8992      	ldrh	r2, [r2, #12]
 8006376:	fbb3 f0f2 	udiv	r0, r3, r2
 800637a:	fb00 f202 	mul.w	r2, r0, r2
 800637e:	1a9b      	subs	r3, r3, r2
 8006380:	440b      	add	r3, r1
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	b292      	uxth	r2, r2
 8006386:	4611      	mov	r1, r2
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff fb31 	bl	80059f0 <st_word>
			fs->wflag = 1;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	70da      	strb	r2, [r3, #3]
			break;
 8006394:	e047      	b.n	8006426 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	899b      	ldrh	r3, [r3, #12]
 800639e:	089b      	lsrs	r3, r3, #2
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	4619      	mov	r1, r3
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80063aa:	4413      	add	r3, r2
 80063ac:	4619      	mov	r1, r3
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f7ff fd94 	bl	8005edc <move_window>
 80063b4:	4603      	mov	r3, r0
 80063b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063b8:	7ffb      	ldrb	r3, [r7, #31]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d132      	bne.n	8006424 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	8992      	ldrh	r2, [r2, #12]
 80063d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80063d6:	fb00 f202 	mul.w	r2, r0, r2
 80063da:	1a9b      	subs	r3, r3, r2
 80063dc:	440b      	add	r3, r1
 80063de:	4618      	mov	r0, r3
 80063e0:	f7ff fae3 	bl	80059aa <ld_dword>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80063ea:	4323      	orrs	r3, r4
 80063ec:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	8992      	ldrh	r2, [r2, #12]
 80063fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006400:	fb00 f202 	mul.w	r2, r0, r2
 8006404:	1a9b      	subs	r3, r3, r2
 8006406:	440b      	add	r3, r1
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff fb0b 	bl	8005a26 <st_dword>
			fs->wflag = 1;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	70da      	strb	r2, [r3, #3]
			break;
 8006416:	e006      	b.n	8006426 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006418:	bf00      	nop
 800641a:	e004      	b.n	8006426 <put_fat+0x22a>
			if (res != FR_OK) break;
 800641c:	bf00      	nop
 800641e:	e002      	b.n	8006426 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006420:	bf00      	nop
 8006422:	e000      	b.n	8006426 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006424:	bf00      	nop
		}
	}
	return res;
 8006426:	7ffb      	ldrb	r3, [r7, #31]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3724      	adds	r7, #36	@ 0x24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd90      	pop	{r4, r7, pc}

08006430 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b088      	sub	sp, #32
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800643c:	2300      	movs	r3, #0
 800643e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d904      	bls.n	8006456 <remove_chain+0x26>
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	429a      	cmp	r2, r3
 8006454:	d301      	bcc.n	800645a <remove_chain+0x2a>
 8006456:	2302      	movs	r3, #2
 8006458:	e04b      	b.n	80064f2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00c      	beq.n	800647a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006460:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	69b8      	ldr	r0, [r7, #24]
 8006468:	f7ff fec8 	bl	80061fc <put_fat>
 800646c:	4603      	mov	r3, r0
 800646e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006470:	7ffb      	ldrb	r3, [r7, #31]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <remove_chain+0x4a>
 8006476:	7ffb      	ldrb	r3, [r7, #31]
 8006478:	e03b      	b.n	80064f2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800647a:	68b9      	ldr	r1, [r7, #8]
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7ff fdea 	bl	8006056 <get_fat>
 8006482:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d031      	beq.n	80064ee <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <remove_chain+0x64>
 8006490:	2302      	movs	r3, #2
 8006492:	e02e      	b.n	80064f2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800649a:	d101      	bne.n	80064a0 <remove_chain+0x70>
 800649c:	2301      	movs	r3, #1
 800649e:	e028      	b.n	80064f2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80064a0:	2200      	movs	r2, #0
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	69b8      	ldr	r0, [r7, #24]
 80064a6:	f7ff fea9 	bl	80061fc <put_fat>
 80064aa:	4603      	mov	r3, r0
 80064ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80064ae:	7ffb      	ldrb	r3, [r7, #31]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <remove_chain+0x88>
 80064b4:	7ffb      	ldrb	r3, [r7, #31]
 80064b6:	e01c      	b.n	80064f2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	699a      	ldr	r2, [r3, #24]
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	3b02      	subs	r3, #2
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d20b      	bcs.n	80064de <remove_chain+0xae>
			fs->free_clst++;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	791b      	ldrb	r3, [r3, #4]
 80064d4:	f043 0301 	orr.w	r3, r3, #1
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d3c6      	bcc.n	800647a <remove_chain+0x4a>
 80064ec:	e000      	b.n	80064f0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80064ee:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3720      	adds	r7, #32
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b088      	sub	sp, #32
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10d      	bne.n	800652c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d004      	beq.n	8006526 <create_chain+0x2c>
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	429a      	cmp	r2, r3
 8006524:	d31b      	bcc.n	800655e <create_chain+0x64>
 8006526:	2301      	movs	r3, #1
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	e018      	b.n	800655e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff fd91 	bl	8006056 <get_fat>
 8006534:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d801      	bhi.n	8006540 <create_chain+0x46>
 800653c:	2301      	movs	r3, #1
 800653e:	e070      	b.n	8006622 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006546:	d101      	bne.n	800654c <create_chain+0x52>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	e06a      	b.n	8006622 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	69db      	ldr	r3, [r3, #28]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	429a      	cmp	r2, r3
 8006554:	d201      	bcs.n	800655a <create_chain+0x60>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	e063      	b.n	8006622 <create_chain+0x128>
		scl = clst;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	3301      	adds	r3, #1
 8006566:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	69fa      	ldr	r2, [r7, #28]
 800656e:	429a      	cmp	r2, r3
 8006570:	d307      	bcc.n	8006582 <create_chain+0x88>
				ncl = 2;
 8006572:	2302      	movs	r3, #2
 8006574:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	429a      	cmp	r2, r3
 800657c:	d901      	bls.n	8006582 <create_chain+0x88>
 800657e:	2300      	movs	r3, #0
 8006580:	e04f      	b.n	8006622 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006582:	69f9      	ldr	r1, [r7, #28]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7ff fd66 	bl	8006056 <get_fat>
 800658a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00e      	beq.n	80065b0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d003      	beq.n	80065a0 <create_chain+0xa6>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800659e:	d101      	bne.n	80065a4 <create_chain+0xaa>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	e03e      	b.n	8006622 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80065a4:	69fa      	ldr	r2, [r7, #28]
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d1da      	bne.n	8006562 <create_chain+0x68>
 80065ac:	2300      	movs	r3, #0
 80065ae:	e038      	b.n	8006622 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80065b0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80065b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065b6:	69f9      	ldr	r1, [r7, #28]
 80065b8:	6938      	ldr	r0, [r7, #16]
 80065ba:	f7ff fe1f 	bl	80061fc <put_fat>
 80065be:	4603      	mov	r3, r0
 80065c0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d109      	bne.n	80065dc <create_chain+0xe2>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d006      	beq.n	80065dc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6938      	ldr	r0, [r7, #16]
 80065d4:	f7ff fe12 	bl	80061fc <put_fat>
 80065d8:	4603      	mov	r3, r0
 80065da:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d116      	bne.n	8006610 <create_chain+0x116>
		fs->last_clst = ncl;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	69fa      	ldr	r2, [r7, #28]
 80065e6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	699a      	ldr	r2, [r3, #24]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	3b02      	subs	r3, #2
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d804      	bhi.n	8006600 <create_chain+0x106>
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	1e5a      	subs	r2, r3, #1
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	791b      	ldrb	r3, [r3, #4]
 8006604:	f043 0301 	orr.w	r3, r3, #1
 8006608:	b2da      	uxtb	r2, r3
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	711a      	strb	r2, [r3, #4]
 800660e:	e007      	b.n	8006620 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006610:	7dfb      	ldrb	r3, [r7, #23]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d102      	bne.n	800661c <create_chain+0x122>
 8006616:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800661a:	e000      	b.n	800661e <create_chain+0x124>
 800661c:	2301      	movs	r3, #1
 800661e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006620:	69fb      	ldr	r3, [r7, #28]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800662a:	b480      	push	{r7}
 800662c:	b087      	sub	sp, #28
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663e:	3304      	adds	r3, #4
 8006640:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	899b      	ldrh	r3, [r3, #12]
 8006646:	461a      	mov	r2, r3
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	fbb3 f3f2 	udiv	r3, r3, r2
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	8952      	ldrh	r2, [r2, #10]
 8006652:	fbb3 f3f2 	udiv	r3, r3, r2
 8006656:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1d1a      	adds	r2, r3, #4
 800665c:	613a      	str	r2, [r7, #16]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <clmt_clust+0x42>
 8006668:	2300      	movs	r3, #0
 800666a:	e010      	b.n	800668e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	429a      	cmp	r2, r3
 8006672:	d307      	bcc.n	8006684 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	617b      	str	r3, [r7, #20]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	3304      	adds	r3, #4
 8006680:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006682:	e7e9      	b.n	8006658 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006684:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	4413      	add	r3, r2
}
 800668e:	4618      	mov	r0, r3
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b086      	sub	sp, #24
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066b0:	d204      	bcs.n	80066bc <dir_sdi+0x22>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	f003 031f 	and.w	r3, r3, #31
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80066bc:	2302      	movs	r3, #2
 80066be:	e071      	b.n	80067a4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d106      	bne.n	80066e0 <dir_sdi+0x46>
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d902      	bls.n	80066e0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066de:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10c      	bne.n	8006700 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	8912      	ldrh	r2, [r2, #8]
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d301      	bcc.n	80066f6 <dir_sdi+0x5c>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e056      	b.n	80067a4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	61da      	str	r2, [r3, #28]
 80066fe:	e02d      	b.n	800675c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	895b      	ldrh	r3, [r3, #10]
 8006704:	461a      	mov	r2, r3
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	899b      	ldrh	r3, [r3, #12]
 800670a:	fb02 f303 	mul.w	r3, r2, r3
 800670e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006710:	e019      	b.n	8006746 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6979      	ldr	r1, [r7, #20]
 8006716:	4618      	mov	r0, r3
 8006718:	f7ff fc9d 	bl	8006056 <get_fat>
 800671c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006724:	d101      	bne.n	800672a <dir_sdi+0x90>
 8006726:	2301      	movs	r3, #1
 8006728:	e03c      	b.n	80067a4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d904      	bls.n	800673a <dir_sdi+0xa0>
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	69db      	ldr	r3, [r3, #28]
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	429a      	cmp	r2, r3
 8006738:	d301      	bcc.n	800673e <dir_sdi+0xa4>
 800673a:	2302      	movs	r3, #2
 800673c:	e032      	b.n	80067a4 <dir_sdi+0x10a>
			ofs -= csz;
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	429a      	cmp	r2, r3
 800674c:	d2e1      	bcs.n	8006712 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800674e:	6979      	ldr	r1, [r7, #20]
 8006750:	6938      	ldr	r0, [r7, #16]
 8006752:	f7ff fc61 	bl	8006018 <clust2sect>
 8006756:	4602      	mov	r2, r0
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <dir_sdi+0xd4>
 800676a:	2302      	movs	r3, #2
 800676c:	e01a      	b.n	80067a4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69da      	ldr	r2, [r3, #28]
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	899b      	ldrh	r3, [r3, #12]
 8006776:	4619      	mov	r1, r3
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	fbb3 f3f1 	udiv	r3, r3, r1
 800677e:	441a      	add	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	899b      	ldrh	r3, [r3, #12]
 800678e:	461a      	mov	r2, r3
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	fbb3 f0f2 	udiv	r0, r3, r2
 8006796:	fb00 f202 	mul.w	r2, r0, r2
 800679a:	1a9b      	subs	r3, r3, r2
 800679c:	18ca      	adds	r2, r1, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	3320      	adds	r3, #32
 80067c2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <dir_next+0x28>
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067d2:	d301      	bcc.n	80067d8 <dir_next+0x2c>
 80067d4:	2304      	movs	r3, #4
 80067d6:	e0bb      	b.n	8006950 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	899b      	ldrh	r3, [r3, #12]
 80067dc:	461a      	mov	r2, r3
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80067e4:	fb01 f202 	mul.w	r2, r1, r2
 80067e8:	1a9b      	subs	r3, r3, r2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f040 809d 	bne.w	800692a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10b      	bne.n	800681a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	8912      	ldrh	r2, [r2, #8]
 800680a:	4293      	cmp	r3, r2
 800680c:	f0c0 808d 	bcc.w	800692a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	61da      	str	r2, [r3, #28]
 8006816:	2304      	movs	r3, #4
 8006818:	e09a      	b.n	8006950 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	899b      	ldrh	r3, [r3, #12]
 800681e:	461a      	mov	r2, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	fbb3 f3f2 	udiv	r3, r3, r2
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	8952      	ldrh	r2, [r2, #10]
 800682a:	3a01      	subs	r2, #1
 800682c:	4013      	ands	r3, r2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d17b      	bne.n	800692a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	4619      	mov	r1, r3
 800683a:	4610      	mov	r0, r2
 800683c:	f7ff fc0b 	bl	8006056 <get_fat>
 8006840:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d801      	bhi.n	800684c <dir_next+0xa0>
 8006848:	2302      	movs	r3, #2
 800684a:	e081      	b.n	8006950 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006852:	d101      	bne.n	8006858 <dir_next+0xac>
 8006854:	2301      	movs	r3, #1
 8006856:	e07b      	b.n	8006950 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	429a      	cmp	r2, r3
 8006860:	d359      	bcc.n	8006916 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d104      	bne.n	8006872 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	61da      	str	r2, [r3, #28]
 800686e:	2304      	movs	r3, #4
 8006870:	e06e      	b.n	8006950 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	4619      	mov	r1, r3
 800687a:	4610      	mov	r0, r2
 800687c:	f7ff fe3d 	bl	80064fa <create_chain>
 8006880:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <dir_next+0xe0>
 8006888:	2307      	movs	r3, #7
 800688a:	e061      	b.n	8006950 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d101      	bne.n	8006896 <dir_next+0xea>
 8006892:	2302      	movs	r3, #2
 8006894:	e05c      	b.n	8006950 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800689c:	d101      	bne.n	80068a2 <dir_next+0xf6>
 800689e:	2301      	movs	r3, #1
 80068a0:	e056      	b.n	8006950 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f7ff fad6 	bl	8005e54 <sync_window>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <dir_next+0x106>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e04e      	b.n	8006950 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	899b      	ldrh	r3, [r3, #12]
 80068bc:	461a      	mov	r2, r3
 80068be:	2100      	movs	r1, #0
 80068c0:	f7ff f8fe 	bl	8005ac0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80068c4:	2300      	movs	r3, #0
 80068c6:	613b      	str	r3, [r7, #16]
 80068c8:	6979      	ldr	r1, [r7, #20]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7ff fba4 	bl	8006018 <clust2sect>
 80068d0:	4602      	mov	r2, r0
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80068d6:	e012      	b.n	80068fe <dir_next+0x152>
						fs->wflag = 1;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2201      	movs	r2, #1
 80068dc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f7ff fab8 	bl	8005e54 <sync_window>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <dir_next+0x142>
 80068ea:	2301      	movs	r3, #1
 80068ec:	e030      	b.n	8006950 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	3301      	adds	r3, #1
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	895b      	ldrh	r3, [r3, #10]
 8006902:	461a      	mov	r2, r3
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	4293      	cmp	r3, r2
 8006908:	d3e6      	bcc.n	80068d8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1ad2      	subs	r2, r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800691c:	6979      	ldr	r1, [r7, #20]
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f7ff fb7a 	bl	8006018 <clust2sect>
 8006924:	4602      	mov	r2, r0
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	899b      	ldrh	r3, [r3, #12]
 800693a:	461a      	mov	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006942:	fb00 f202 	mul.w	r2, r0, r2
 8006946:	1a9b      	subs	r3, r3, r2
 8006948:	18ca      	adds	r2, r1, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006968:	2100      	movs	r1, #0
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff fe95 	bl	800669a <dir_sdi>
 8006970:	4603      	mov	r3, r0
 8006972:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d12b      	bne.n	80069d2 <dir_alloc+0x7a>
		n = 0;
 800697a:	2300      	movs	r3, #0
 800697c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	4619      	mov	r1, r3
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f7ff faa9 	bl	8005edc <move_window>
 800698a:	4603      	mov	r3, r0
 800698c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800698e:	7dfb      	ldrb	r3, [r7, #23]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d11d      	bne.n	80069d0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2be5      	cmp	r3, #229	@ 0xe5
 800699c:	d004      	beq.n	80069a8 <dir_alloc+0x50>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d107      	bne.n	80069b8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	3301      	adds	r3, #1
 80069ac:	613b      	str	r3, [r7, #16]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d102      	bne.n	80069bc <dir_alloc+0x64>
 80069b6:	e00c      	b.n	80069d2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80069b8:	2300      	movs	r3, #0
 80069ba:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80069bc:	2101      	movs	r1, #1
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7ff fef4 	bl	80067ac <dir_next>
 80069c4:	4603      	mov	r3, r0
 80069c6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0d7      	beq.n	800697e <dir_alloc+0x26>
 80069ce:	e000      	b.n	80069d2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80069d0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d101      	bne.n	80069dc <dir_alloc+0x84>
 80069d8:	2307      	movs	r3, #7
 80069da:	75fb      	strb	r3, [r7, #23]
	return res;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	331a      	adds	r3, #26
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe ffbf 	bl	8005978 <ld_word>
 80069fa:	4603      	mov	r3, r0
 80069fc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d109      	bne.n	8006a1a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	3314      	adds	r3, #20
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fe ffb4 	bl	8005978 <ld_word>
 8006a10:	4603      	mov	r3, r0
 8006a12:	041b      	lsls	r3, r3, #16
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	331a      	adds	r3, #26
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	b292      	uxth	r2, r2
 8006a38:	4611      	mov	r1, r2
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fe ffd8 	bl	80059f0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d109      	bne.n	8006a5c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f103 0214 	add.w	r2, r3, #20
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	0c1b      	lsrs	r3, r3, #16
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	4619      	mov	r1, r3
 8006a56:	4610      	mov	r0, r2
 8006a58:	f7fe ffca 	bl	80059f0 <st_word>
	}
}
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006a64:	b590      	push	{r4, r7, lr}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	331a      	adds	r3, #26
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe ff80 	bl	8005978 <ld_word>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <cmp_lfn+0x1e>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	e059      	b.n	8006b36 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a8a:	1e5a      	subs	r2, r3, #1
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006a98:	2301      	movs	r3, #1
 8006a9a:	81fb      	strh	r3, [r7, #14]
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	613b      	str	r3, [r7, #16]
 8006aa0:	e033      	b.n	8006b0a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006aa2:	4a27      	ldr	r2, [pc, #156]	@ (8006b40 <cmp_lfn+0xdc>)
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	4413      	add	r3, r2
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fe ff61 	bl	8005978 <ld_word>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006aba:	89fb      	ldrh	r3, [r7, #14]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01a      	beq.n	8006af6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	2bfe      	cmp	r3, #254	@ 0xfe
 8006ac4:	d812      	bhi.n	8006aec <cmp_lfn+0x88>
 8006ac6:	89bb      	ldrh	r3, [r7, #12]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f001 fed1 	bl	8008870 <ff_wtoupper>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	461c      	mov	r4, r3
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	617a      	str	r2, [r7, #20]
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	4413      	add	r3, r2
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f001 fec5 	bl	8008870 <ff_wtoupper>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	429c      	cmp	r4, r3
 8006aea:	d001      	beq.n	8006af0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006aec:	2300      	movs	r3, #0
 8006aee:	e022      	b.n	8006b36 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006af0:	89bb      	ldrh	r3, [r7, #12]
 8006af2:	81fb      	strh	r3, [r7, #14]
 8006af4:	e006      	b.n	8006b04 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006af6:	89bb      	ldrh	r3, [r7, #12]
 8006af8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d001      	beq.n	8006b04 <cmp_lfn+0xa0>
 8006b00:	2300      	movs	r3, #0
 8006b02:	e018      	b.n	8006b36 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	3301      	adds	r3, #1
 8006b08:	613b      	str	r3, [r7, #16]
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	2b0c      	cmp	r3, #12
 8006b0e:	d9c8      	bls.n	8006aa2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00b      	beq.n	8006b34 <cmp_lfn+0xd0>
 8006b1c:	89fb      	ldrh	r3, [r7, #14]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d008      	beq.n	8006b34 <cmp_lfn+0xd0>
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	4413      	add	r3, r2
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <cmp_lfn+0xd0>
 8006b30:	2300      	movs	r3, #0
 8006b32:	e000      	b.n	8006b36 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006b34:	2301      	movs	r3, #1
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd90      	pop	{r4, r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	08009db8 	.word	0x08009db8

08006b44 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	4611      	mov	r1, r2
 8006b50:	461a      	mov	r2, r3
 8006b52:	460b      	mov	r3, r1
 8006b54:	71fb      	strb	r3, [r7, #7]
 8006b56:	4613      	mov	r3, r2
 8006b58:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	330d      	adds	r3, #13
 8006b5e:	79ba      	ldrb	r2, [r7, #6]
 8006b60:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	330b      	adds	r3, #11
 8006b66:	220f      	movs	r2, #15
 8006b68:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	330c      	adds	r3, #12
 8006b6e:	2200      	movs	r2, #0
 8006b70:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	331a      	adds	r3, #26
 8006b76:	2100      	movs	r1, #0
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fe ff39 	bl	80059f0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006b7e:	79fb      	ldrb	r3, [r7, #7]
 8006b80:	1e5a      	subs	r2, r3, #1
 8006b82:	4613      	mov	r3, r2
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	4413      	add	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	82fb      	strh	r3, [r7, #22]
 8006b92:	2300      	movs	r3, #0
 8006b94:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006b96:	8afb      	ldrh	r3, [r7, #22]
 8006b98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d007      	beq.n	8006bb0 <put_lfn+0x6c>
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	61fa      	str	r2, [r7, #28]
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4413      	add	r3, r2
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006bb0:	4a17      	ldr	r2, [pc, #92]	@ (8006c10 <put_lfn+0xcc>)
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	8afa      	ldrh	r2, [r7, #22]
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe ff14 	bl	80059f0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006bc8:	8afb      	ldrh	r3, [r7, #22]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d102      	bne.n	8006bd4 <put_lfn+0x90>
 8006bce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006bd2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	61bb      	str	r3, [r7, #24]
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	2b0c      	cmp	r3, #12
 8006bde:	d9da      	bls.n	8006b96 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006be0:	8afb      	ldrh	r3, [r7, #22]
 8006be2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d006      	beq.n	8006bf8 <put_lfn+0xb4>
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d103      	bne.n	8006c00 <put_lfn+0xbc>
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bfe:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	79fa      	ldrb	r2, [r7, #7]
 8006c04:	701a      	strb	r2, [r3, #0]
}
 8006c06:	bf00      	nop
 8006c08:	3720      	adds	r7, #32
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	08009db8 	.word	0x08009db8

08006c14 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08c      	sub	sp, #48	@ 0x30
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
 8006c20:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006c22:	220b      	movs	r2, #11
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7fe ff29 	bl	8005a7e <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2b05      	cmp	r3, #5
 8006c30:	d92b      	bls.n	8006c8a <gen_numname+0x76>
		sr = seq;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006c36:	e022      	b.n	8006c7e <gen_numname+0x6a>
			wc = *lfn++;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	1c9a      	adds	r2, r3, #2
 8006c3c:	607a      	str	r2, [r7, #4]
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8006c42:	2300      	movs	r3, #0
 8006c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c46:	e017      	b.n	8006c78 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	005a      	lsls	r2, r3, #1
 8006c4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	4413      	add	r3, r2
 8006c54:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006c56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c58:	085b      	lsrs	r3, r3, #1
 8006c5a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d005      	beq.n	8006c72 <gen_numname+0x5e>
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8006c6c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8006c70:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c74:	3301      	adds	r3, #1
 8006c76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7a:	2b0f      	cmp	r3, #15
 8006c7c:	d9e4      	bls.n	8006c48 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1d8      	bne.n	8006c38 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006c8a:	2307      	movs	r3, #7
 8006c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	3330      	adds	r3, #48	@ 0x30
 8006c9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8006c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ca2:	2b39      	cmp	r3, #57	@ 0x39
 8006ca4:	d904      	bls.n	8006cb0 <gen_numname+0x9c>
 8006ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006caa:	3307      	adds	r3, #7
 8006cac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8006cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb2:	1e5a      	subs	r2, r3, #1
 8006cb4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006cb6:	3330      	adds	r3, #48	@ 0x30
 8006cb8:	443b      	add	r3, r7
 8006cba:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006cbe:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	091b      	lsrs	r3, r3, #4
 8006cc6:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1df      	bne.n	8006c8e <gen_numname+0x7a>
	ns[i] = '~';
 8006cce:	f107 0214 	add.w	r2, r7, #20
 8006cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd4:	4413      	add	r3, r2
 8006cd6:	227e      	movs	r2, #126	@ 0x7e
 8006cd8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006cda:	2300      	movs	r3, #0
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cde:	e002      	b.n	8006ce6 <gen_numname+0xd2>
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d205      	bcs.n	8006cfa <gen_numname+0xe6>
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf2:	4413      	add	r3, r2
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	d1f2      	bne.n	8006ce0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfc:	2b07      	cmp	r3, #7
 8006cfe:	d807      	bhi.n	8006d10 <gen_numname+0xfc>
 8006d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006d06:	3330      	adds	r3, #48	@ 0x30
 8006d08:	443b      	add	r3, r7
 8006d0a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006d0e:	e000      	b.n	8006d12 <gen_numname+0xfe>
 8006d10:	2120      	movs	r1, #32
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	460a      	mov	r2, r1
 8006d1e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d22:	2b07      	cmp	r3, #7
 8006d24:	d9e9      	bls.n	8006cfa <gen_numname+0xe6>
}
 8006d26:	bf00      	nop
 8006d28:	bf00      	nop
 8006d2a:	3730      	adds	r7, #48	@ 0x30
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006d3c:	230b      	movs	r3, #11
 8006d3e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	0852      	lsrs	r2, r2, #1
 8006d46:	01db      	lsls	r3, r3, #7
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	1c59      	adds	r1, r3, #1
 8006d50:	6079      	str	r1, [r7, #4]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	4413      	add	r3, r2
 8006d56:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	60bb      	str	r3, [r7, #8]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1ed      	bne.n	8006d40 <sum_sfn+0x10>
	return sum;
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b086      	sub	sp, #24
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006d80:	2100      	movs	r1, #0
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff fc89 	bl	800669a <dir_sdi>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <dir_find+0x24>
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	e0a9      	b.n	8006eea <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006d96:	23ff      	movs	r3, #255	@ 0xff
 8006d98:	753b      	strb	r3, [r7, #20]
 8006d9a:	7d3b      	ldrb	r3, [r7, #20]
 8006d9c:	757b      	strb	r3, [r7, #21]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006da4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6938      	ldr	r0, [r7, #16]
 8006dae:	f7ff f895 	bl	8005edc <move_window>
 8006db2:	4603      	mov	r3, r0
 8006db4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f040 8090 	bne.w	8006ede <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006dc6:	7dbb      	ldrb	r3, [r7, #22]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d102      	bne.n	8006dd2 <dir_find+0x60>
 8006dcc:	2304      	movs	r3, #4
 8006dce:	75fb      	strb	r3, [r7, #23]
 8006dd0:	e08a      	b.n	8006ee8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	330b      	adds	r3, #11
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dde:	73fb      	strb	r3, [r7, #15]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	7bfa      	ldrb	r2, [r7, #15]
 8006de4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006de6:	7dbb      	ldrb	r3, [r7, #22]
 8006de8:	2be5      	cmp	r3, #229	@ 0xe5
 8006dea:	d007      	beq.n	8006dfc <dir_find+0x8a>
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d009      	beq.n	8006e0a <dir_find+0x98>
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	2b0f      	cmp	r3, #15
 8006dfa:	d006      	beq.n	8006e0a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006dfc:	23ff      	movs	r3, #255	@ 0xff
 8006dfe:	757b      	strb	r3, [r7, #21]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e06:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e08:	e05e      	b.n	8006ec8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	2b0f      	cmp	r3, #15
 8006e0e:	d136      	bne.n	8006e7e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d154      	bne.n	8006ec8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006e1e:	7dbb      	ldrb	r3, [r7, #22]
 8006e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00d      	beq.n	8006e44 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	7b5b      	ldrb	r3, [r3, #13]
 8006e2e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006e30:	7dbb      	ldrb	r3, [r7, #22]
 8006e32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e36:	75bb      	strb	r3, [r7, #22]
 8006e38:	7dbb      	ldrb	r3, [r7, #22]
 8006e3a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	695a      	ldr	r2, [r3, #20]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006e44:	7dba      	ldrb	r2, [r7, #22]
 8006e46:	7d7b      	ldrb	r3, [r7, #21]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d115      	bne.n	8006e78 <dir_find+0x106>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	330d      	adds	r3, #13
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	7d3a      	ldrb	r2, [r7, #20]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d10e      	bne.n	8006e78 <dir_find+0x106>
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	691a      	ldr	r2, [r3, #16]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	4619      	mov	r1, r3
 8006e64:	4610      	mov	r0, r2
 8006e66:	f7ff fdfd 	bl	8006a64 <cmp_lfn>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <dir_find+0x106>
 8006e70:	7d7b      	ldrb	r3, [r7, #21]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	e000      	b.n	8006e7a <dir_find+0x108>
 8006e78:	23ff      	movs	r3, #255	@ 0xff
 8006e7a:	757b      	strb	r3, [r7, #21]
 8006e7c:	e024      	b.n	8006ec8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006e7e:	7d7b      	ldrb	r3, [r7, #21]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d109      	bne.n	8006e98 <dir_find+0x126>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff ff51 	bl	8006d30 <sum_sfn>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	461a      	mov	r2, r3
 8006e92:	7d3b      	ldrb	r3, [r7, #20]
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d024      	beq.n	8006ee2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10a      	bne.n	8006ebc <dir_find+0x14a>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a18      	ldr	r0, [r3, #32]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3324      	adds	r3, #36	@ 0x24
 8006eae:	220b      	movs	r2, #11
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	f7fe fe20 	bl	8005af6 <mem_cmp>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d014      	beq.n	8006ee6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006ebc:	23ff      	movs	r3, #255	@ 0xff
 8006ebe:	757b      	strb	r3, [r7, #21]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ec6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006ec8:	2100      	movs	r1, #0
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff fc6e 	bl	80067ac <dir_next>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f43f af65 	beq.w	8006da6 <dir_find+0x34>
 8006edc:	e004      	b.n	8006ee8 <dir_find+0x176>
		if (res != FR_OK) break;
 8006ede:	bf00      	nop
 8006ee0:	e002      	b.n	8006ee8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006ee2:	bf00      	nop
 8006ee4:	e000      	b.n	8006ee8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006ee6:	bf00      	nop

	return res;
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08c      	sub	sp, #48	@ 0x30
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006f08:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <dir_register+0x20>
 8006f10:	2306      	movs	r3, #6
 8006f12:	e0e0      	b.n	80070d6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006f14:	2300      	movs	r3, #0
 8006f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f18:	e002      	b.n	8006f20 <dir_register+0x2c>
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	4413      	add	r3, r2
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1f4      	bne.n	8006f1a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8006f36:	f107 030c 	add.w	r3, r7, #12
 8006f3a:	220c      	movs	r2, #12
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fe fd9e 	bl	8005a7e <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d032      	beq.n	8006fb2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2240      	movs	r2, #64	@ 0x40
 8006f50:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8006f54:	2301      	movs	r3, #1
 8006f56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f58:	e016      	b.n	8006f88 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	691a      	ldr	r2, [r3, #16]
 8006f64:	f107 010c 	add.w	r1, r7, #12
 8006f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6a:	f7ff fe53 	bl	8006c14 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7ff feff 	bl	8006d72 <dir_find>
 8006f74:	4603      	mov	r3, r0
 8006f76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8006f7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f84:	3301      	adds	r3, #1
 8006f86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8a:	2b63      	cmp	r3, #99	@ 0x63
 8006f8c:	d9e5      	bls.n	8006f5a <dir_register+0x66>
 8006f8e:	e000      	b.n	8006f92 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006f90:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f94:	2b64      	cmp	r3, #100	@ 0x64
 8006f96:	d101      	bne.n	8006f9c <dir_register+0xa8>
 8006f98:	2307      	movs	r3, #7
 8006f9a:	e09c      	b.n	80070d6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d002      	beq.n	8006faa <dir_register+0xb6>
 8006fa4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006fa8:	e095      	b.n	80070d6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006faa:	7dfa      	ldrb	r2, [r7, #23]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d007      	beq.n	8006fcc <dir_register+0xd8>
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbe:	330c      	adds	r3, #12
 8006fc0:	4a47      	ldr	r2, [pc, #284]	@ (80070e0 <dir_register+0x1ec>)
 8006fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc6:	089b      	lsrs	r3, r3, #2
 8006fc8:	3301      	adds	r3, #1
 8006fca:	e000      	b.n	8006fce <dir_register+0xda>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006fd0:	6a39      	ldr	r1, [r7, #32]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff fcc0 	bl	8006958 <dir_alloc>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006fde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d148      	bne.n	8007078 <dir_register+0x184>
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	623b      	str	r3, [r7, #32]
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d042      	beq.n	8007078 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	695a      	ldr	r2, [r3, #20]
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	015b      	lsls	r3, r3, #5
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff fb4b 	bl	800669a <dir_sdi>
 8007004:	4603      	mov	r3, r0
 8007006:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800700a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800700e:	2b00      	cmp	r3, #0
 8007010:	d132      	bne.n	8007078 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3324      	adds	r3, #36	@ 0x24
 8007016:	4618      	mov	r0, r3
 8007018:	f7ff fe8a 	bl	8006d30 <sum_sfn>
 800701c:	4603      	mov	r3, r0
 800701e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	4619      	mov	r1, r3
 8007026:	69f8      	ldr	r0, [r7, #28]
 8007028:	f7fe ff58 	bl	8005edc <move_window>
 800702c:	4603      	mov	r3, r0
 800702e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8007032:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007036:	2b00      	cmp	r3, #0
 8007038:	d11d      	bne.n	8007076 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	6918      	ldr	r0, [r3, #16]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a19      	ldr	r1, [r3, #32]
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	b2da      	uxtb	r2, r3
 8007046:	7efb      	ldrb	r3, [r7, #27]
 8007048:	f7ff fd7c 	bl	8006b44 <put_lfn>
				fs->wflag = 1;
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	2201      	movs	r2, #1
 8007050:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007052:	2100      	movs	r1, #0
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff fba9 	bl	80067ac <dir_next>
 800705a:	4603      	mov	r3, r0
 800705c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8007060:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007064:	2b00      	cmp	r3, #0
 8007066:	d107      	bne.n	8007078 <dir_register+0x184>
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	3b01      	subs	r3, #1
 800706c:	623b      	str	r3, [r7, #32]
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1d5      	bne.n	8007020 <dir_register+0x12c>
 8007074:	e000      	b.n	8007078 <dir_register+0x184>
				if (res != FR_OK) break;
 8007076:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007078:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800707c:	2b00      	cmp	r3, #0
 800707e:	d128      	bne.n	80070d2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	4619      	mov	r1, r3
 8007086:	69f8      	ldr	r0, [r7, #28]
 8007088:	f7fe ff28 	bl	8005edc <move_window>
 800708c:	4603      	mov	r3, r0
 800708e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007092:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007096:	2b00      	cmp	r3, #0
 8007098:	d11b      	bne.n	80070d2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	2220      	movs	r2, #32
 80070a0:	2100      	movs	r1, #0
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fe fd0c 	bl	8005ac0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a18      	ldr	r0, [r3, #32]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3324      	adds	r3, #36	@ 0x24
 80070b0:	220b      	movs	r2, #11
 80070b2:	4619      	mov	r1, r3
 80070b4:	f7fe fce3 	bl	8005a7e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	330c      	adds	r3, #12
 80070c4:	f002 0218 	and.w	r2, r2, #24
 80070c8:	b2d2      	uxtb	r2, r2
 80070ca:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	2201      	movs	r2, #1
 80070d0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80070d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3730      	adds	r7, #48	@ 0x30
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	4ec4ec4f 	.word	0x4ec4ec4f

080070e4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08a      	sub	sp, #40	@ 0x28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	613b      	str	r3, [r7, #16]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	2300      	movs	r3, #0
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	61ba      	str	r2, [r7, #24]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	4413      	add	r3, r2
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007112:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007114:	2b1f      	cmp	r3, #31
 8007116:	d940      	bls.n	800719a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007118:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800711a:	2b2f      	cmp	r3, #47	@ 0x2f
 800711c:	d006      	beq.n	800712c <create_name+0x48>
 800711e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007120:	2b5c      	cmp	r3, #92	@ 0x5c
 8007122:	d110      	bne.n	8007146 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007124:	e002      	b.n	800712c <create_name+0x48>
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	3301      	adds	r3, #1
 800712a:	61bb      	str	r3, [r7, #24]
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	4413      	add	r3, r2
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b2f      	cmp	r3, #47	@ 0x2f
 8007136:	d0f6      	beq.n	8007126 <create_name+0x42>
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	4413      	add	r3, r2
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	2b5c      	cmp	r3, #92	@ 0x5c
 8007142:	d0f0      	beq.n	8007126 <create_name+0x42>
			break;
 8007144:	e02a      	b.n	800719c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2bfe      	cmp	r3, #254	@ 0xfe
 800714a:	d901      	bls.n	8007150 <create_name+0x6c>
 800714c:	2306      	movs	r3, #6
 800714e:	e17d      	b.n	800744c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007150:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007152:	b2db      	uxtb	r3, r3
 8007154:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007156:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007158:	2101      	movs	r1, #1
 800715a:	4618      	mov	r0, r3
 800715c:	f001 fb4c 	bl	80087f8 <ff_convert>
 8007160:	4603      	mov	r3, r0
 8007162:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007164:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <create_name+0x8a>
 800716a:	2306      	movs	r3, #6
 800716c:	e16e      	b.n	800744c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800716e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007170:	2b7f      	cmp	r3, #127	@ 0x7f
 8007172:	d809      	bhi.n	8007188 <create_name+0xa4>
 8007174:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007176:	4619      	mov	r1, r3
 8007178:	488d      	ldr	r0, [pc, #564]	@ (80073b0 <create_name+0x2cc>)
 800717a:	f7fe fce3 	bl	8005b44 <chk_chr>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <create_name+0xa4>
 8007184:	2306      	movs	r3, #6
 8007186:	e161      	b.n	800744c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	617a      	str	r2, [r7, #20]
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007196:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007198:	e7b4      	b.n	8007104 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800719a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	441a      	add	r2, r3
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80071a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071a8:	2b1f      	cmp	r3, #31
 80071aa:	d801      	bhi.n	80071b0 <create_name+0xcc>
 80071ac:	2304      	movs	r3, #4
 80071ae:	e000      	b.n	80071b2 <create_name+0xce>
 80071b0:	2300      	movs	r3, #0
 80071b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80071b6:	e011      	b.n	80071dc <create_name+0xf8>
		w = lfn[di - 1];
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80071be:	3b01      	subs	r3, #1
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	4413      	add	r3, r2
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80071ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071cc:	2b20      	cmp	r3, #32
 80071ce:	d002      	beq.n	80071d6 <create_name+0xf2>
 80071d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80071d4:	d106      	bne.n	80071e4 <create_name+0x100>
		di--;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	3b01      	subs	r3, #1
 80071da:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1ea      	bne.n	80071b8 <create_name+0xd4>
 80071e2:	e000      	b.n	80071e6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80071e4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	4413      	add	r3, r2
 80071ee:	2200      	movs	r2, #0
 80071f0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <create_name+0x118>
 80071f8:	2306      	movs	r3, #6
 80071fa:	e127      	b.n	800744c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3324      	adds	r3, #36	@ 0x24
 8007200:	220b      	movs	r2, #11
 8007202:	2120      	movs	r1, #32
 8007204:	4618      	mov	r0, r3
 8007206:	f7fe fc5b 	bl	8005ac0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800720a:	2300      	movs	r3, #0
 800720c:	61bb      	str	r3, [r7, #24]
 800720e:	e002      	b.n	8007216 <create_name+0x132>
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	3301      	adds	r3, #1
 8007214:	61bb      	str	r3, [r7, #24]
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	4413      	add	r3, r2
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	2b20      	cmp	r3, #32
 8007222:	d0f5      	beq.n	8007210 <create_name+0x12c>
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	4413      	add	r3, r2
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007230:	d0ee      	beq.n	8007210 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d009      	beq.n	800724c <create_name+0x168>
 8007238:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800723c:	f043 0303 	orr.w	r3, r3, #3
 8007240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007244:	e002      	b.n	800724c <create_name+0x168>
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	3b01      	subs	r3, #1
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d009      	beq.n	8007266 <create_name+0x182>
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007258:	3b01      	subs	r3, #1
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	4413      	add	r3, r2
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	2b2e      	cmp	r3, #46	@ 0x2e
 8007264:	d1ef      	bne.n	8007246 <create_name+0x162>

	i = b = 0; ni = 8;
 8007266:	2300      	movs	r3, #0
 8007268:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800726c:	2300      	movs	r3, #0
 800726e:	623b      	str	r3, [r7, #32]
 8007270:	2308      	movs	r3, #8
 8007272:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	61ba      	str	r2, [r7, #24]
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	4413      	add	r3, r2
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007284:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 8090 	beq.w	80073ac <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800728c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800728e:	2b20      	cmp	r3, #32
 8007290:	d006      	beq.n	80072a0 <create_name+0x1bc>
 8007292:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007294:	2b2e      	cmp	r3, #46	@ 0x2e
 8007296:	d10a      	bne.n	80072ae <create_name+0x1ca>
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	429a      	cmp	r2, r3
 800729e:	d006      	beq.n	80072ae <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80072a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072a4:	f043 0303 	orr.w	r3, r3, #3
 80072a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80072ac:	e07d      	b.n	80073aa <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80072ae:	6a3a      	ldr	r2, [r7, #32]
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d203      	bcs.n	80072be <create_name+0x1da>
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d123      	bne.n	8007306 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	2b0b      	cmp	r3, #11
 80072c2:	d106      	bne.n	80072d2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80072c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072c8:	f043 0303 	orr.w	r3, r3, #3
 80072cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80072d0:	e075      	b.n	80073be <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d005      	beq.n	80072e6 <create_name+0x202>
 80072da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072de:	f043 0303 	orr.w	r3, r3, #3
 80072e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d866      	bhi.n	80073bc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	61bb      	str	r3, [r7, #24]
 80072f2:	2308      	movs	r3, #8
 80072f4:	623b      	str	r3, [r7, #32]
 80072f6:	230b      	movs	r3, #11
 80072f8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80072fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007304:	e051      	b.n	80073aa <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007306:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007308:	2b7f      	cmp	r3, #127	@ 0x7f
 800730a:	d914      	bls.n	8007336 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800730c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800730e:	2100      	movs	r1, #0
 8007310:	4618      	mov	r0, r3
 8007312:	f001 fa71 	bl	80087f8 <ff_convert>
 8007316:	4603      	mov	r3, r0
 8007318:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800731a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800731c:	2b00      	cmp	r3, #0
 800731e:	d004      	beq.n	800732a <create_name+0x246>
 8007320:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007322:	3b80      	subs	r3, #128	@ 0x80
 8007324:	4a23      	ldr	r2, [pc, #140]	@ (80073b4 <create_name+0x2d0>)
 8007326:	5cd3      	ldrb	r3, [r2, r3]
 8007328:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800732a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800732e:	f043 0302 	orr.w	r3, r3, #2
 8007332:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007336:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007338:	2b00      	cmp	r3, #0
 800733a:	d007      	beq.n	800734c <create_name+0x268>
 800733c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800733e:	4619      	mov	r1, r3
 8007340:	481d      	ldr	r0, [pc, #116]	@ (80073b8 <create_name+0x2d4>)
 8007342:	f7fe fbff 	bl	8005b44 <chk_chr>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d008      	beq.n	800735e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800734c:	235f      	movs	r3, #95	@ 0x5f
 800734e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007354:	f043 0303 	orr.w	r3, r3, #3
 8007358:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800735c:	e01b      	b.n	8007396 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800735e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007360:	2b40      	cmp	r3, #64	@ 0x40
 8007362:	d909      	bls.n	8007378 <create_name+0x294>
 8007364:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007366:	2b5a      	cmp	r3, #90	@ 0x5a
 8007368:	d806      	bhi.n	8007378 <create_name+0x294>
					b |= 2;
 800736a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800736e:	f043 0302 	orr.w	r3, r3, #2
 8007372:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007376:	e00e      	b.n	8007396 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007378:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800737a:	2b60      	cmp	r3, #96	@ 0x60
 800737c:	d90b      	bls.n	8007396 <create_name+0x2b2>
 800737e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007380:	2b7a      	cmp	r3, #122	@ 0x7a
 8007382:	d808      	bhi.n	8007396 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007384:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007388:	f043 0301 	orr.w	r3, r3, #1
 800738c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007390:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007392:	3b20      	subs	r3, #32
 8007394:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	623a      	str	r2, [r7, #32]
 800739c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800739e:	b2d1      	uxtb	r1, r2
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	4413      	add	r3, r2
 80073a4:	460a      	mov	r2, r1
 80073a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80073aa:	e763      	b.n	8007274 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80073ac:	bf00      	nop
 80073ae:	e006      	b.n	80073be <create_name+0x2da>
 80073b0:	08009cb8 	.word	0x08009cb8
 80073b4:	08009d38 	.word	0x08009d38
 80073b8:	08009cc4 	.word	0x08009cc4
			if (si > di) break;			/* No extension */
 80073bc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80073c4:	2be5      	cmp	r3, #229	@ 0xe5
 80073c6:	d103      	bne.n	80073d0 <create_name+0x2ec>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2205      	movs	r2, #5
 80073cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	2b08      	cmp	r3, #8
 80073d4:	d104      	bne.n	80073e0 <create_name+0x2fc>
 80073d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80073e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073e4:	f003 030c 	and.w	r3, r3, #12
 80073e8:	2b0c      	cmp	r3, #12
 80073ea:	d005      	beq.n	80073f8 <create_name+0x314>
 80073ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073f0:	f003 0303 	and.w	r3, r3, #3
 80073f4:	2b03      	cmp	r3, #3
 80073f6:	d105      	bne.n	8007404 <create_name+0x320>
 80073f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073fc:	f043 0302 	orr.w	r3, r3, #2
 8007400:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b00      	cmp	r3, #0
 800740e:	d117      	bne.n	8007440 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007410:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007414:	f003 0303 	and.w	r3, r3, #3
 8007418:	2b01      	cmp	r3, #1
 800741a:	d105      	bne.n	8007428 <create_name+0x344>
 800741c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007420:	f043 0310 	orr.w	r3, r3, #16
 8007424:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007428:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800742c:	f003 030c 	and.w	r3, r3, #12
 8007430:	2b04      	cmp	r3, #4
 8007432:	d105      	bne.n	8007440 <create_name+0x35c>
 8007434:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007438:	f043 0308 	orr.w	r3, r3, #8
 800743c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007446:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800744a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800744c:	4618      	mov	r0, r3
 800744e:	3728      	adds	r7, #40	@ 0x28
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007468:	e002      	b.n	8007470 <follow_path+0x1c>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	3301      	adds	r3, #1
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b2f      	cmp	r3, #47	@ 0x2f
 8007476:	d0f8      	beq.n	800746a <follow_path+0x16>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b5c      	cmp	r3, #92	@ 0x5c
 800747e:	d0f4      	beq.n	800746a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	2200      	movs	r2, #0
 8007484:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	2b1f      	cmp	r3, #31
 800748c:	d80a      	bhi.n	80074a4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2280      	movs	r2, #128	@ 0x80
 8007492:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007496:	2100      	movs	r1, #0
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff f8fe 	bl	800669a <dir_sdi>
 800749e:	4603      	mov	r3, r0
 80074a0:	75fb      	strb	r3, [r7, #23]
 80074a2:	e048      	b.n	8007536 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80074a4:	463b      	mov	r3, r7
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff fe1b 	bl	80070e4 <create_name>
 80074ae:	4603      	mov	r3, r0
 80074b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80074b2:	7dfb      	ldrb	r3, [r7, #23]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d139      	bne.n	800752c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7ff fc5a 	bl	8006d72 <dir_find>
 80074be:	4603      	mov	r3, r0
 80074c0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80074c8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80074ca:	7dfb      	ldrb	r3, [r7, #23]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00a      	beq.n	80074e6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	d12c      	bne.n	8007530 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80074d6:	7afb      	ldrb	r3, [r7, #11]
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d127      	bne.n	8007530 <follow_path+0xdc>
 80074e0:	2305      	movs	r3, #5
 80074e2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80074e4:	e024      	b.n	8007530 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80074e6:	7afb      	ldrb	r3, [r7, #11]
 80074e8:	f003 0304 	and.w	r3, r3, #4
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d121      	bne.n	8007534 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	799b      	ldrb	r3, [r3, #6]
 80074f4:	f003 0310 	and.w	r3, r3, #16
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d102      	bne.n	8007502 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80074fc:	2305      	movs	r3, #5
 80074fe:	75fb      	strb	r3, [r7, #23]
 8007500:	e019      	b.n	8007536 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	8992      	ldrh	r2, [r2, #12]
 8007510:	fbb3 f0f2 	udiv	r0, r3, r2
 8007514:	fb00 f202 	mul.w	r2, r0, r2
 8007518:	1a9b      	subs	r3, r3, r2
 800751a:	440b      	add	r3, r1
 800751c:	4619      	mov	r1, r3
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f7ff fa61 	bl	80069e6 <ld_clust>
 8007524:	4602      	mov	r2, r0
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800752a:	e7bb      	b.n	80074a4 <follow_path+0x50>
			if (res != FR_OK) break;
 800752c:	bf00      	nop
 800752e:	e002      	b.n	8007536 <follow_path+0xe2>
				break;
 8007530:	bf00      	nop
 8007532:	e000      	b.n	8007536 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007534:	bf00      	nop
			}
		}
	}

	return res;
 8007536:	7dfb      	ldrb	r3, [r7, #23]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3718      	adds	r7, #24
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007548:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800754c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d031      	beq.n	80075ba <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	617b      	str	r3, [r7, #20]
 800755c:	e002      	b.n	8007564 <get_ldnumber+0x24>
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	3301      	adds	r3, #1
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	2b1f      	cmp	r3, #31
 800756a:	d903      	bls.n	8007574 <get_ldnumber+0x34>
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	2b3a      	cmp	r3, #58	@ 0x3a
 8007572:	d1f4      	bne.n	800755e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	2b3a      	cmp	r3, #58	@ 0x3a
 800757a:	d11c      	bne.n	80075b6 <get_ldnumber+0x76>
			tp = *path;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	60fa      	str	r2, [r7, #12]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	3b30      	subs	r3, #48	@ 0x30
 800758c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b09      	cmp	r3, #9
 8007592:	d80e      	bhi.n	80075b2 <get_ldnumber+0x72>
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	429a      	cmp	r2, r3
 800759a:	d10a      	bne.n	80075b2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d107      	bne.n	80075b2 <get_ldnumber+0x72>
					vol = (int)i;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	3301      	adds	r3, #1
 80075aa:	617b      	str	r3, [r7, #20]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	e002      	b.n	80075bc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80075b6:	2300      	movs	r3, #0
 80075b8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80075ba:	693b      	ldr	r3, [r7, #16]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	371c      	adds	r7, #28
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	70da      	strb	r2, [r3, #3]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075de:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7fe fc7a 	bl	8005edc <move_window>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <check_fs+0x2a>
 80075ee:	2304      	movs	r3, #4
 80075f0:	e038      	b.n	8007664 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3338      	adds	r3, #56	@ 0x38
 80075f6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe f9bc 	bl	8005978 <ld_word>
 8007600:	4603      	mov	r3, r0
 8007602:	461a      	mov	r2, r3
 8007604:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007608:	429a      	cmp	r2, r3
 800760a:	d001      	beq.n	8007610 <check_fs+0x48>
 800760c:	2303      	movs	r3, #3
 800760e:	e029      	b.n	8007664 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007616:	2be9      	cmp	r3, #233	@ 0xe9
 8007618:	d009      	beq.n	800762e <check_fs+0x66>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007620:	2beb      	cmp	r3, #235	@ 0xeb
 8007622:	d11e      	bne.n	8007662 <check_fs+0x9a>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800762a:	2b90      	cmp	r3, #144	@ 0x90
 800762c:	d119      	bne.n	8007662 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	3338      	adds	r3, #56	@ 0x38
 8007632:	3336      	adds	r3, #54	@ 0x36
 8007634:	4618      	mov	r0, r3
 8007636:	f7fe f9b8 	bl	80059aa <ld_dword>
 800763a:	4603      	mov	r3, r0
 800763c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007640:	4a0a      	ldr	r2, [pc, #40]	@ (800766c <check_fs+0xa4>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d101      	bne.n	800764a <check_fs+0x82>
 8007646:	2300      	movs	r3, #0
 8007648:	e00c      	b.n	8007664 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3338      	adds	r3, #56	@ 0x38
 800764e:	3352      	adds	r3, #82	@ 0x52
 8007650:	4618      	mov	r0, r3
 8007652:	f7fe f9aa 	bl	80059aa <ld_dword>
 8007656:	4603      	mov	r3, r0
 8007658:	4a05      	ldr	r2, [pc, #20]	@ (8007670 <check_fs+0xa8>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d101      	bne.n	8007662 <check_fs+0x9a>
 800765e:	2300      	movs	r3, #0
 8007660:	e000      	b.n	8007664 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007662:	2302      	movs	r3, #2
}
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	00544146 	.word	0x00544146
 8007670:	33544146 	.word	0x33544146

08007674 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b096      	sub	sp, #88	@ 0x58
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	4613      	mov	r3, r2
 8007680:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2200      	movs	r2, #0
 8007686:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f7ff ff59 	bl	8007540 <get_ldnumber>
 800768e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007692:	2b00      	cmp	r3, #0
 8007694:	da01      	bge.n	800769a <find_volume+0x26>
 8007696:	230b      	movs	r3, #11
 8007698:	e265      	b.n	8007b66 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800769a:	4a9f      	ldr	r2, [pc, #636]	@ (8007918 <find_volume+0x2a4>)
 800769c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800769e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076a2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80076a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <find_volume+0x3a>
 80076aa:	230c      	movs	r3, #12
 80076ac:	e25b      	b.n	8007b66 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076b2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80076b4:	79fb      	ldrb	r3, [r7, #7]
 80076b6:	f023 0301 	bic.w	r3, r3, #1
 80076ba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80076bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d01a      	beq.n	80076fa <find_volume+0x86>
		stat = disk_status(fs->drv);
 80076c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c6:	785b      	ldrb	r3, [r3, #1]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fe f8b5 	bl	8005838 <disk_status>
 80076ce:	4603      	mov	r3, r0
 80076d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80076d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10c      	bne.n	80076fa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80076e0:	79fb      	ldrb	r3, [r7, #7]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d007      	beq.n	80076f6 <find_volume+0x82>
 80076e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80076ea:	f003 0304 	and.w	r3, r3, #4
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80076f2:	230a      	movs	r3, #10
 80076f4:	e237      	b.n	8007b66 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80076f6:	2300      	movs	r3, #0
 80076f8:	e235      	b.n	8007b66 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80076fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fc:	2200      	movs	r2, #0
 80076fe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007702:	b2da      	uxtb	r2, r3
 8007704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007706:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770a:	785b      	ldrb	r3, [r3, #1]
 800770c:	4618      	mov	r0, r3
 800770e:	f7fe f8ad 	bl	800586c <disk_initialize>
 8007712:	4603      	mov	r3, r0
 8007714:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007718:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007724:	2303      	movs	r3, #3
 8007726:	e21e      	b.n	8007b66 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007728:	79fb      	ldrb	r3, [r7, #7]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d007      	beq.n	800773e <find_volume+0xca>
 800772e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007732:	f003 0304 	and.w	r3, r3, #4
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800773a:	230a      	movs	r3, #10
 800773c:	e213      	b.n	8007b66 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800773e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007740:	7858      	ldrb	r0, [r3, #1]
 8007742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007744:	330c      	adds	r3, #12
 8007746:	461a      	mov	r2, r3
 8007748:	2102      	movs	r1, #2
 800774a:	f7fe f8f7 	bl	800593c <disk_ioctl>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <find_volume+0xe4>
 8007754:	2301      	movs	r3, #1
 8007756:	e206      	b.n	8007b66 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775a:	899b      	ldrh	r3, [r3, #12]
 800775c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007760:	d80d      	bhi.n	800777e <find_volume+0x10a>
 8007762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007764:	899b      	ldrh	r3, [r3, #12]
 8007766:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800776a:	d308      	bcc.n	800777e <find_volume+0x10a>
 800776c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776e:	899b      	ldrh	r3, [r3, #12]
 8007770:	461a      	mov	r2, r3
 8007772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007774:	899b      	ldrh	r3, [r3, #12]
 8007776:	3b01      	subs	r3, #1
 8007778:	4013      	ands	r3, r2
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <find_volume+0x10e>
 800777e:	2301      	movs	r3, #1
 8007780:	e1f1      	b.n	8007b66 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007786:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007788:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800778a:	f7ff ff1d 	bl	80075c8 <check_fs>
 800778e:	4603      	mov	r3, r0
 8007790:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007794:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007798:	2b02      	cmp	r3, #2
 800779a:	d149      	bne.n	8007830 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800779c:	2300      	movs	r3, #0
 800779e:	643b      	str	r3, [r7, #64]	@ 0x40
 80077a0:	e01e      	b.n	80077e0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80077a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80077a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077aa:	011b      	lsls	r3, r3, #4
 80077ac:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80077b0:	4413      	add	r3, r2
 80077b2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80077b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b6:	3304      	adds	r3, #4
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d006      	beq.n	80077cc <find_volume+0x158>
 80077be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c0:	3308      	adds	r3, #8
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe f8f1 	bl	80059aa <ld_dword>
 80077c8:	4602      	mov	r2, r0
 80077ca:	e000      	b.n	80077ce <find_volume+0x15a>
 80077cc:	2200      	movs	r2, #0
 80077ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	3358      	adds	r3, #88	@ 0x58
 80077d4:	443b      	add	r3, r7
 80077d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80077da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077dc:	3301      	adds	r3, #1
 80077de:	643b      	str	r3, [r7, #64]	@ 0x40
 80077e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d9dd      	bls.n	80077a2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80077e6:	2300      	movs	r3, #0
 80077e8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80077ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <find_volume+0x182>
 80077f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077f2:	3b01      	subs	r3, #1
 80077f4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80077f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	3358      	adds	r3, #88	@ 0x58
 80077fc:	443b      	add	r3, r7
 80077fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007802:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007806:	2b00      	cmp	r3, #0
 8007808:	d005      	beq.n	8007816 <find_volume+0x1a2>
 800780a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800780c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800780e:	f7ff fedb 	bl	80075c8 <check_fs>
 8007812:	4603      	mov	r3, r0
 8007814:	e000      	b.n	8007818 <find_volume+0x1a4>
 8007816:	2303      	movs	r3, #3
 8007818:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800781c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007820:	2b01      	cmp	r3, #1
 8007822:	d905      	bls.n	8007830 <find_volume+0x1bc>
 8007824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007826:	3301      	adds	r3, #1
 8007828:	643b      	str	r3, [r7, #64]	@ 0x40
 800782a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800782c:	2b03      	cmp	r3, #3
 800782e:	d9e2      	bls.n	80077f6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007830:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007834:	2b04      	cmp	r3, #4
 8007836:	d101      	bne.n	800783c <find_volume+0x1c8>
 8007838:	2301      	movs	r3, #1
 800783a:	e194      	b.n	8007b66 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800783c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007840:	2b01      	cmp	r3, #1
 8007842:	d901      	bls.n	8007848 <find_volume+0x1d4>
 8007844:	230d      	movs	r3, #13
 8007846:	e18e      	b.n	8007b66 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784a:	3338      	adds	r3, #56	@ 0x38
 800784c:	330b      	adds	r3, #11
 800784e:	4618      	mov	r0, r3
 8007850:	f7fe f892 	bl	8005978 <ld_word>
 8007854:	4603      	mov	r3, r0
 8007856:	461a      	mov	r2, r3
 8007858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785a:	899b      	ldrh	r3, [r3, #12]
 800785c:	429a      	cmp	r2, r3
 800785e:	d001      	beq.n	8007864 <find_volume+0x1f0>
 8007860:	230d      	movs	r3, #13
 8007862:	e180      	b.n	8007b66 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007866:	3338      	adds	r3, #56	@ 0x38
 8007868:	3316      	adds	r3, #22
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe f884 	bl	8005978 <ld_word>
 8007870:	4603      	mov	r3, r0
 8007872:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007876:	2b00      	cmp	r3, #0
 8007878:	d106      	bne.n	8007888 <find_volume+0x214>
 800787a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787c:	3338      	adds	r3, #56	@ 0x38
 800787e:	3324      	adds	r3, #36	@ 0x24
 8007880:	4618      	mov	r0, r3
 8007882:	f7fe f892 	bl	80059aa <ld_dword>
 8007886:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800788c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800788e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007890:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8007894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007896:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800789a:	789b      	ldrb	r3, [r3, #2]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d005      	beq.n	80078ac <find_volume+0x238>
 80078a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a2:	789b      	ldrb	r3, [r3, #2]
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d001      	beq.n	80078ac <find_volume+0x238>
 80078a8:	230d      	movs	r3, #13
 80078aa:	e15c      	b.n	8007b66 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80078ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ae:	789b      	ldrb	r3, [r3, #2]
 80078b0:	461a      	mov	r2, r3
 80078b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078b4:	fb02 f303 	mul.w	r3, r2, r3
 80078b8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80078ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078c0:	461a      	mov	r2, r3
 80078c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80078c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c8:	895b      	ldrh	r3, [r3, #10]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d008      	beq.n	80078e0 <find_volume+0x26c>
 80078ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d0:	895b      	ldrh	r3, [r3, #10]
 80078d2:	461a      	mov	r2, r3
 80078d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d6:	895b      	ldrh	r3, [r3, #10]
 80078d8:	3b01      	subs	r3, #1
 80078da:	4013      	ands	r3, r2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <find_volume+0x270>
 80078e0:	230d      	movs	r3, #13
 80078e2:	e140      	b.n	8007b66 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80078e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e6:	3338      	adds	r3, #56	@ 0x38
 80078e8:	3311      	adds	r3, #17
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fe f844 	bl	8005978 <ld_word>
 80078f0:	4603      	mov	r3, r0
 80078f2:	461a      	mov	r2, r3
 80078f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80078f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fa:	891b      	ldrh	r3, [r3, #8]
 80078fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078fe:	8992      	ldrh	r2, [r2, #12]
 8007900:	0952      	lsrs	r2, r2, #5
 8007902:	b292      	uxth	r2, r2
 8007904:	fbb3 f1f2 	udiv	r1, r3, r2
 8007908:	fb01 f202 	mul.w	r2, r1, r2
 800790c:	1a9b      	subs	r3, r3, r2
 800790e:	b29b      	uxth	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <find_volume+0x2a8>
 8007914:	230d      	movs	r3, #13
 8007916:	e126      	b.n	8007b66 <find_volume+0x4f2>
 8007918:	200026b0 	.word	0x200026b0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800791c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791e:	3338      	adds	r3, #56	@ 0x38
 8007920:	3313      	adds	r3, #19
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe f828 	bl	8005978 <ld_word>
 8007928:	4603      	mov	r3, r0
 800792a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800792c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800792e:	2b00      	cmp	r3, #0
 8007930:	d106      	bne.n	8007940 <find_volume+0x2cc>
 8007932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007934:	3338      	adds	r3, #56	@ 0x38
 8007936:	3320      	adds	r3, #32
 8007938:	4618      	mov	r0, r3
 800793a:	f7fe f836 	bl	80059aa <ld_dword>
 800793e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007942:	3338      	adds	r3, #56	@ 0x38
 8007944:	330e      	adds	r3, #14
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe f816 	bl	8005978 <ld_word>
 800794c:	4603      	mov	r3, r0
 800794e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007950:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <find_volume+0x2e6>
 8007956:	230d      	movs	r3, #13
 8007958:	e105      	b.n	8007b66 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800795a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800795c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800795e:	4413      	add	r3, r2
 8007960:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007962:	8911      	ldrh	r1, [r2, #8]
 8007964:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007966:	8992      	ldrh	r2, [r2, #12]
 8007968:	0952      	lsrs	r2, r2, #5
 800796a:	b292      	uxth	r2, r2
 800796c:	fbb1 f2f2 	udiv	r2, r1, r2
 8007970:	b292      	uxth	r2, r2
 8007972:	4413      	add	r3, r2
 8007974:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007976:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797a:	429a      	cmp	r2, r3
 800797c:	d201      	bcs.n	8007982 <find_volume+0x30e>
 800797e:	230d      	movs	r3, #13
 8007980:	e0f1      	b.n	8007b66 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007982:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800798a:	8952      	ldrh	r2, [r2, #10]
 800798c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007990:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <find_volume+0x328>
 8007998:	230d      	movs	r3, #13
 800799a:	e0e4      	b.n	8007b66 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800799c:	2303      	movs	r3, #3
 800799e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80079a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d802      	bhi.n	80079b2 <find_volume+0x33e>
 80079ac:	2302      	movs	r3, #2
 80079ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80079b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d802      	bhi.n	80079c2 <find_volume+0x34e>
 80079bc:	2301      	movs	r3, #1
 80079be:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80079c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c4:	1c9a      	adds	r2, r3, #2
 80079c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80079ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80079ce:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80079d0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80079d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079d4:	441a      	add	r2, r3
 80079d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d8:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80079da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80079dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079de:	441a      	add	r2, r3
 80079e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e2:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80079e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80079e8:	2b03      	cmp	r3, #3
 80079ea:	d11e      	bne.n	8007a2a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80079ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ee:	3338      	adds	r3, #56	@ 0x38
 80079f0:	332a      	adds	r3, #42	@ 0x2a
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fd ffc0 	bl	8005978 <ld_word>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <find_volume+0x38e>
 80079fe:	230d      	movs	r3, #13
 8007a00:	e0b1      	b.n	8007b66 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a04:	891b      	ldrh	r3, [r3, #8]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <find_volume+0x39a>
 8007a0a:	230d      	movs	r3, #13
 8007a0c:	e0ab      	b.n	8007b66 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a10:	3338      	adds	r3, #56	@ 0x38
 8007a12:	332c      	adds	r3, #44	@ 0x2c
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fd ffc8 	bl	80059aa <ld_dword>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a22:	69db      	ldr	r3, [r3, #28]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a28:	e01f      	b.n	8007a6a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2c:	891b      	ldrh	r3, [r3, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <find_volume+0x3c2>
 8007a32:	230d      	movs	r3, #13
 8007a34:	e097      	b.n	8007b66 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a3c:	441a      	add	r2, r3
 8007a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a40:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007a42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d103      	bne.n	8007a52 <find_volume+0x3de>
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	e00a      	b.n	8007a68 <find_volume+0x3f4>
 8007a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a54:	69da      	ldr	r2, [r3, #28]
 8007a56:	4613      	mov	r3, r2
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	4413      	add	r3, r2
 8007a5c:	085a      	lsrs	r2, r3, #1
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007a68:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6c:	6a1a      	ldr	r2, [r3, #32]
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a70:	899b      	ldrh	r3, [r3, #12]
 8007a72:	4619      	mov	r1, r3
 8007a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a76:	440b      	add	r3, r1
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a7c:	8989      	ldrh	r1, [r1, #12]
 8007a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d201      	bcs.n	8007a8a <find_volume+0x416>
 8007a86:	230d      	movs	r3, #13
 8007a88:	e06d      	b.n	8007b66 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a90:	619a      	str	r2, [r3, #24]
 8007a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a94:	699a      	ldr	r2, [r3, #24]
 8007a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a98:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a9c:	2280      	movs	r2, #128	@ 0x80
 8007a9e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007aa0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007aa4:	2b03      	cmp	r3, #3
 8007aa6:	d149      	bne.n	8007b3c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aaa:	3338      	adds	r3, #56	@ 0x38
 8007aac:	3330      	adds	r3, #48	@ 0x30
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fd ff62 	bl	8005978 <ld_word>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d140      	bne.n	8007b3c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007aba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007abc:	3301      	adds	r3, #1
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007ac2:	f7fe fa0b 	bl	8005edc <move_window>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d137      	bne.n	8007b3c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ace:	2200      	movs	r2, #0
 8007ad0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad4:	3338      	adds	r3, #56	@ 0x38
 8007ad6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fd ff4c 	bl	8005978 <ld_word>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d127      	bne.n	8007b3c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aee:	3338      	adds	r3, #56	@ 0x38
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7fd ff5a 	bl	80059aa <ld_dword>
 8007af6:	4603      	mov	r3, r0
 8007af8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b70 <find_volume+0x4fc>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d11e      	bne.n	8007b3c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b00:	3338      	adds	r3, #56	@ 0x38
 8007b02:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fd ff4f 	bl	80059aa <ld_dword>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	4a19      	ldr	r2, [pc, #100]	@ (8007b74 <find_volume+0x500>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d113      	bne.n	8007b3c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b16:	3338      	adds	r3, #56	@ 0x38
 8007b18:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fd ff44 	bl	80059aa <ld_dword>
 8007b22:	4602      	mov	r2, r0
 8007b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b26:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2a:	3338      	adds	r3, #56	@ 0x38
 8007b2c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fd ff3a 	bl	80059aa <ld_dword>
 8007b36:	4602      	mov	r2, r0
 8007b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007b42:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007b44:	4b0c      	ldr	r3, [pc, #48]	@ (8007b78 <find_volume+0x504>)
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b78 <find_volume+0x504>)
 8007b4e:	801a      	strh	r2, [r3, #0]
 8007b50:	4b09      	ldr	r3, [pc, #36]	@ (8007b78 <find_volume+0x504>)
 8007b52:	881a      	ldrh	r2, [r3, #0]
 8007b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b56:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5a:	4a08      	ldr	r2, [pc, #32]	@ (8007b7c <find_volume+0x508>)
 8007b5c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007b5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007b60:	f7fe f954 	bl	8005e0c <clear_lock>
#endif
	return FR_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3758      	adds	r7, #88	@ 0x58
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	41615252 	.word	0x41615252
 8007b74:	61417272 	.word	0x61417272
 8007b78:	200026b4 	.word	0x200026b4
 8007b7c:	200026d8 	.word	0x200026d8

08007b80 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007b8a:	2309      	movs	r3, #9
 8007b8c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d01c      	beq.n	8007bce <validate+0x4e>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d018      	beq.n	8007bce <validate+0x4e>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d013      	beq.n	8007bce <validate+0x4e>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	889a      	ldrh	r2, [r3, #4]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	88db      	ldrh	r3, [r3, #6]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d10c      	bne.n	8007bce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	785b      	ldrb	r3, [r3, #1]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fd fe3c 	bl	8005838 <disk_status>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <validate+0x4e>
			res = FR_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d102      	bne.n	8007bda <validate+0x5a>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	e000      	b.n	8007bdc <validate+0x5c>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	6013      	str	r3, [r2, #0]
	return res;
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
	...

08007bec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007bfe:	f107 0310 	add.w	r3, r7, #16
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7ff fc9c 	bl	8007540 <get_ldnumber>
 8007c08:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	da01      	bge.n	8007c14 <f_mount+0x28>
 8007c10:	230b      	movs	r3, #11
 8007c12:	e02b      	b.n	8007c6c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007c14:	4a17      	ldr	r2, [pc, #92]	@ (8007c74 <f_mount+0x88>)
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c1c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d005      	beq.n	8007c30 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007c24:	69b8      	ldr	r0, [r7, #24]
 8007c26:	f7fe f8f1 	bl	8005e0c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	490d      	ldr	r1, [pc, #52]	@ (8007c74 <f_mount+0x88>)
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <f_mount+0x66>
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d001      	beq.n	8007c56 <f_mount+0x6a>
 8007c52:	2300      	movs	r3, #0
 8007c54:	e00a      	b.n	8007c6c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007c56:	f107 010c 	add.w	r1, r7, #12
 8007c5a:	f107 0308 	add.w	r3, r7, #8
 8007c5e:	2200      	movs	r2, #0
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7ff fd07 	bl	8007674 <find_volume>
 8007c66:	4603      	mov	r3, r0
 8007c68:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3720      	adds	r7, #32
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	200026b0 	.word	0x200026b0

08007c78 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b09a      	sub	sp, #104	@ 0x68
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	4613      	mov	r3, r2
 8007c84:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <f_open+0x18>
 8007c8c:	2309      	movs	r3, #9
 8007c8e:	e1b7      	b.n	8008000 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007c90:	79fb      	ldrb	r3, [r7, #7]
 8007c92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c96:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007c98:	79fa      	ldrb	r2, [r7, #7]
 8007c9a:	f107 0114 	add.w	r1, r7, #20
 8007c9e:	f107 0308 	add.w	r3, r7, #8
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff fce6 	bl	8007674 <find_volume>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8007cae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f040 819b 	bne.w	8007fee <f_open+0x376>
		dj.obj.fs = fs;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	f107 0318 	add.w	r3, r7, #24
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7ff fbc5 	bl	8007454 <follow_path>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007cd0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d118      	bne.n	8007d0a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007cd8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007cdc:	b25b      	sxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	da03      	bge.n	8007cea <f_open+0x72>
				res = FR_INVALID_NAME;
 8007ce2:	2306      	movs	r3, #6
 8007ce4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007ce8:	e00f      	b.n	8007d0a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	bf8c      	ite	hi
 8007cf0:	2301      	movhi	r3, #1
 8007cf2:	2300      	movls	r3, #0
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f107 0318 	add.w	r3, r7, #24
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fd ff3c 	bl	8005b7c <chk_lock>
 8007d04:	4603      	mov	r3, r0
 8007d06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007d0a:	79fb      	ldrb	r3, [r7, #7]
 8007d0c:	f003 031c 	and.w	r3, r3, #28
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d07f      	beq.n	8007e14 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007d14:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d017      	beq.n	8007d4c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007d1c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d10e      	bne.n	8007d42 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007d24:	f7fd ff86 	bl	8005c34 <enq_lock>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d006      	beq.n	8007d3c <f_open+0xc4>
 8007d2e:	f107 0318 	add.w	r3, r7, #24
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff f8de 	bl	8006ef4 <dir_register>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	e000      	b.n	8007d3e <f_open+0xc6>
 8007d3c:	2312      	movs	r3, #18
 8007d3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007d42:	79fb      	ldrb	r3, [r7, #7]
 8007d44:	f043 0308 	orr.w	r3, r3, #8
 8007d48:	71fb      	strb	r3, [r7, #7]
 8007d4a:	e010      	b.n	8007d6e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007d4c:	7fbb      	ldrb	r3, [r7, #30]
 8007d4e:	f003 0311 	and.w	r3, r3, #17
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <f_open+0xe6>
					res = FR_DENIED;
 8007d56:	2307      	movs	r3, #7
 8007d58:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007d5c:	e007      	b.n	8007d6e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	f003 0304 	and.w	r3, r3, #4
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <f_open+0xf6>
 8007d68:	2308      	movs	r3, #8
 8007d6a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007d6e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d168      	bne.n	8007e48 <f_open+0x1d0>
 8007d76:	79fb      	ldrb	r3, [r7, #7]
 8007d78:	f003 0308 	and.w	r3, r3, #8
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d063      	beq.n	8007e48 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007d80:	f7fd fbee 	bl	8005560 <get_fattime>
 8007d84:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d88:	330e      	adds	r3, #14
 8007d8a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fd fe4a 	bl	8005a26 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d94:	3316      	adds	r3, #22
 8007d96:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fd fe44 	bl	8005a26 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da0:	330b      	adds	r3, #11
 8007da2:	2220      	movs	r2, #32
 8007da4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007daa:	4611      	mov	r1, r2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fe fe1a 	bl	80069e6 <ld_clust>
 8007db2:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007db8:	2200      	movs	r2, #0
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fe fe32 	bl	8006a24 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc2:	331c      	adds	r3, #28
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fd fe2d 	bl	8005a26 <st_dword>
					fs->wflag = 1;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d037      	beq.n	8007e48 <f_open+0x1d0>
						dw = fs->winsect;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ddc:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007dde:	f107 0318 	add.w	r3, r7, #24
 8007de2:	2200      	movs	r2, #0
 8007de4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fe fb22 	bl	8006430 <remove_chain>
 8007dec:	4603      	mov	r3, r0
 8007dee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8007df2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d126      	bne.n	8007e48 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fe f86c 	bl	8005edc <move_window>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e0e:	3a01      	subs	r2, #1
 8007e10:	615a      	str	r2, [r3, #20]
 8007e12:	e019      	b.n	8007e48 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007e14:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d115      	bne.n	8007e48 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007e1c:	7fbb      	ldrb	r3, [r7, #30]
 8007e1e:	f003 0310 	and.w	r3, r3, #16
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <f_open+0x1b6>
					res = FR_NO_FILE;
 8007e26:	2304      	movs	r3, #4
 8007e28:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007e2c:	e00c      	b.n	8007e48 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d007      	beq.n	8007e48 <f_open+0x1d0>
 8007e38:	7fbb      	ldrb	r3, [r7, #30]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d002      	beq.n	8007e48 <f_open+0x1d0>
						res = FR_DENIED;
 8007e42:	2307      	movs	r3, #7
 8007e44:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007e48:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d126      	bne.n	8007e9e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007e50:	79fb      	ldrb	r3, [r7, #7]
 8007e52:	f003 0308 	and.w	r3, r3, #8
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007e5a:	79fb      	ldrb	r3, [r7, #7]
 8007e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e60:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007e6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	bf8c      	ite	hi
 8007e76:	2301      	movhi	r3, #1
 8007e78:	2300      	movls	r3, #0
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	f107 0318 	add.w	r3, r7, #24
 8007e82:	4611      	mov	r1, r2
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7fd fef7 	bl	8005c78 <inc_lock>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d102      	bne.n	8007e9e <f_open+0x226>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007e9e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f040 80a3 	bne.w	8007fee <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007eac:	4611      	mov	r1, r2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe fd99 	bl	80069e6 <ld_clust>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ebc:	331c      	adds	r3, #28
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fd fd73 	bl	80059aa <ld_dword>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	88da      	ldrh	r2, [r3, #6]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	79fa      	ldrb	r2, [r7, #7]
 8007ee2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	3330      	adds	r3, #48	@ 0x30
 8007efa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007efe:	2100      	movs	r1, #0
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fd fddd 	bl	8005ac0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007f06:	79fb      	ldrb	r3, [r7, #7]
 8007f08:	f003 0320 	and.w	r3, r3, #32
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d06e      	beq.n	8007fee <f_open+0x376>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d06a      	beq.n	8007fee <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	895b      	ldrh	r3, [r3, #10]
 8007f24:	461a      	mov	r2, r3
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	899b      	ldrh	r3, [r3, #12]
 8007f2a:	fb02 f303 	mul.w	r3, r2, r3
 8007f2e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f3c:	e016      	b.n	8007f6c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe f887 	bl	8006056 <get_fat>
 8007f48:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007f4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d802      	bhi.n	8007f56 <f_open+0x2de>
 8007f50:	2302      	movs	r3, #2
 8007f52:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007f56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f5c:	d102      	bne.n	8007f64 <f_open+0x2ec>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007f64:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007f66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f6c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d103      	bne.n	8007f7c <f_open+0x304>
 8007f74:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d8e0      	bhi.n	8007f3e <f_open+0x2c6>
				}
				fp->clust = clst;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f80:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007f82:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d131      	bne.n	8007fee <f_open+0x376>
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	899b      	ldrh	r3, [r3, #12]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f92:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f96:	fb01 f202 	mul.w	r2, r1, r2
 8007f9a:	1a9b      	subs	r3, r3, r2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d026      	beq.n	8007fee <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fe f837 	bl	8006018 <clust2sect>
 8007faa:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007fac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d103      	bne.n	8007fba <f_open+0x342>
						res = FR_INT_ERR;
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007fb8:	e019      	b.n	8007fee <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	899b      	ldrh	r3, [r3, #12]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007fc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fc8:	441a      	add	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	7858      	ldrb	r0, [r3, #1]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6a1a      	ldr	r2, [r3, #32]
 8007fdc:	2301      	movs	r3, #1
 8007fde:	f7fd fc6d 	bl	80058bc <disk_read>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <f_open+0x376>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007fee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d002      	beq.n	8007ffc <f_open+0x384>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007ffc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008000:	4618      	mov	r0, r3
 8008002:	3768      	adds	r7, #104	@ 0x68
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b08e      	sub	sp, #56	@ 0x38
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
 8008014:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2200      	movs	r2, #0
 800801e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f107 0214 	add.w	r2, r7, #20
 8008026:	4611      	mov	r1, r2
 8008028:	4618      	mov	r0, r3
 800802a:	f7ff fda9 	bl	8007b80 <validate>
 800802e:	4603      	mov	r3, r0
 8008030:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008034:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008038:	2b00      	cmp	r3, #0
 800803a:	d107      	bne.n	800804c <f_read+0x44>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	7d5b      	ldrb	r3, [r3, #21]
 8008040:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008044:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <f_read+0x4a>
 800804c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008050:	e135      	b.n	80082be <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	7d1b      	ldrb	r3, [r3, #20]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <f_read+0x5a>
 800805e:	2307      	movs	r3, #7
 8008060:	e12d      	b.n	80082be <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	6a3b      	ldr	r3, [r7, #32]
 8008072:	429a      	cmp	r2, r3
 8008074:	f240 811e 	bls.w	80082b4 <f_read+0x2ac>
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800807c:	e11a      	b.n	80082b4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	8992      	ldrh	r2, [r2, #12]
 8008086:	fbb3 f1f2 	udiv	r1, r3, r2
 800808a:	fb01 f202 	mul.w	r2, r1, r2
 800808e:	1a9b      	subs	r3, r3, r2
 8008090:	2b00      	cmp	r3, #0
 8008092:	f040 80d5 	bne.w	8008240 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	8992      	ldrh	r2, [r2, #12]
 800809e:	fbb3 f3f2 	udiv	r3, r3, r2
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	8952      	ldrh	r2, [r2, #10]
 80080a6:	3a01      	subs	r2, #1
 80080a8:	4013      	ands	r3, r2
 80080aa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d12f      	bne.n	8008112 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d103      	bne.n	80080c2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	633b      	str	r3, [r7, #48]	@ 0x30
 80080c0:	e013      	b.n	80080ea <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d007      	beq.n	80080da <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	4619      	mov	r1, r3
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f7fe faaa 	bl	800662a <clmt_clust>
 80080d6:	6338      	str	r0, [r7, #48]	@ 0x30
 80080d8:	e007      	b.n	80080ea <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	4619      	mov	r1, r3
 80080e2:	4610      	mov	r0, r2
 80080e4:	f7fd ffb7 	bl	8006056 <get_fat>
 80080e8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80080ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d804      	bhi.n	80080fa <f_read+0xf2>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2202      	movs	r2, #2
 80080f4:	755a      	strb	r2, [r3, #21]
 80080f6:	2302      	movs	r3, #2
 80080f8:	e0e1      	b.n	80082be <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008100:	d104      	bne.n	800810c <f_read+0x104>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2201      	movs	r2, #1
 8008106:	755a      	strb	r2, [r3, #21]
 8008108:	2301      	movs	r3, #1
 800810a:	e0d8      	b.n	80082be <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008110:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	4619      	mov	r1, r3
 800811a:	4610      	mov	r0, r2
 800811c:	f7fd ff7c 	bl	8006018 <clust2sect>
 8008120:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d104      	bne.n	8008132 <f_read+0x12a>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2202      	movs	r2, #2
 800812c:	755a      	strb	r2, [r3, #21]
 800812e:	2302      	movs	r3, #2
 8008130:	e0c5      	b.n	80082be <f_read+0x2b6>
			sect += csect;
 8008132:	69ba      	ldr	r2, [r7, #24]
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	4413      	add	r3, r2
 8008138:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	899b      	ldrh	r3, [r3, #12]
 800813e:	461a      	mov	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	fbb3 f3f2 	udiv	r3, r3, r2
 8008146:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814a:	2b00      	cmp	r3, #0
 800814c:	d041      	beq.n	80081d2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800814e:	69fa      	ldr	r2, [r7, #28]
 8008150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008152:	4413      	add	r3, r2
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	8952      	ldrh	r2, [r2, #10]
 8008158:	4293      	cmp	r3, r2
 800815a:	d905      	bls.n	8008168 <f_read+0x160>
					cc = fs->csize - csect;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	895b      	ldrh	r3, [r3, #10]
 8008160:	461a      	mov	r2, r3
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	7858      	ldrb	r0, [r3, #1]
 800816c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008172:	f7fd fba3 	bl	80058bc <disk_read>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d004      	beq.n	8008186 <f_read+0x17e>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2201      	movs	r2, #1
 8008180:	755a      	strb	r2, [r3, #21]
 8008182:	2301      	movs	r3, #1
 8008184:	e09b      	b.n	80082be <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	7d1b      	ldrb	r3, [r3, #20]
 800818a:	b25b      	sxtb	r3, r3
 800818c:	2b00      	cmp	r3, #0
 800818e:	da18      	bge.n	80081c2 <f_read+0x1ba>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6a1a      	ldr	r2, [r3, #32]
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800819a:	429a      	cmp	r2, r3
 800819c:	d911      	bls.n	80081c2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a1a      	ldr	r2, [r3, #32]
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	8992      	ldrh	r2, [r2, #12]
 80081aa:	fb02 f303 	mul.w	r3, r2, r3
 80081ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081b0:	18d0      	adds	r0, r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	899b      	ldrh	r3, [r3, #12]
 80081bc:	461a      	mov	r2, r3
 80081be:	f7fd fc5e 	bl	8005a7e <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	899b      	ldrh	r3, [r3, #12]
 80081c6:	461a      	mov	r2, r3
 80081c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ca:	fb02 f303 	mul.w	r3, r2, r3
 80081ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80081d0:	e05c      	b.n	800828c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	69ba      	ldr	r2, [r7, #24]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d02e      	beq.n	800823a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	7d1b      	ldrb	r3, [r3, #20]
 80081e0:	b25b      	sxtb	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	da18      	bge.n	8008218 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	7858      	ldrb	r0, [r3, #1]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a1a      	ldr	r2, [r3, #32]
 80081f4:	2301      	movs	r3, #1
 80081f6:	f7fd fb81 	bl	80058fc <disk_write>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d004      	beq.n	800820a <f_read+0x202>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2201      	movs	r2, #1
 8008204:	755a      	strb	r2, [r3, #21]
 8008206:	2301      	movs	r3, #1
 8008208:	e059      	b.n	80082be <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	7d1b      	ldrb	r3, [r3, #20]
 800820e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008212:	b2da      	uxtb	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	7858      	ldrb	r0, [r3, #1]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008222:	2301      	movs	r3, #1
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	f7fd fb49 	bl	80058bc <disk_read>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <f_read+0x232>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2201      	movs	r2, #1
 8008234:	755a      	strb	r2, [r3, #21]
 8008236:	2301      	movs	r3, #1
 8008238:	e041      	b.n	80082be <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	69ba      	ldr	r2, [r7, #24]
 800823e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	899b      	ldrh	r3, [r3, #12]
 8008244:	4618      	mov	r0, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	8992      	ldrh	r2, [r2, #12]
 800824e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008252:	fb01 f202 	mul.w	r2, r1, r2
 8008256:	1a9b      	subs	r3, r3, r2
 8008258:	1ac3      	subs	r3, r0, r3
 800825a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800825c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	429a      	cmp	r2, r3
 8008262:	d901      	bls.n	8008268 <f_read+0x260>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	8992      	ldrh	r2, [r2, #12]
 8008276:	fbb3 f0f2 	udiv	r0, r3, r2
 800827a:	fb00 f202 	mul.w	r2, r0, r2
 800827e:	1a9b      	subs	r3, r3, r2
 8008280:	440b      	add	r3, r1
 8008282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008284:	4619      	mov	r1, r3
 8008286:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008288:	f7fd fbf9 	bl	8005a7e <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800828c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800828e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008290:	4413      	add	r3, r2
 8008292:	627b      	str	r3, [r7, #36]	@ 0x24
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	699a      	ldr	r2, [r3, #24]
 8008298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800829a:	441a      	add	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	619a      	str	r2, [r3, #24]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a6:	441a      	add	r2, r3
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f47f aee1 	bne.w	800807e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3738      	adds	r7, #56	@ 0x38
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b08c      	sub	sp, #48	@ 0x30
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	60f8      	str	r0, [r7, #12]
 80082ce:	60b9      	str	r1, [r7, #8]
 80082d0:	607a      	str	r2, [r7, #4]
 80082d2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2200      	movs	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f107 0210 	add.w	r2, r7, #16
 80082e4:	4611      	mov	r1, r2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7ff fc4a 	bl	8007b80 <validate>
 80082ec:	4603      	mov	r3, r0
 80082ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80082f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d107      	bne.n	800830a <f_write+0x44>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	7d5b      	ldrb	r3, [r3, #21]
 80082fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008302:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008306:	2b00      	cmp	r3, #0
 8008308:	d002      	beq.n	8008310 <f_write+0x4a>
 800830a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800830e:	e16a      	b.n	80085e6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	7d1b      	ldrb	r3, [r3, #20]
 8008314:	f003 0302 	and.w	r3, r3, #2
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <f_write+0x5a>
 800831c:	2307      	movs	r3, #7
 800831e:	e162      	b.n	80085e6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	699a      	ldr	r2, [r3, #24]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	441a      	add	r2, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	429a      	cmp	r2, r3
 800832e:	f080 814c 	bcs.w	80085ca <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	43db      	mvns	r3, r3
 8008338:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800833a:	e146      	b.n	80085ca <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	8992      	ldrh	r2, [r2, #12]
 8008344:	fbb3 f1f2 	udiv	r1, r3, r2
 8008348:	fb01 f202 	mul.w	r2, r1, r2
 800834c:	1a9b      	subs	r3, r3, r2
 800834e:	2b00      	cmp	r3, #0
 8008350:	f040 80f1 	bne.w	8008536 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	8992      	ldrh	r2, [r2, #12]
 800835c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	8952      	ldrh	r2, [r2, #10]
 8008364:	3a01      	subs	r2, #1
 8008366:	4013      	ands	r3, r2
 8008368:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d143      	bne.n	80083f8 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10c      	bne.n	8008392 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800837e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008380:	2b00      	cmp	r3, #0
 8008382:	d11a      	bne.n	80083ba <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2100      	movs	r1, #0
 8008388:	4618      	mov	r0, r3
 800838a:	f7fe f8b6 	bl	80064fa <create_chain>
 800838e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008390:	e013      	b.n	80083ba <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008396:	2b00      	cmp	r3, #0
 8008398:	d007      	beq.n	80083aa <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	4619      	mov	r1, r3
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f7fe f942 	bl	800662a <clmt_clust>
 80083a6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80083a8:	e007      	b.n	80083ba <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	4619      	mov	r1, r3
 80083b2:	4610      	mov	r0, r2
 80083b4:	f7fe f8a1 	bl	80064fa <create_chain>
 80083b8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80083ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 8109 	beq.w	80085d4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80083c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d104      	bne.n	80083d2 <f_write+0x10c>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2202      	movs	r2, #2
 80083cc:	755a      	strb	r2, [r3, #21]
 80083ce:	2302      	movs	r3, #2
 80083d0:	e109      	b.n	80085e6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80083d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083d8:	d104      	bne.n	80083e4 <f_write+0x11e>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2201      	movs	r2, #1
 80083de:	755a      	strb	r2, [r3, #21]
 80083e0:	2301      	movs	r3, #1
 80083e2:	e100      	b.n	80085e6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083e8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d102      	bne.n	80083f8 <f_write+0x132>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083f6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	7d1b      	ldrb	r3, [r3, #20]
 80083fc:	b25b      	sxtb	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	da18      	bge.n	8008434 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	7858      	ldrb	r0, [r3, #1]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6a1a      	ldr	r2, [r3, #32]
 8008410:	2301      	movs	r3, #1
 8008412:	f7fd fa73 	bl	80058fc <disk_write>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d004      	beq.n	8008426 <f_write+0x160>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2201      	movs	r2, #1
 8008420:	755a      	strb	r2, [r3, #21]
 8008422:	2301      	movs	r3, #1
 8008424:	e0df      	b.n	80085e6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	7d1b      	ldrb	r3, [r3, #20]
 800842a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800842e:	b2da      	uxtb	r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	4619      	mov	r1, r3
 800843c:	4610      	mov	r0, r2
 800843e:	f7fd fdeb 	bl	8006018 <clust2sect>
 8008442:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d104      	bne.n	8008454 <f_write+0x18e>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2202      	movs	r2, #2
 800844e:	755a      	strb	r2, [r3, #21]
 8008450:	2302      	movs	r3, #2
 8008452:	e0c8      	b.n	80085e6 <f_write+0x320>
			sect += csect;
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	4413      	add	r3, r2
 800845a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	899b      	ldrh	r3, [r3, #12]
 8008460:	461a      	mov	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	fbb3 f3f2 	udiv	r3, r3, r2
 8008468:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d043      	beq.n	80084f8 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008470:	69ba      	ldr	r2, [r7, #24]
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	4413      	add	r3, r2
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	8952      	ldrh	r2, [r2, #10]
 800847a:	4293      	cmp	r3, r2
 800847c:	d905      	bls.n	800848a <f_write+0x1c4>
					cc = fs->csize - csect;
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	895b      	ldrh	r3, [r3, #10]
 8008482:	461a      	mov	r2, r3
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	7858      	ldrb	r0, [r3, #1]
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	69f9      	ldr	r1, [r7, #28]
 8008494:	f7fd fa32 	bl	80058fc <disk_write>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d004      	beq.n	80084a8 <f_write+0x1e2>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2201      	movs	r2, #1
 80084a2:	755a      	strb	r2, [r3, #21]
 80084a4:	2301      	movs	r3, #1
 80084a6:	e09e      	b.n	80085e6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6a1a      	ldr	r2, [r3, #32]
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	6a3a      	ldr	r2, [r7, #32]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d918      	bls.n	80084e8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6a1a      	ldr	r2, [r3, #32]
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	8992      	ldrh	r2, [r2, #12]
 80084c8:	fb02 f303 	mul.w	r3, r2, r3
 80084cc:	69fa      	ldr	r2, [r7, #28]
 80084ce:	18d1      	adds	r1, r2, r3
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	899b      	ldrh	r3, [r3, #12]
 80084d4:	461a      	mov	r2, r3
 80084d6:	f7fd fad2 	bl	8005a7e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	7d1b      	ldrb	r3, [r3, #20]
 80084de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	899b      	ldrh	r3, [r3, #12]
 80084ec:	461a      	mov	r2, r3
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	fb02 f303 	mul.w	r3, r2, r3
 80084f4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80084f6:	e04b      	b.n	8008590 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d016      	beq.n	8008530 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	699a      	ldr	r2, [r3, #24]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800850a:	429a      	cmp	r2, r3
 800850c:	d210      	bcs.n	8008530 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	7858      	ldrb	r0, [r3, #1]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008518:	2301      	movs	r3, #1
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	f7fd f9ce 	bl	80058bc <disk_read>
 8008520:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008522:	2b00      	cmp	r3, #0
 8008524:	d004      	beq.n	8008530 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2201      	movs	r2, #1
 800852a:	755a      	strb	r2, [r3, #21]
 800852c:	2301      	movs	r3, #1
 800852e:	e05a      	b.n	80085e6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	899b      	ldrh	r3, [r3, #12]
 800853a:	4618      	mov	r0, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	8992      	ldrh	r2, [r2, #12]
 8008544:	fbb3 f1f2 	udiv	r1, r3, r2
 8008548:	fb01 f202 	mul.w	r2, r1, r2
 800854c:	1a9b      	subs	r3, r3, r2
 800854e:	1ac3      	subs	r3, r0, r3
 8008550:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	429a      	cmp	r2, r3
 8008558:	d901      	bls.n	800855e <f_write+0x298>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	8992      	ldrh	r2, [r2, #12]
 800856c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008570:	fb00 f202 	mul.w	r2, r0, r2
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	440b      	add	r3, r1
 8008578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800857a:	69f9      	ldr	r1, [r7, #28]
 800857c:	4618      	mov	r0, r3
 800857e:	f7fd fa7e 	bl	8005a7e <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	7d1b      	ldrb	r3, [r3, #20]
 8008586:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800858a:	b2da      	uxtb	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008590:	69fa      	ldr	r2, [r7, #28]
 8008592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008594:	4413      	add	r3, r2
 8008596:	61fb      	str	r3, [r7, #28]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	699a      	ldr	r2, [r3, #24]
 800859c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859e:	441a      	add	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	619a      	str	r2, [r3, #24]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	68da      	ldr	r2, [r3, #12]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	bf38      	it	cc
 80085b0:	461a      	movcc	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	60da      	str	r2, [r3, #12]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085bc:	441a      	add	r2, r3
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	601a      	str	r2, [r3, #0]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f47f aeb5 	bne.w	800833c <f_write+0x76>
 80085d2:	e000      	b.n	80085d6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80085d4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	7d1b      	ldrb	r3, [r3, #20]
 80085da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3730      	adds	r7, #48	@ 0x30
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b086      	sub	sp, #24
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f107 0208 	add.w	r2, r7, #8
 80085fc:	4611      	mov	r1, r2
 80085fe:	4618      	mov	r0, r3
 8008600:	f7ff fabe 	bl	8007b80 <validate>
 8008604:	4603      	mov	r3, r0
 8008606:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008608:	7dfb      	ldrb	r3, [r7, #23]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d168      	bne.n	80086e0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	7d1b      	ldrb	r3, [r3, #20]
 8008612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008616:	2b00      	cmp	r3, #0
 8008618:	d062      	beq.n	80086e0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	7d1b      	ldrb	r3, [r3, #20]
 800861e:	b25b      	sxtb	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	da15      	bge.n	8008650 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	7858      	ldrb	r0, [r3, #1]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1a      	ldr	r2, [r3, #32]
 8008632:	2301      	movs	r3, #1
 8008634:	f7fd f962 	bl	80058fc <disk_write>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <f_sync+0x54>
 800863e:	2301      	movs	r3, #1
 8008640:	e04f      	b.n	80086e2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	7d1b      	ldrb	r3, [r3, #20]
 8008646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800864a:	b2da      	uxtb	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008650:	f7fc ff86 	bl	8005560 <get_fattime>
 8008654:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008656:	68ba      	ldr	r2, [r7, #8]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865c:	4619      	mov	r1, r3
 800865e:	4610      	mov	r0, r2
 8008660:	f7fd fc3c 	bl	8005edc <move_window>
 8008664:	4603      	mov	r3, r0
 8008666:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008668:	7dfb      	ldrb	r3, [r7, #23]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d138      	bne.n	80086e0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008672:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	330b      	adds	r3, #11
 8008678:	781a      	ldrb	r2, [r3, #0]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	330b      	adds	r3, #11
 800867e:	f042 0220 	orr.w	r2, r2, #32
 8008682:	b2d2      	uxtb	r2, r2
 8008684:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6818      	ldr	r0, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	461a      	mov	r2, r3
 8008690:	68f9      	ldr	r1, [r7, #12]
 8008692:	f7fe f9c7 	bl	8006a24 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f103 021c 	add.w	r2, r3, #28
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	4619      	mov	r1, r3
 80086a2:	4610      	mov	r0, r2
 80086a4:	f7fd f9bf 	bl	8005a26 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3316      	adds	r3, #22
 80086ac:	6939      	ldr	r1, [r7, #16]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fd f9b9 	bl	8005a26 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	3312      	adds	r3, #18
 80086b8:	2100      	movs	r1, #0
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fd f998 	bl	80059f0 <st_word>
					fs->wflag = 1;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2201      	movs	r2, #1
 80086c4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fd fc35 	bl	8005f38 <sync_fs>
 80086ce:	4603      	mov	r3, r0
 80086d0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	7d1b      	ldrb	r3, [r3, #20]
 80086d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7ff ff7b 	bl	80085ee <f_sync>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d118      	bne.n	8008734 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f107 0208 	add.w	r2, r7, #8
 8008708:	4611      	mov	r1, r2
 800870a:	4618      	mov	r0, r3
 800870c:	f7ff fa38 	bl	8007b80 <validate>
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10c      	bne.n	8008734 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	4618      	mov	r0, r3
 8008720:	f7fd fb38 	bl	8005d94 <dec_lock>
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d102      	bne.n	8008734 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008734:	7bfb      	ldrb	r3, [r7, #15]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008740:	b480      	push	{r7}
 8008742:	b087      	sub	sp, #28
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	4613      	mov	r3, r2
 800874c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800874e:	2301      	movs	r3, #1
 8008750:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008752:	2300      	movs	r3, #0
 8008754:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008756:	4b1f      	ldr	r3, [pc, #124]	@ (80087d4 <FATFS_LinkDriverEx+0x94>)
 8008758:	7a5b      	ldrb	r3, [r3, #9]
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b00      	cmp	r3, #0
 800875e:	d131      	bne.n	80087c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008760:	4b1c      	ldr	r3, [pc, #112]	@ (80087d4 <FATFS_LinkDriverEx+0x94>)
 8008762:	7a5b      	ldrb	r3, [r3, #9]
 8008764:	b2db      	uxtb	r3, r3
 8008766:	461a      	mov	r2, r3
 8008768:	4b1a      	ldr	r3, [pc, #104]	@ (80087d4 <FATFS_LinkDriverEx+0x94>)
 800876a:	2100      	movs	r1, #0
 800876c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800876e:	4b19      	ldr	r3, [pc, #100]	@ (80087d4 <FATFS_LinkDriverEx+0x94>)
 8008770:	7a5b      	ldrb	r3, [r3, #9]
 8008772:	b2db      	uxtb	r3, r3
 8008774:	4a17      	ldr	r2, [pc, #92]	@ (80087d4 <FATFS_LinkDriverEx+0x94>)
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800877e:	4b15      	ldr	r3, [pc, #84]	@ (80087d4 <FATFS_LinkDriverEx+0x94>)
 8008780:	7a5b      	ldrb	r3, [r3, #9]
 8008782:	b2db      	uxtb	r3, r3
 8008784:	461a      	mov	r2, r3
 8008786:	4b13      	ldr	r3, [pc, #76]	@ (80087d4 <FATFS_LinkDriverEx+0x94>)
 8008788:	4413      	add	r3, r2
 800878a:	79fa      	ldrb	r2, [r7, #7]
 800878c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800878e:	4b11      	ldr	r3, [pc, #68]	@ (80087d4 <FATFS_LinkDriverEx+0x94>)
 8008790:	7a5b      	ldrb	r3, [r3, #9]
 8008792:	b2db      	uxtb	r3, r3
 8008794:	1c5a      	adds	r2, r3, #1
 8008796:	b2d1      	uxtb	r1, r2
 8008798:	4a0e      	ldr	r2, [pc, #56]	@ (80087d4 <FATFS_LinkDriverEx+0x94>)
 800879a:	7251      	strb	r1, [r2, #9]
 800879c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800879e:	7dbb      	ldrb	r3, [r7, #22]
 80087a0:	3330      	adds	r3, #48	@ 0x30
 80087a2:	b2da      	uxtb	r2, r3
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	3301      	adds	r3, #1
 80087ac:	223a      	movs	r2, #58	@ 0x3a
 80087ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	3302      	adds	r3, #2
 80087b4:	222f      	movs	r2, #47	@ 0x2f
 80087b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	3303      	adds	r3, #3
 80087bc:	2200      	movs	r2, #0
 80087be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80087c0:	2300      	movs	r3, #0
 80087c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	371c      	adds	r7, #28
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	200028d8 	.word	0x200028d8

080087d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80087e2:	2200      	movs	r2, #0
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7ff ffaa 	bl	8008740 <FATFS_LinkDriverEx>
 80087ec:	4603      	mov	r3, r0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
	...

080087f8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	6039      	str	r1, [r7, #0]
 8008802:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008804:	88fb      	ldrh	r3, [r7, #6]
 8008806:	2b7f      	cmp	r3, #127	@ 0x7f
 8008808:	d802      	bhi.n	8008810 <ff_convert+0x18>
		c = chr;
 800880a:	88fb      	ldrh	r3, [r7, #6]
 800880c:	81fb      	strh	r3, [r7, #14]
 800880e:	e025      	b.n	800885c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00b      	beq.n	800882e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008816:	88fb      	ldrh	r3, [r7, #6]
 8008818:	2bff      	cmp	r3, #255	@ 0xff
 800881a:	d805      	bhi.n	8008828 <ff_convert+0x30>
 800881c:	88fb      	ldrh	r3, [r7, #6]
 800881e:	3b80      	subs	r3, #128	@ 0x80
 8008820:	4a12      	ldr	r2, [pc, #72]	@ (800886c <ff_convert+0x74>)
 8008822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008826:	e000      	b.n	800882a <ff_convert+0x32>
 8008828:	2300      	movs	r3, #0
 800882a:	81fb      	strh	r3, [r7, #14]
 800882c:	e016      	b.n	800885c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800882e:	2300      	movs	r3, #0
 8008830:	81fb      	strh	r3, [r7, #14]
 8008832:	e009      	b.n	8008848 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008834:	89fb      	ldrh	r3, [r7, #14]
 8008836:	4a0d      	ldr	r2, [pc, #52]	@ (800886c <ff_convert+0x74>)
 8008838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800883c:	88fa      	ldrh	r2, [r7, #6]
 800883e:	429a      	cmp	r2, r3
 8008840:	d006      	beq.n	8008850 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008842:	89fb      	ldrh	r3, [r7, #14]
 8008844:	3301      	adds	r3, #1
 8008846:	81fb      	strh	r3, [r7, #14]
 8008848:	89fb      	ldrh	r3, [r7, #14]
 800884a:	2b7f      	cmp	r3, #127	@ 0x7f
 800884c:	d9f2      	bls.n	8008834 <ff_convert+0x3c>
 800884e:	e000      	b.n	8008852 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008850:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008852:	89fb      	ldrh	r3, [r7, #14]
 8008854:	3380      	adds	r3, #128	@ 0x80
 8008856:	b29b      	uxth	r3, r3
 8008858:	b2db      	uxtb	r3, r3
 800885a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800885c:	89fb      	ldrh	r3, [r7, #14]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	08009dc8 	.word	0x08009dc8

08008870 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008870:	b480      	push	{r7}
 8008872:	b087      	sub	sp, #28
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800887a:	88fb      	ldrh	r3, [r7, #6]
 800887c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008880:	d201      	bcs.n	8008886 <ff_wtoupper+0x16>
 8008882:	4b3e      	ldr	r3, [pc, #248]	@ (800897c <ff_wtoupper+0x10c>)
 8008884:	e000      	b.n	8008888 <ff_wtoupper+0x18>
 8008886:	4b3e      	ldr	r3, [pc, #248]	@ (8008980 <ff_wtoupper+0x110>)
 8008888:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	1c9a      	adds	r2, r3, #2
 800888e:	617a      	str	r2, [r7, #20]
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008894:	8a7b      	ldrh	r3, [r7, #18]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d068      	beq.n	800896c <ff_wtoupper+0xfc>
 800889a:	88fa      	ldrh	r2, [r7, #6]
 800889c:	8a7b      	ldrh	r3, [r7, #18]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d364      	bcc.n	800896c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	1c9a      	adds	r2, r3, #2
 80088a6:	617a      	str	r2, [r7, #20]
 80088a8:	881b      	ldrh	r3, [r3, #0]
 80088aa:	823b      	strh	r3, [r7, #16]
 80088ac:	8a3b      	ldrh	r3, [r7, #16]
 80088ae:	0a1b      	lsrs	r3, r3, #8
 80088b0:	81fb      	strh	r3, [r7, #14]
 80088b2:	8a3b      	ldrh	r3, [r7, #16]
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80088b8:	88fa      	ldrh	r2, [r7, #6]
 80088ba:	8a79      	ldrh	r1, [r7, #18]
 80088bc:	8a3b      	ldrh	r3, [r7, #16]
 80088be:	440b      	add	r3, r1
 80088c0:	429a      	cmp	r2, r3
 80088c2:	da49      	bge.n	8008958 <ff_wtoupper+0xe8>
			switch (cmd) {
 80088c4:	89fb      	ldrh	r3, [r7, #14]
 80088c6:	2b08      	cmp	r3, #8
 80088c8:	d84f      	bhi.n	800896a <ff_wtoupper+0xfa>
 80088ca:	a201      	add	r2, pc, #4	@ (adr r2, 80088d0 <ff_wtoupper+0x60>)
 80088cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d0:	080088f5 	.word	0x080088f5
 80088d4:	08008907 	.word	0x08008907
 80088d8:	0800891d 	.word	0x0800891d
 80088dc:	08008925 	.word	0x08008925
 80088e0:	0800892d 	.word	0x0800892d
 80088e4:	08008935 	.word	0x08008935
 80088e8:	0800893d 	.word	0x0800893d
 80088ec:	08008945 	.word	0x08008945
 80088f0:	0800894d 	.word	0x0800894d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80088f4:	88fa      	ldrh	r2, [r7, #6]
 80088f6:	8a7b      	ldrh	r3, [r7, #18]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	005b      	lsls	r3, r3, #1
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	4413      	add	r3, r2
 8008900:	881b      	ldrh	r3, [r3, #0]
 8008902:	80fb      	strh	r3, [r7, #6]
 8008904:	e027      	b.n	8008956 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008906:	88fa      	ldrh	r2, [r7, #6]
 8008908:	8a7b      	ldrh	r3, [r7, #18]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	b29b      	uxth	r3, r3
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	b29b      	uxth	r3, r3
 8008914:	88fa      	ldrh	r2, [r7, #6]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	80fb      	strh	r3, [r7, #6]
 800891a:	e01c      	b.n	8008956 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800891c:	88fb      	ldrh	r3, [r7, #6]
 800891e:	3b10      	subs	r3, #16
 8008920:	80fb      	strh	r3, [r7, #6]
 8008922:	e018      	b.n	8008956 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008924:	88fb      	ldrh	r3, [r7, #6]
 8008926:	3b20      	subs	r3, #32
 8008928:	80fb      	strh	r3, [r7, #6]
 800892a:	e014      	b.n	8008956 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800892c:	88fb      	ldrh	r3, [r7, #6]
 800892e:	3b30      	subs	r3, #48	@ 0x30
 8008930:	80fb      	strh	r3, [r7, #6]
 8008932:	e010      	b.n	8008956 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008934:	88fb      	ldrh	r3, [r7, #6]
 8008936:	3b1a      	subs	r3, #26
 8008938:	80fb      	strh	r3, [r7, #6]
 800893a:	e00c      	b.n	8008956 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800893c:	88fb      	ldrh	r3, [r7, #6]
 800893e:	3308      	adds	r3, #8
 8008940:	80fb      	strh	r3, [r7, #6]
 8008942:	e008      	b.n	8008956 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008944:	88fb      	ldrh	r3, [r7, #6]
 8008946:	3b50      	subs	r3, #80	@ 0x50
 8008948:	80fb      	strh	r3, [r7, #6]
 800894a:	e004      	b.n	8008956 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800894c:	88fb      	ldrh	r3, [r7, #6]
 800894e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8008952:	80fb      	strh	r3, [r7, #6]
 8008954:	bf00      	nop
			}
			break;
 8008956:	e008      	b.n	800896a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008958:	89fb      	ldrh	r3, [r7, #14]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d195      	bne.n	800888a <ff_wtoupper+0x1a>
 800895e:	8a3b      	ldrh	r3, [r7, #16]
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	4413      	add	r3, r2
 8008966:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008968:	e78f      	b.n	800888a <ff_wtoupper+0x1a>
			break;
 800896a:	bf00      	nop
	}

	return chr;
 800896c:	88fb      	ldrh	r3, [r7, #6]
}
 800896e:	4618      	mov	r0, r3
 8008970:	371c      	adds	r7, #28
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	08009ec8 	.word	0x08009ec8
 8008980:	0800a0bc 	.word	0x0800a0bc

08008984 <std>:
 8008984:	2300      	movs	r3, #0
 8008986:	b510      	push	{r4, lr}
 8008988:	4604      	mov	r4, r0
 800898a:	e9c0 3300 	strd	r3, r3, [r0]
 800898e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008992:	6083      	str	r3, [r0, #8]
 8008994:	8181      	strh	r1, [r0, #12]
 8008996:	6643      	str	r3, [r0, #100]	@ 0x64
 8008998:	81c2      	strh	r2, [r0, #14]
 800899a:	6183      	str	r3, [r0, #24]
 800899c:	4619      	mov	r1, r3
 800899e:	2208      	movs	r2, #8
 80089a0:	305c      	adds	r0, #92	@ 0x5c
 80089a2:	f000 f921 	bl	8008be8 <memset>
 80089a6:	4b0d      	ldr	r3, [pc, #52]	@ (80089dc <std+0x58>)
 80089a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80089aa:	4b0d      	ldr	r3, [pc, #52]	@ (80089e0 <std+0x5c>)
 80089ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80089ae:	4b0d      	ldr	r3, [pc, #52]	@ (80089e4 <std+0x60>)
 80089b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80089b2:	4b0d      	ldr	r3, [pc, #52]	@ (80089e8 <std+0x64>)
 80089b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80089b6:	4b0d      	ldr	r3, [pc, #52]	@ (80089ec <std+0x68>)
 80089b8:	6224      	str	r4, [r4, #32]
 80089ba:	429c      	cmp	r4, r3
 80089bc:	d006      	beq.n	80089cc <std+0x48>
 80089be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80089c2:	4294      	cmp	r4, r2
 80089c4:	d002      	beq.n	80089cc <std+0x48>
 80089c6:	33d0      	adds	r3, #208	@ 0xd0
 80089c8:	429c      	cmp	r4, r3
 80089ca:	d105      	bne.n	80089d8 <std+0x54>
 80089cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80089d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089d4:	f000 b93a 	b.w	8008c4c <__retarget_lock_init_recursive>
 80089d8:	bd10      	pop	{r4, pc}
 80089da:	bf00      	nop
 80089dc:	080094a1 	.word	0x080094a1
 80089e0:	080094c3 	.word	0x080094c3
 80089e4:	080094fb 	.word	0x080094fb
 80089e8:	0800951f 	.word	0x0800951f
 80089ec:	200028e4 	.word	0x200028e4

080089f0 <stdio_exit_handler>:
 80089f0:	4a02      	ldr	r2, [pc, #8]	@ (80089fc <stdio_exit_handler+0xc>)
 80089f2:	4903      	ldr	r1, [pc, #12]	@ (8008a00 <stdio_exit_handler+0x10>)
 80089f4:	4803      	ldr	r0, [pc, #12]	@ (8008a04 <stdio_exit_handler+0x14>)
 80089f6:	f000 b869 	b.w	8008acc <_fwalk_sglue>
 80089fa:	bf00      	nop
 80089fc:	2000000c 	.word	0x2000000c
 8008a00:	08009439 	.word	0x08009439
 8008a04:	2000001c 	.word	0x2000001c

08008a08 <cleanup_stdio>:
 8008a08:	6841      	ldr	r1, [r0, #4]
 8008a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a3c <cleanup_stdio+0x34>)
 8008a0c:	4299      	cmp	r1, r3
 8008a0e:	b510      	push	{r4, lr}
 8008a10:	4604      	mov	r4, r0
 8008a12:	d001      	beq.n	8008a18 <cleanup_stdio+0x10>
 8008a14:	f000 fd10 	bl	8009438 <_fflush_r>
 8008a18:	68a1      	ldr	r1, [r4, #8]
 8008a1a:	4b09      	ldr	r3, [pc, #36]	@ (8008a40 <cleanup_stdio+0x38>)
 8008a1c:	4299      	cmp	r1, r3
 8008a1e:	d002      	beq.n	8008a26 <cleanup_stdio+0x1e>
 8008a20:	4620      	mov	r0, r4
 8008a22:	f000 fd09 	bl	8009438 <_fflush_r>
 8008a26:	68e1      	ldr	r1, [r4, #12]
 8008a28:	4b06      	ldr	r3, [pc, #24]	@ (8008a44 <cleanup_stdio+0x3c>)
 8008a2a:	4299      	cmp	r1, r3
 8008a2c:	d004      	beq.n	8008a38 <cleanup_stdio+0x30>
 8008a2e:	4620      	mov	r0, r4
 8008a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a34:	f000 bd00 	b.w	8009438 <_fflush_r>
 8008a38:	bd10      	pop	{r4, pc}
 8008a3a:	bf00      	nop
 8008a3c:	200028e4 	.word	0x200028e4
 8008a40:	2000294c 	.word	0x2000294c
 8008a44:	200029b4 	.word	0x200029b4

08008a48 <global_stdio_init.part.0>:
 8008a48:	b510      	push	{r4, lr}
 8008a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a78 <global_stdio_init.part.0+0x30>)
 8008a4c:	4c0b      	ldr	r4, [pc, #44]	@ (8008a7c <global_stdio_init.part.0+0x34>)
 8008a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8008a80 <global_stdio_init.part.0+0x38>)
 8008a50:	601a      	str	r2, [r3, #0]
 8008a52:	4620      	mov	r0, r4
 8008a54:	2200      	movs	r2, #0
 8008a56:	2104      	movs	r1, #4
 8008a58:	f7ff ff94 	bl	8008984 <std>
 8008a5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a60:	2201      	movs	r2, #1
 8008a62:	2109      	movs	r1, #9
 8008a64:	f7ff ff8e 	bl	8008984 <std>
 8008a68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a6c:	2202      	movs	r2, #2
 8008a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a72:	2112      	movs	r1, #18
 8008a74:	f7ff bf86 	b.w	8008984 <std>
 8008a78:	20002a1c 	.word	0x20002a1c
 8008a7c:	200028e4 	.word	0x200028e4
 8008a80:	080089f1 	.word	0x080089f1

08008a84 <__sfp_lock_acquire>:
 8008a84:	4801      	ldr	r0, [pc, #4]	@ (8008a8c <__sfp_lock_acquire+0x8>)
 8008a86:	f000 b8e2 	b.w	8008c4e <__retarget_lock_acquire_recursive>
 8008a8a:	bf00      	nop
 8008a8c:	20002a21 	.word	0x20002a21

08008a90 <__sfp_lock_release>:
 8008a90:	4801      	ldr	r0, [pc, #4]	@ (8008a98 <__sfp_lock_release+0x8>)
 8008a92:	f000 b8dd 	b.w	8008c50 <__retarget_lock_release_recursive>
 8008a96:	bf00      	nop
 8008a98:	20002a21 	.word	0x20002a21

08008a9c <__sinit>:
 8008a9c:	b510      	push	{r4, lr}
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	f7ff fff0 	bl	8008a84 <__sfp_lock_acquire>
 8008aa4:	6a23      	ldr	r3, [r4, #32]
 8008aa6:	b11b      	cbz	r3, 8008ab0 <__sinit+0x14>
 8008aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aac:	f7ff bff0 	b.w	8008a90 <__sfp_lock_release>
 8008ab0:	4b04      	ldr	r3, [pc, #16]	@ (8008ac4 <__sinit+0x28>)
 8008ab2:	6223      	str	r3, [r4, #32]
 8008ab4:	4b04      	ldr	r3, [pc, #16]	@ (8008ac8 <__sinit+0x2c>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1f5      	bne.n	8008aa8 <__sinit+0xc>
 8008abc:	f7ff ffc4 	bl	8008a48 <global_stdio_init.part.0>
 8008ac0:	e7f2      	b.n	8008aa8 <__sinit+0xc>
 8008ac2:	bf00      	nop
 8008ac4:	08008a09 	.word	0x08008a09
 8008ac8:	20002a1c 	.word	0x20002a1c

08008acc <_fwalk_sglue>:
 8008acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ad0:	4607      	mov	r7, r0
 8008ad2:	4688      	mov	r8, r1
 8008ad4:	4614      	mov	r4, r2
 8008ad6:	2600      	movs	r6, #0
 8008ad8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008adc:	f1b9 0901 	subs.w	r9, r9, #1
 8008ae0:	d505      	bpl.n	8008aee <_fwalk_sglue+0x22>
 8008ae2:	6824      	ldr	r4, [r4, #0]
 8008ae4:	2c00      	cmp	r4, #0
 8008ae6:	d1f7      	bne.n	8008ad8 <_fwalk_sglue+0xc>
 8008ae8:	4630      	mov	r0, r6
 8008aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aee:	89ab      	ldrh	r3, [r5, #12]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d907      	bls.n	8008b04 <_fwalk_sglue+0x38>
 8008af4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008af8:	3301      	adds	r3, #1
 8008afa:	d003      	beq.n	8008b04 <_fwalk_sglue+0x38>
 8008afc:	4629      	mov	r1, r5
 8008afe:	4638      	mov	r0, r7
 8008b00:	47c0      	blx	r8
 8008b02:	4306      	orrs	r6, r0
 8008b04:	3568      	adds	r5, #104	@ 0x68
 8008b06:	e7e9      	b.n	8008adc <_fwalk_sglue+0x10>

08008b08 <iprintf>:
 8008b08:	b40f      	push	{r0, r1, r2, r3}
 8008b0a:	b507      	push	{r0, r1, r2, lr}
 8008b0c:	4906      	ldr	r1, [pc, #24]	@ (8008b28 <iprintf+0x20>)
 8008b0e:	ab04      	add	r3, sp, #16
 8008b10:	6808      	ldr	r0, [r1, #0]
 8008b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b16:	6881      	ldr	r1, [r0, #8]
 8008b18:	9301      	str	r3, [sp, #4]
 8008b1a:	f000 f8c3 	bl	8008ca4 <_vfiprintf_r>
 8008b1e:	b003      	add	sp, #12
 8008b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr
 8008b28:	20000018 	.word	0x20000018

08008b2c <_puts_r>:
 8008b2c:	6a03      	ldr	r3, [r0, #32]
 8008b2e:	b570      	push	{r4, r5, r6, lr}
 8008b30:	6884      	ldr	r4, [r0, #8]
 8008b32:	4605      	mov	r5, r0
 8008b34:	460e      	mov	r6, r1
 8008b36:	b90b      	cbnz	r3, 8008b3c <_puts_r+0x10>
 8008b38:	f7ff ffb0 	bl	8008a9c <__sinit>
 8008b3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b3e:	07db      	lsls	r3, r3, #31
 8008b40:	d405      	bmi.n	8008b4e <_puts_r+0x22>
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	0598      	lsls	r0, r3, #22
 8008b46:	d402      	bmi.n	8008b4e <_puts_r+0x22>
 8008b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b4a:	f000 f880 	bl	8008c4e <__retarget_lock_acquire_recursive>
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	0719      	lsls	r1, r3, #28
 8008b52:	d502      	bpl.n	8008b5a <_puts_r+0x2e>
 8008b54:	6923      	ldr	r3, [r4, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d135      	bne.n	8008bc6 <_puts_r+0x9a>
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f000 fd21 	bl	80095a4 <__swsetup_r>
 8008b62:	b380      	cbz	r0, 8008bc6 <_puts_r+0x9a>
 8008b64:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008b68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b6a:	07da      	lsls	r2, r3, #31
 8008b6c:	d405      	bmi.n	8008b7a <_puts_r+0x4e>
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	059b      	lsls	r3, r3, #22
 8008b72:	d402      	bmi.n	8008b7a <_puts_r+0x4e>
 8008b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b76:	f000 f86b 	bl	8008c50 <__retarget_lock_release_recursive>
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	bd70      	pop	{r4, r5, r6, pc}
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	da04      	bge.n	8008b8c <_puts_r+0x60>
 8008b82:	69a2      	ldr	r2, [r4, #24]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	dc17      	bgt.n	8008bb8 <_puts_r+0x8c>
 8008b88:	290a      	cmp	r1, #10
 8008b8a:	d015      	beq.n	8008bb8 <_puts_r+0x8c>
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	6022      	str	r2, [r4, #0]
 8008b92:	7019      	strb	r1, [r3, #0]
 8008b94:	68a3      	ldr	r3, [r4, #8]
 8008b96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	60a3      	str	r3, [r4, #8]
 8008b9e:	2900      	cmp	r1, #0
 8008ba0:	d1ed      	bne.n	8008b7e <_puts_r+0x52>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	da11      	bge.n	8008bca <_puts_r+0x9e>
 8008ba6:	4622      	mov	r2, r4
 8008ba8:	210a      	movs	r1, #10
 8008baa:	4628      	mov	r0, r5
 8008bac:	f000 fcbb 	bl	8009526 <__swbuf_r>
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d0d7      	beq.n	8008b64 <_puts_r+0x38>
 8008bb4:	250a      	movs	r5, #10
 8008bb6:	e7d7      	b.n	8008b68 <_puts_r+0x3c>
 8008bb8:	4622      	mov	r2, r4
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f000 fcb3 	bl	8009526 <__swbuf_r>
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d1e7      	bne.n	8008b94 <_puts_r+0x68>
 8008bc4:	e7ce      	b.n	8008b64 <_puts_r+0x38>
 8008bc6:	3e01      	subs	r6, #1
 8008bc8:	e7e4      	b.n	8008b94 <_puts_r+0x68>
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	1c5a      	adds	r2, r3, #1
 8008bce:	6022      	str	r2, [r4, #0]
 8008bd0:	220a      	movs	r2, #10
 8008bd2:	701a      	strb	r2, [r3, #0]
 8008bd4:	e7ee      	b.n	8008bb4 <_puts_r+0x88>
	...

08008bd8 <puts>:
 8008bd8:	4b02      	ldr	r3, [pc, #8]	@ (8008be4 <puts+0xc>)
 8008bda:	4601      	mov	r1, r0
 8008bdc:	6818      	ldr	r0, [r3, #0]
 8008bde:	f7ff bfa5 	b.w	8008b2c <_puts_r>
 8008be2:	bf00      	nop
 8008be4:	20000018 	.word	0x20000018

08008be8 <memset>:
 8008be8:	4402      	add	r2, r0
 8008bea:	4603      	mov	r3, r0
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d100      	bne.n	8008bf2 <memset+0xa>
 8008bf0:	4770      	bx	lr
 8008bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8008bf6:	e7f9      	b.n	8008bec <memset+0x4>

08008bf8 <__errno>:
 8008bf8:	4b01      	ldr	r3, [pc, #4]	@ (8008c00 <__errno+0x8>)
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	20000018 	.word	0x20000018

08008c04 <__libc_init_array>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	4d0d      	ldr	r5, [pc, #52]	@ (8008c3c <__libc_init_array+0x38>)
 8008c08:	4c0d      	ldr	r4, [pc, #52]	@ (8008c40 <__libc_init_array+0x3c>)
 8008c0a:	1b64      	subs	r4, r4, r5
 8008c0c:	10a4      	asrs	r4, r4, #2
 8008c0e:	2600      	movs	r6, #0
 8008c10:	42a6      	cmp	r6, r4
 8008c12:	d109      	bne.n	8008c28 <__libc_init_array+0x24>
 8008c14:	4d0b      	ldr	r5, [pc, #44]	@ (8008c44 <__libc_init_array+0x40>)
 8008c16:	4c0c      	ldr	r4, [pc, #48]	@ (8008c48 <__libc_init_array+0x44>)
 8008c18:	f000 fe3e 	bl	8009898 <_init>
 8008c1c:	1b64      	subs	r4, r4, r5
 8008c1e:	10a4      	asrs	r4, r4, #2
 8008c20:	2600      	movs	r6, #0
 8008c22:	42a6      	cmp	r6, r4
 8008c24:	d105      	bne.n	8008c32 <__libc_init_array+0x2e>
 8008c26:	bd70      	pop	{r4, r5, r6, pc}
 8008c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c2c:	4798      	blx	r3
 8008c2e:	3601      	adds	r6, #1
 8008c30:	e7ee      	b.n	8008c10 <__libc_init_array+0xc>
 8008c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c36:	4798      	blx	r3
 8008c38:	3601      	adds	r6, #1
 8008c3a:	e7f2      	b.n	8008c22 <__libc_init_array+0x1e>
 8008c3c:	0800a1b4 	.word	0x0800a1b4
 8008c40:	0800a1b4 	.word	0x0800a1b4
 8008c44:	0800a1b4 	.word	0x0800a1b4
 8008c48:	0800a1b8 	.word	0x0800a1b8

08008c4c <__retarget_lock_init_recursive>:
 8008c4c:	4770      	bx	lr

08008c4e <__retarget_lock_acquire_recursive>:
 8008c4e:	4770      	bx	lr

08008c50 <__retarget_lock_release_recursive>:
 8008c50:	4770      	bx	lr

08008c52 <__sfputc_r>:
 8008c52:	6893      	ldr	r3, [r2, #8]
 8008c54:	3b01      	subs	r3, #1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	b410      	push	{r4}
 8008c5a:	6093      	str	r3, [r2, #8]
 8008c5c:	da08      	bge.n	8008c70 <__sfputc_r+0x1e>
 8008c5e:	6994      	ldr	r4, [r2, #24]
 8008c60:	42a3      	cmp	r3, r4
 8008c62:	db01      	blt.n	8008c68 <__sfputc_r+0x16>
 8008c64:	290a      	cmp	r1, #10
 8008c66:	d103      	bne.n	8008c70 <__sfputc_r+0x1e>
 8008c68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c6c:	f000 bc5b 	b.w	8009526 <__swbuf_r>
 8008c70:	6813      	ldr	r3, [r2, #0]
 8008c72:	1c58      	adds	r0, r3, #1
 8008c74:	6010      	str	r0, [r2, #0]
 8008c76:	7019      	strb	r1, [r3, #0]
 8008c78:	4608      	mov	r0, r1
 8008c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <__sfputs_r>:
 8008c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c82:	4606      	mov	r6, r0
 8008c84:	460f      	mov	r7, r1
 8008c86:	4614      	mov	r4, r2
 8008c88:	18d5      	adds	r5, r2, r3
 8008c8a:	42ac      	cmp	r4, r5
 8008c8c:	d101      	bne.n	8008c92 <__sfputs_r+0x12>
 8008c8e:	2000      	movs	r0, #0
 8008c90:	e007      	b.n	8008ca2 <__sfputs_r+0x22>
 8008c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c96:	463a      	mov	r2, r7
 8008c98:	4630      	mov	r0, r6
 8008c9a:	f7ff ffda 	bl	8008c52 <__sfputc_r>
 8008c9e:	1c43      	adds	r3, r0, #1
 8008ca0:	d1f3      	bne.n	8008c8a <__sfputs_r+0xa>
 8008ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ca4 <_vfiprintf_r>:
 8008ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca8:	460d      	mov	r5, r1
 8008caa:	b09d      	sub	sp, #116	@ 0x74
 8008cac:	4614      	mov	r4, r2
 8008cae:	4698      	mov	r8, r3
 8008cb0:	4606      	mov	r6, r0
 8008cb2:	b118      	cbz	r0, 8008cbc <_vfiprintf_r+0x18>
 8008cb4:	6a03      	ldr	r3, [r0, #32]
 8008cb6:	b90b      	cbnz	r3, 8008cbc <_vfiprintf_r+0x18>
 8008cb8:	f7ff fef0 	bl	8008a9c <__sinit>
 8008cbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cbe:	07d9      	lsls	r1, r3, #31
 8008cc0:	d405      	bmi.n	8008cce <_vfiprintf_r+0x2a>
 8008cc2:	89ab      	ldrh	r3, [r5, #12]
 8008cc4:	059a      	lsls	r2, r3, #22
 8008cc6:	d402      	bmi.n	8008cce <_vfiprintf_r+0x2a>
 8008cc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cca:	f7ff ffc0 	bl	8008c4e <__retarget_lock_acquire_recursive>
 8008cce:	89ab      	ldrh	r3, [r5, #12]
 8008cd0:	071b      	lsls	r3, r3, #28
 8008cd2:	d501      	bpl.n	8008cd8 <_vfiprintf_r+0x34>
 8008cd4:	692b      	ldr	r3, [r5, #16]
 8008cd6:	b99b      	cbnz	r3, 8008d00 <_vfiprintf_r+0x5c>
 8008cd8:	4629      	mov	r1, r5
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f000 fc62 	bl	80095a4 <__swsetup_r>
 8008ce0:	b170      	cbz	r0, 8008d00 <_vfiprintf_r+0x5c>
 8008ce2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ce4:	07dc      	lsls	r4, r3, #31
 8008ce6:	d504      	bpl.n	8008cf2 <_vfiprintf_r+0x4e>
 8008ce8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cec:	b01d      	add	sp, #116	@ 0x74
 8008cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf2:	89ab      	ldrh	r3, [r5, #12]
 8008cf4:	0598      	lsls	r0, r3, #22
 8008cf6:	d4f7      	bmi.n	8008ce8 <_vfiprintf_r+0x44>
 8008cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cfa:	f7ff ffa9 	bl	8008c50 <__retarget_lock_release_recursive>
 8008cfe:	e7f3      	b.n	8008ce8 <_vfiprintf_r+0x44>
 8008d00:	2300      	movs	r3, #0
 8008d02:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d04:	2320      	movs	r3, #32
 8008d06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d0e:	2330      	movs	r3, #48	@ 0x30
 8008d10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ec0 <_vfiprintf_r+0x21c>
 8008d14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d18:	f04f 0901 	mov.w	r9, #1
 8008d1c:	4623      	mov	r3, r4
 8008d1e:	469a      	mov	sl, r3
 8008d20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d24:	b10a      	cbz	r2, 8008d2a <_vfiprintf_r+0x86>
 8008d26:	2a25      	cmp	r2, #37	@ 0x25
 8008d28:	d1f9      	bne.n	8008d1e <_vfiprintf_r+0x7a>
 8008d2a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d2e:	d00b      	beq.n	8008d48 <_vfiprintf_r+0xa4>
 8008d30:	465b      	mov	r3, fp
 8008d32:	4622      	mov	r2, r4
 8008d34:	4629      	mov	r1, r5
 8008d36:	4630      	mov	r0, r6
 8008d38:	f7ff ffa2 	bl	8008c80 <__sfputs_r>
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	f000 80a7 	beq.w	8008e90 <_vfiprintf_r+0x1ec>
 8008d42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d44:	445a      	add	r2, fp
 8008d46:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d48:	f89a 3000 	ldrb.w	r3, [sl]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 809f 	beq.w	8008e90 <_vfiprintf_r+0x1ec>
 8008d52:	2300      	movs	r3, #0
 8008d54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d5c:	f10a 0a01 	add.w	sl, sl, #1
 8008d60:	9304      	str	r3, [sp, #16]
 8008d62:	9307      	str	r3, [sp, #28]
 8008d64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d68:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d6a:	4654      	mov	r4, sl
 8008d6c:	2205      	movs	r2, #5
 8008d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d72:	4853      	ldr	r0, [pc, #332]	@ (8008ec0 <_vfiprintf_r+0x21c>)
 8008d74:	f7f7 fa54 	bl	8000220 <memchr>
 8008d78:	9a04      	ldr	r2, [sp, #16]
 8008d7a:	b9d8      	cbnz	r0, 8008db4 <_vfiprintf_r+0x110>
 8008d7c:	06d1      	lsls	r1, r2, #27
 8008d7e:	bf44      	itt	mi
 8008d80:	2320      	movmi	r3, #32
 8008d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d86:	0713      	lsls	r3, r2, #28
 8008d88:	bf44      	itt	mi
 8008d8a:	232b      	movmi	r3, #43	@ 0x2b
 8008d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d90:	f89a 3000 	ldrb.w	r3, [sl]
 8008d94:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d96:	d015      	beq.n	8008dc4 <_vfiprintf_r+0x120>
 8008d98:	9a07      	ldr	r2, [sp, #28]
 8008d9a:	4654      	mov	r4, sl
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	f04f 0c0a 	mov.w	ip, #10
 8008da2:	4621      	mov	r1, r4
 8008da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008da8:	3b30      	subs	r3, #48	@ 0x30
 8008daa:	2b09      	cmp	r3, #9
 8008dac:	d94b      	bls.n	8008e46 <_vfiprintf_r+0x1a2>
 8008dae:	b1b0      	cbz	r0, 8008dde <_vfiprintf_r+0x13a>
 8008db0:	9207      	str	r2, [sp, #28]
 8008db2:	e014      	b.n	8008dde <_vfiprintf_r+0x13a>
 8008db4:	eba0 0308 	sub.w	r3, r0, r8
 8008db8:	fa09 f303 	lsl.w	r3, r9, r3
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	9304      	str	r3, [sp, #16]
 8008dc0:	46a2      	mov	sl, r4
 8008dc2:	e7d2      	b.n	8008d6a <_vfiprintf_r+0xc6>
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	1d19      	adds	r1, r3, #4
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	9103      	str	r1, [sp, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	bfbb      	ittet	lt
 8008dd0:	425b      	neglt	r3, r3
 8008dd2:	f042 0202 	orrlt.w	r2, r2, #2
 8008dd6:	9307      	strge	r3, [sp, #28]
 8008dd8:	9307      	strlt	r3, [sp, #28]
 8008dda:	bfb8      	it	lt
 8008ddc:	9204      	strlt	r2, [sp, #16]
 8008dde:	7823      	ldrb	r3, [r4, #0]
 8008de0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008de2:	d10a      	bne.n	8008dfa <_vfiprintf_r+0x156>
 8008de4:	7863      	ldrb	r3, [r4, #1]
 8008de6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008de8:	d132      	bne.n	8008e50 <_vfiprintf_r+0x1ac>
 8008dea:	9b03      	ldr	r3, [sp, #12]
 8008dec:	1d1a      	adds	r2, r3, #4
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	9203      	str	r2, [sp, #12]
 8008df2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008df6:	3402      	adds	r4, #2
 8008df8:	9305      	str	r3, [sp, #20]
 8008dfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ed0 <_vfiprintf_r+0x22c>
 8008dfe:	7821      	ldrb	r1, [r4, #0]
 8008e00:	2203      	movs	r2, #3
 8008e02:	4650      	mov	r0, sl
 8008e04:	f7f7 fa0c 	bl	8000220 <memchr>
 8008e08:	b138      	cbz	r0, 8008e1a <_vfiprintf_r+0x176>
 8008e0a:	9b04      	ldr	r3, [sp, #16]
 8008e0c:	eba0 000a 	sub.w	r0, r0, sl
 8008e10:	2240      	movs	r2, #64	@ 0x40
 8008e12:	4082      	lsls	r2, r0
 8008e14:	4313      	orrs	r3, r2
 8008e16:	3401      	adds	r4, #1
 8008e18:	9304      	str	r3, [sp, #16]
 8008e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e1e:	4829      	ldr	r0, [pc, #164]	@ (8008ec4 <_vfiprintf_r+0x220>)
 8008e20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e24:	2206      	movs	r2, #6
 8008e26:	f7f7 f9fb 	bl	8000220 <memchr>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	d03f      	beq.n	8008eae <_vfiprintf_r+0x20a>
 8008e2e:	4b26      	ldr	r3, [pc, #152]	@ (8008ec8 <_vfiprintf_r+0x224>)
 8008e30:	bb1b      	cbnz	r3, 8008e7a <_vfiprintf_r+0x1d6>
 8008e32:	9b03      	ldr	r3, [sp, #12]
 8008e34:	3307      	adds	r3, #7
 8008e36:	f023 0307 	bic.w	r3, r3, #7
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	9303      	str	r3, [sp, #12]
 8008e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e40:	443b      	add	r3, r7
 8008e42:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e44:	e76a      	b.n	8008d1c <_vfiprintf_r+0x78>
 8008e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	2001      	movs	r0, #1
 8008e4e:	e7a8      	b.n	8008da2 <_vfiprintf_r+0xfe>
 8008e50:	2300      	movs	r3, #0
 8008e52:	3401      	adds	r4, #1
 8008e54:	9305      	str	r3, [sp, #20]
 8008e56:	4619      	mov	r1, r3
 8008e58:	f04f 0c0a 	mov.w	ip, #10
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e62:	3a30      	subs	r2, #48	@ 0x30
 8008e64:	2a09      	cmp	r2, #9
 8008e66:	d903      	bls.n	8008e70 <_vfiprintf_r+0x1cc>
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d0c6      	beq.n	8008dfa <_vfiprintf_r+0x156>
 8008e6c:	9105      	str	r1, [sp, #20]
 8008e6e:	e7c4      	b.n	8008dfa <_vfiprintf_r+0x156>
 8008e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e74:	4604      	mov	r4, r0
 8008e76:	2301      	movs	r3, #1
 8008e78:	e7f0      	b.n	8008e5c <_vfiprintf_r+0x1b8>
 8008e7a:	ab03      	add	r3, sp, #12
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	462a      	mov	r2, r5
 8008e80:	4b12      	ldr	r3, [pc, #72]	@ (8008ecc <_vfiprintf_r+0x228>)
 8008e82:	a904      	add	r1, sp, #16
 8008e84:	4630      	mov	r0, r6
 8008e86:	f3af 8000 	nop.w
 8008e8a:	4607      	mov	r7, r0
 8008e8c:	1c78      	adds	r0, r7, #1
 8008e8e:	d1d6      	bne.n	8008e3e <_vfiprintf_r+0x19a>
 8008e90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e92:	07d9      	lsls	r1, r3, #31
 8008e94:	d405      	bmi.n	8008ea2 <_vfiprintf_r+0x1fe>
 8008e96:	89ab      	ldrh	r3, [r5, #12]
 8008e98:	059a      	lsls	r2, r3, #22
 8008e9a:	d402      	bmi.n	8008ea2 <_vfiprintf_r+0x1fe>
 8008e9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e9e:	f7ff fed7 	bl	8008c50 <__retarget_lock_release_recursive>
 8008ea2:	89ab      	ldrh	r3, [r5, #12]
 8008ea4:	065b      	lsls	r3, r3, #25
 8008ea6:	f53f af1f 	bmi.w	8008ce8 <_vfiprintf_r+0x44>
 8008eaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008eac:	e71e      	b.n	8008cec <_vfiprintf_r+0x48>
 8008eae:	ab03      	add	r3, sp, #12
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	462a      	mov	r2, r5
 8008eb4:	4b05      	ldr	r3, [pc, #20]	@ (8008ecc <_vfiprintf_r+0x228>)
 8008eb6:	a904      	add	r1, sp, #16
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f000 f91b 	bl	80090f4 <_printf_i>
 8008ebe:	e7e4      	b.n	8008e8a <_vfiprintf_r+0x1e6>
 8008ec0:	0800a178 	.word	0x0800a178
 8008ec4:	0800a182 	.word	0x0800a182
 8008ec8:	00000000 	.word	0x00000000
 8008ecc:	08008c81 	.word	0x08008c81
 8008ed0:	0800a17e 	.word	0x0800a17e

08008ed4 <sbrk_aligned>:
 8008ed4:	b570      	push	{r4, r5, r6, lr}
 8008ed6:	4e0f      	ldr	r6, [pc, #60]	@ (8008f14 <sbrk_aligned+0x40>)
 8008ed8:	460c      	mov	r4, r1
 8008eda:	6831      	ldr	r1, [r6, #0]
 8008edc:	4605      	mov	r5, r0
 8008ede:	b911      	cbnz	r1, 8008ee6 <sbrk_aligned+0x12>
 8008ee0:	f000 fc4c 	bl	800977c <_sbrk_r>
 8008ee4:	6030      	str	r0, [r6, #0]
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	4628      	mov	r0, r5
 8008eea:	f000 fc47 	bl	800977c <_sbrk_r>
 8008eee:	1c43      	adds	r3, r0, #1
 8008ef0:	d103      	bne.n	8008efa <sbrk_aligned+0x26>
 8008ef2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	bd70      	pop	{r4, r5, r6, pc}
 8008efa:	1cc4      	adds	r4, r0, #3
 8008efc:	f024 0403 	bic.w	r4, r4, #3
 8008f00:	42a0      	cmp	r0, r4
 8008f02:	d0f8      	beq.n	8008ef6 <sbrk_aligned+0x22>
 8008f04:	1a21      	subs	r1, r4, r0
 8008f06:	4628      	mov	r0, r5
 8008f08:	f000 fc38 	bl	800977c <_sbrk_r>
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	d1f2      	bne.n	8008ef6 <sbrk_aligned+0x22>
 8008f10:	e7ef      	b.n	8008ef2 <sbrk_aligned+0x1e>
 8008f12:	bf00      	nop
 8008f14:	20002a24 	.word	0x20002a24

08008f18 <_malloc_r>:
 8008f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f1c:	1ccd      	adds	r5, r1, #3
 8008f1e:	f025 0503 	bic.w	r5, r5, #3
 8008f22:	3508      	adds	r5, #8
 8008f24:	2d0c      	cmp	r5, #12
 8008f26:	bf38      	it	cc
 8008f28:	250c      	movcc	r5, #12
 8008f2a:	2d00      	cmp	r5, #0
 8008f2c:	4606      	mov	r6, r0
 8008f2e:	db01      	blt.n	8008f34 <_malloc_r+0x1c>
 8008f30:	42a9      	cmp	r1, r5
 8008f32:	d904      	bls.n	8008f3e <_malloc_r+0x26>
 8008f34:	230c      	movs	r3, #12
 8008f36:	6033      	str	r3, [r6, #0]
 8008f38:	2000      	movs	r0, #0
 8008f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009014 <_malloc_r+0xfc>
 8008f42:	f000 faa1 	bl	8009488 <__malloc_lock>
 8008f46:	f8d8 3000 	ldr.w	r3, [r8]
 8008f4a:	461c      	mov	r4, r3
 8008f4c:	bb44      	cbnz	r4, 8008fa0 <_malloc_r+0x88>
 8008f4e:	4629      	mov	r1, r5
 8008f50:	4630      	mov	r0, r6
 8008f52:	f7ff ffbf 	bl	8008ed4 <sbrk_aligned>
 8008f56:	1c43      	adds	r3, r0, #1
 8008f58:	4604      	mov	r4, r0
 8008f5a:	d158      	bne.n	800900e <_malloc_r+0xf6>
 8008f5c:	f8d8 4000 	ldr.w	r4, [r8]
 8008f60:	4627      	mov	r7, r4
 8008f62:	2f00      	cmp	r7, #0
 8008f64:	d143      	bne.n	8008fee <_malloc_r+0xd6>
 8008f66:	2c00      	cmp	r4, #0
 8008f68:	d04b      	beq.n	8009002 <_malloc_r+0xea>
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	4630      	mov	r0, r6
 8008f70:	eb04 0903 	add.w	r9, r4, r3
 8008f74:	f000 fc02 	bl	800977c <_sbrk_r>
 8008f78:	4581      	cmp	r9, r0
 8008f7a:	d142      	bne.n	8009002 <_malloc_r+0xea>
 8008f7c:	6821      	ldr	r1, [r4, #0]
 8008f7e:	1a6d      	subs	r5, r5, r1
 8008f80:	4629      	mov	r1, r5
 8008f82:	4630      	mov	r0, r6
 8008f84:	f7ff ffa6 	bl	8008ed4 <sbrk_aligned>
 8008f88:	3001      	adds	r0, #1
 8008f8a:	d03a      	beq.n	8009002 <_malloc_r+0xea>
 8008f8c:	6823      	ldr	r3, [r4, #0]
 8008f8e:	442b      	add	r3, r5
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	f8d8 3000 	ldr.w	r3, [r8]
 8008f96:	685a      	ldr	r2, [r3, #4]
 8008f98:	bb62      	cbnz	r2, 8008ff4 <_malloc_r+0xdc>
 8008f9a:	f8c8 7000 	str.w	r7, [r8]
 8008f9e:	e00f      	b.n	8008fc0 <_malloc_r+0xa8>
 8008fa0:	6822      	ldr	r2, [r4, #0]
 8008fa2:	1b52      	subs	r2, r2, r5
 8008fa4:	d420      	bmi.n	8008fe8 <_malloc_r+0xd0>
 8008fa6:	2a0b      	cmp	r2, #11
 8008fa8:	d917      	bls.n	8008fda <_malloc_r+0xc2>
 8008faa:	1961      	adds	r1, r4, r5
 8008fac:	42a3      	cmp	r3, r4
 8008fae:	6025      	str	r5, [r4, #0]
 8008fb0:	bf18      	it	ne
 8008fb2:	6059      	strne	r1, [r3, #4]
 8008fb4:	6863      	ldr	r3, [r4, #4]
 8008fb6:	bf08      	it	eq
 8008fb8:	f8c8 1000 	streq.w	r1, [r8]
 8008fbc:	5162      	str	r2, [r4, r5]
 8008fbe:	604b      	str	r3, [r1, #4]
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f000 fa67 	bl	8009494 <__malloc_unlock>
 8008fc6:	f104 000b 	add.w	r0, r4, #11
 8008fca:	1d23      	adds	r3, r4, #4
 8008fcc:	f020 0007 	bic.w	r0, r0, #7
 8008fd0:	1ac2      	subs	r2, r0, r3
 8008fd2:	bf1c      	itt	ne
 8008fd4:	1a1b      	subne	r3, r3, r0
 8008fd6:	50a3      	strne	r3, [r4, r2]
 8008fd8:	e7af      	b.n	8008f3a <_malloc_r+0x22>
 8008fda:	6862      	ldr	r2, [r4, #4]
 8008fdc:	42a3      	cmp	r3, r4
 8008fde:	bf0c      	ite	eq
 8008fe0:	f8c8 2000 	streq.w	r2, [r8]
 8008fe4:	605a      	strne	r2, [r3, #4]
 8008fe6:	e7eb      	b.n	8008fc0 <_malloc_r+0xa8>
 8008fe8:	4623      	mov	r3, r4
 8008fea:	6864      	ldr	r4, [r4, #4]
 8008fec:	e7ae      	b.n	8008f4c <_malloc_r+0x34>
 8008fee:	463c      	mov	r4, r7
 8008ff0:	687f      	ldr	r7, [r7, #4]
 8008ff2:	e7b6      	b.n	8008f62 <_malloc_r+0x4a>
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	42a3      	cmp	r3, r4
 8008ffa:	d1fb      	bne.n	8008ff4 <_malloc_r+0xdc>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	6053      	str	r3, [r2, #4]
 8009000:	e7de      	b.n	8008fc0 <_malloc_r+0xa8>
 8009002:	230c      	movs	r3, #12
 8009004:	6033      	str	r3, [r6, #0]
 8009006:	4630      	mov	r0, r6
 8009008:	f000 fa44 	bl	8009494 <__malloc_unlock>
 800900c:	e794      	b.n	8008f38 <_malloc_r+0x20>
 800900e:	6005      	str	r5, [r0, #0]
 8009010:	e7d6      	b.n	8008fc0 <_malloc_r+0xa8>
 8009012:	bf00      	nop
 8009014:	20002a28 	.word	0x20002a28

08009018 <_printf_common>:
 8009018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800901c:	4616      	mov	r6, r2
 800901e:	4698      	mov	r8, r3
 8009020:	688a      	ldr	r2, [r1, #8]
 8009022:	690b      	ldr	r3, [r1, #16]
 8009024:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009028:	4293      	cmp	r3, r2
 800902a:	bfb8      	it	lt
 800902c:	4613      	movlt	r3, r2
 800902e:	6033      	str	r3, [r6, #0]
 8009030:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009034:	4607      	mov	r7, r0
 8009036:	460c      	mov	r4, r1
 8009038:	b10a      	cbz	r2, 800903e <_printf_common+0x26>
 800903a:	3301      	adds	r3, #1
 800903c:	6033      	str	r3, [r6, #0]
 800903e:	6823      	ldr	r3, [r4, #0]
 8009040:	0699      	lsls	r1, r3, #26
 8009042:	bf42      	ittt	mi
 8009044:	6833      	ldrmi	r3, [r6, #0]
 8009046:	3302      	addmi	r3, #2
 8009048:	6033      	strmi	r3, [r6, #0]
 800904a:	6825      	ldr	r5, [r4, #0]
 800904c:	f015 0506 	ands.w	r5, r5, #6
 8009050:	d106      	bne.n	8009060 <_printf_common+0x48>
 8009052:	f104 0a19 	add.w	sl, r4, #25
 8009056:	68e3      	ldr	r3, [r4, #12]
 8009058:	6832      	ldr	r2, [r6, #0]
 800905a:	1a9b      	subs	r3, r3, r2
 800905c:	42ab      	cmp	r3, r5
 800905e:	dc26      	bgt.n	80090ae <_printf_common+0x96>
 8009060:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009064:	6822      	ldr	r2, [r4, #0]
 8009066:	3b00      	subs	r3, #0
 8009068:	bf18      	it	ne
 800906a:	2301      	movne	r3, #1
 800906c:	0692      	lsls	r2, r2, #26
 800906e:	d42b      	bmi.n	80090c8 <_printf_common+0xb0>
 8009070:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009074:	4641      	mov	r1, r8
 8009076:	4638      	mov	r0, r7
 8009078:	47c8      	blx	r9
 800907a:	3001      	adds	r0, #1
 800907c:	d01e      	beq.n	80090bc <_printf_common+0xa4>
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	6922      	ldr	r2, [r4, #16]
 8009082:	f003 0306 	and.w	r3, r3, #6
 8009086:	2b04      	cmp	r3, #4
 8009088:	bf02      	ittt	eq
 800908a:	68e5      	ldreq	r5, [r4, #12]
 800908c:	6833      	ldreq	r3, [r6, #0]
 800908e:	1aed      	subeq	r5, r5, r3
 8009090:	68a3      	ldr	r3, [r4, #8]
 8009092:	bf0c      	ite	eq
 8009094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009098:	2500      	movne	r5, #0
 800909a:	4293      	cmp	r3, r2
 800909c:	bfc4      	itt	gt
 800909e:	1a9b      	subgt	r3, r3, r2
 80090a0:	18ed      	addgt	r5, r5, r3
 80090a2:	2600      	movs	r6, #0
 80090a4:	341a      	adds	r4, #26
 80090a6:	42b5      	cmp	r5, r6
 80090a8:	d11a      	bne.n	80090e0 <_printf_common+0xc8>
 80090aa:	2000      	movs	r0, #0
 80090ac:	e008      	b.n	80090c0 <_printf_common+0xa8>
 80090ae:	2301      	movs	r3, #1
 80090b0:	4652      	mov	r2, sl
 80090b2:	4641      	mov	r1, r8
 80090b4:	4638      	mov	r0, r7
 80090b6:	47c8      	blx	r9
 80090b8:	3001      	adds	r0, #1
 80090ba:	d103      	bne.n	80090c4 <_printf_common+0xac>
 80090bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c4:	3501      	adds	r5, #1
 80090c6:	e7c6      	b.n	8009056 <_printf_common+0x3e>
 80090c8:	18e1      	adds	r1, r4, r3
 80090ca:	1c5a      	adds	r2, r3, #1
 80090cc:	2030      	movs	r0, #48	@ 0x30
 80090ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80090d2:	4422      	add	r2, r4
 80090d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80090d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80090dc:	3302      	adds	r3, #2
 80090de:	e7c7      	b.n	8009070 <_printf_common+0x58>
 80090e0:	2301      	movs	r3, #1
 80090e2:	4622      	mov	r2, r4
 80090e4:	4641      	mov	r1, r8
 80090e6:	4638      	mov	r0, r7
 80090e8:	47c8      	blx	r9
 80090ea:	3001      	adds	r0, #1
 80090ec:	d0e6      	beq.n	80090bc <_printf_common+0xa4>
 80090ee:	3601      	adds	r6, #1
 80090f0:	e7d9      	b.n	80090a6 <_printf_common+0x8e>
	...

080090f4 <_printf_i>:
 80090f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090f8:	7e0f      	ldrb	r7, [r1, #24]
 80090fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80090fc:	2f78      	cmp	r7, #120	@ 0x78
 80090fe:	4691      	mov	r9, r2
 8009100:	4680      	mov	r8, r0
 8009102:	460c      	mov	r4, r1
 8009104:	469a      	mov	sl, r3
 8009106:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800910a:	d807      	bhi.n	800911c <_printf_i+0x28>
 800910c:	2f62      	cmp	r7, #98	@ 0x62
 800910e:	d80a      	bhi.n	8009126 <_printf_i+0x32>
 8009110:	2f00      	cmp	r7, #0
 8009112:	f000 80d1 	beq.w	80092b8 <_printf_i+0x1c4>
 8009116:	2f58      	cmp	r7, #88	@ 0x58
 8009118:	f000 80b8 	beq.w	800928c <_printf_i+0x198>
 800911c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009120:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009124:	e03a      	b.n	800919c <_printf_i+0xa8>
 8009126:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800912a:	2b15      	cmp	r3, #21
 800912c:	d8f6      	bhi.n	800911c <_printf_i+0x28>
 800912e:	a101      	add	r1, pc, #4	@ (adr r1, 8009134 <_printf_i+0x40>)
 8009130:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009134:	0800918d 	.word	0x0800918d
 8009138:	080091a1 	.word	0x080091a1
 800913c:	0800911d 	.word	0x0800911d
 8009140:	0800911d 	.word	0x0800911d
 8009144:	0800911d 	.word	0x0800911d
 8009148:	0800911d 	.word	0x0800911d
 800914c:	080091a1 	.word	0x080091a1
 8009150:	0800911d 	.word	0x0800911d
 8009154:	0800911d 	.word	0x0800911d
 8009158:	0800911d 	.word	0x0800911d
 800915c:	0800911d 	.word	0x0800911d
 8009160:	0800929f 	.word	0x0800929f
 8009164:	080091cb 	.word	0x080091cb
 8009168:	08009259 	.word	0x08009259
 800916c:	0800911d 	.word	0x0800911d
 8009170:	0800911d 	.word	0x0800911d
 8009174:	080092c1 	.word	0x080092c1
 8009178:	0800911d 	.word	0x0800911d
 800917c:	080091cb 	.word	0x080091cb
 8009180:	0800911d 	.word	0x0800911d
 8009184:	0800911d 	.word	0x0800911d
 8009188:	08009261 	.word	0x08009261
 800918c:	6833      	ldr	r3, [r6, #0]
 800918e:	1d1a      	adds	r2, r3, #4
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	6032      	str	r2, [r6, #0]
 8009194:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009198:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800919c:	2301      	movs	r3, #1
 800919e:	e09c      	b.n	80092da <_printf_i+0x1e6>
 80091a0:	6833      	ldr	r3, [r6, #0]
 80091a2:	6820      	ldr	r0, [r4, #0]
 80091a4:	1d19      	adds	r1, r3, #4
 80091a6:	6031      	str	r1, [r6, #0]
 80091a8:	0606      	lsls	r6, r0, #24
 80091aa:	d501      	bpl.n	80091b0 <_printf_i+0xbc>
 80091ac:	681d      	ldr	r5, [r3, #0]
 80091ae:	e003      	b.n	80091b8 <_printf_i+0xc4>
 80091b0:	0645      	lsls	r5, r0, #25
 80091b2:	d5fb      	bpl.n	80091ac <_printf_i+0xb8>
 80091b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80091b8:	2d00      	cmp	r5, #0
 80091ba:	da03      	bge.n	80091c4 <_printf_i+0xd0>
 80091bc:	232d      	movs	r3, #45	@ 0x2d
 80091be:	426d      	negs	r5, r5
 80091c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091c4:	4858      	ldr	r0, [pc, #352]	@ (8009328 <_printf_i+0x234>)
 80091c6:	230a      	movs	r3, #10
 80091c8:	e011      	b.n	80091ee <_printf_i+0xfa>
 80091ca:	6821      	ldr	r1, [r4, #0]
 80091cc:	6833      	ldr	r3, [r6, #0]
 80091ce:	0608      	lsls	r0, r1, #24
 80091d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80091d4:	d402      	bmi.n	80091dc <_printf_i+0xe8>
 80091d6:	0649      	lsls	r1, r1, #25
 80091d8:	bf48      	it	mi
 80091da:	b2ad      	uxthmi	r5, r5
 80091dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80091de:	4852      	ldr	r0, [pc, #328]	@ (8009328 <_printf_i+0x234>)
 80091e0:	6033      	str	r3, [r6, #0]
 80091e2:	bf14      	ite	ne
 80091e4:	230a      	movne	r3, #10
 80091e6:	2308      	moveq	r3, #8
 80091e8:	2100      	movs	r1, #0
 80091ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80091ee:	6866      	ldr	r6, [r4, #4]
 80091f0:	60a6      	str	r6, [r4, #8]
 80091f2:	2e00      	cmp	r6, #0
 80091f4:	db05      	blt.n	8009202 <_printf_i+0x10e>
 80091f6:	6821      	ldr	r1, [r4, #0]
 80091f8:	432e      	orrs	r6, r5
 80091fa:	f021 0104 	bic.w	r1, r1, #4
 80091fe:	6021      	str	r1, [r4, #0]
 8009200:	d04b      	beq.n	800929a <_printf_i+0x1a6>
 8009202:	4616      	mov	r6, r2
 8009204:	fbb5 f1f3 	udiv	r1, r5, r3
 8009208:	fb03 5711 	mls	r7, r3, r1, r5
 800920c:	5dc7      	ldrb	r7, [r0, r7]
 800920e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009212:	462f      	mov	r7, r5
 8009214:	42bb      	cmp	r3, r7
 8009216:	460d      	mov	r5, r1
 8009218:	d9f4      	bls.n	8009204 <_printf_i+0x110>
 800921a:	2b08      	cmp	r3, #8
 800921c:	d10b      	bne.n	8009236 <_printf_i+0x142>
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	07df      	lsls	r7, r3, #31
 8009222:	d508      	bpl.n	8009236 <_printf_i+0x142>
 8009224:	6923      	ldr	r3, [r4, #16]
 8009226:	6861      	ldr	r1, [r4, #4]
 8009228:	4299      	cmp	r1, r3
 800922a:	bfde      	ittt	le
 800922c:	2330      	movle	r3, #48	@ 0x30
 800922e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009232:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009236:	1b92      	subs	r2, r2, r6
 8009238:	6122      	str	r2, [r4, #16]
 800923a:	f8cd a000 	str.w	sl, [sp]
 800923e:	464b      	mov	r3, r9
 8009240:	aa03      	add	r2, sp, #12
 8009242:	4621      	mov	r1, r4
 8009244:	4640      	mov	r0, r8
 8009246:	f7ff fee7 	bl	8009018 <_printf_common>
 800924a:	3001      	adds	r0, #1
 800924c:	d14a      	bne.n	80092e4 <_printf_i+0x1f0>
 800924e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009252:	b004      	add	sp, #16
 8009254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	f043 0320 	orr.w	r3, r3, #32
 800925e:	6023      	str	r3, [r4, #0]
 8009260:	4832      	ldr	r0, [pc, #200]	@ (800932c <_printf_i+0x238>)
 8009262:	2778      	movs	r7, #120	@ 0x78
 8009264:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009268:	6823      	ldr	r3, [r4, #0]
 800926a:	6831      	ldr	r1, [r6, #0]
 800926c:	061f      	lsls	r7, r3, #24
 800926e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009272:	d402      	bmi.n	800927a <_printf_i+0x186>
 8009274:	065f      	lsls	r7, r3, #25
 8009276:	bf48      	it	mi
 8009278:	b2ad      	uxthmi	r5, r5
 800927a:	6031      	str	r1, [r6, #0]
 800927c:	07d9      	lsls	r1, r3, #31
 800927e:	bf44      	itt	mi
 8009280:	f043 0320 	orrmi.w	r3, r3, #32
 8009284:	6023      	strmi	r3, [r4, #0]
 8009286:	b11d      	cbz	r5, 8009290 <_printf_i+0x19c>
 8009288:	2310      	movs	r3, #16
 800928a:	e7ad      	b.n	80091e8 <_printf_i+0xf4>
 800928c:	4826      	ldr	r0, [pc, #152]	@ (8009328 <_printf_i+0x234>)
 800928e:	e7e9      	b.n	8009264 <_printf_i+0x170>
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	f023 0320 	bic.w	r3, r3, #32
 8009296:	6023      	str	r3, [r4, #0]
 8009298:	e7f6      	b.n	8009288 <_printf_i+0x194>
 800929a:	4616      	mov	r6, r2
 800929c:	e7bd      	b.n	800921a <_printf_i+0x126>
 800929e:	6833      	ldr	r3, [r6, #0]
 80092a0:	6825      	ldr	r5, [r4, #0]
 80092a2:	6961      	ldr	r1, [r4, #20]
 80092a4:	1d18      	adds	r0, r3, #4
 80092a6:	6030      	str	r0, [r6, #0]
 80092a8:	062e      	lsls	r6, r5, #24
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	d501      	bpl.n	80092b2 <_printf_i+0x1be>
 80092ae:	6019      	str	r1, [r3, #0]
 80092b0:	e002      	b.n	80092b8 <_printf_i+0x1c4>
 80092b2:	0668      	lsls	r0, r5, #25
 80092b4:	d5fb      	bpl.n	80092ae <_printf_i+0x1ba>
 80092b6:	8019      	strh	r1, [r3, #0]
 80092b8:	2300      	movs	r3, #0
 80092ba:	6123      	str	r3, [r4, #16]
 80092bc:	4616      	mov	r6, r2
 80092be:	e7bc      	b.n	800923a <_printf_i+0x146>
 80092c0:	6833      	ldr	r3, [r6, #0]
 80092c2:	1d1a      	adds	r2, r3, #4
 80092c4:	6032      	str	r2, [r6, #0]
 80092c6:	681e      	ldr	r6, [r3, #0]
 80092c8:	6862      	ldr	r2, [r4, #4]
 80092ca:	2100      	movs	r1, #0
 80092cc:	4630      	mov	r0, r6
 80092ce:	f7f6 ffa7 	bl	8000220 <memchr>
 80092d2:	b108      	cbz	r0, 80092d8 <_printf_i+0x1e4>
 80092d4:	1b80      	subs	r0, r0, r6
 80092d6:	6060      	str	r0, [r4, #4]
 80092d8:	6863      	ldr	r3, [r4, #4]
 80092da:	6123      	str	r3, [r4, #16]
 80092dc:	2300      	movs	r3, #0
 80092de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092e2:	e7aa      	b.n	800923a <_printf_i+0x146>
 80092e4:	6923      	ldr	r3, [r4, #16]
 80092e6:	4632      	mov	r2, r6
 80092e8:	4649      	mov	r1, r9
 80092ea:	4640      	mov	r0, r8
 80092ec:	47d0      	blx	sl
 80092ee:	3001      	adds	r0, #1
 80092f0:	d0ad      	beq.n	800924e <_printf_i+0x15a>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	079b      	lsls	r3, r3, #30
 80092f6:	d413      	bmi.n	8009320 <_printf_i+0x22c>
 80092f8:	68e0      	ldr	r0, [r4, #12]
 80092fa:	9b03      	ldr	r3, [sp, #12]
 80092fc:	4298      	cmp	r0, r3
 80092fe:	bfb8      	it	lt
 8009300:	4618      	movlt	r0, r3
 8009302:	e7a6      	b.n	8009252 <_printf_i+0x15e>
 8009304:	2301      	movs	r3, #1
 8009306:	4632      	mov	r2, r6
 8009308:	4649      	mov	r1, r9
 800930a:	4640      	mov	r0, r8
 800930c:	47d0      	blx	sl
 800930e:	3001      	adds	r0, #1
 8009310:	d09d      	beq.n	800924e <_printf_i+0x15a>
 8009312:	3501      	adds	r5, #1
 8009314:	68e3      	ldr	r3, [r4, #12]
 8009316:	9903      	ldr	r1, [sp, #12]
 8009318:	1a5b      	subs	r3, r3, r1
 800931a:	42ab      	cmp	r3, r5
 800931c:	dcf2      	bgt.n	8009304 <_printf_i+0x210>
 800931e:	e7eb      	b.n	80092f8 <_printf_i+0x204>
 8009320:	2500      	movs	r5, #0
 8009322:	f104 0619 	add.w	r6, r4, #25
 8009326:	e7f5      	b.n	8009314 <_printf_i+0x220>
 8009328:	0800a189 	.word	0x0800a189
 800932c:	0800a19a 	.word	0x0800a19a

08009330 <__sflush_r>:
 8009330:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009338:	0716      	lsls	r6, r2, #28
 800933a:	4605      	mov	r5, r0
 800933c:	460c      	mov	r4, r1
 800933e:	d454      	bmi.n	80093ea <__sflush_r+0xba>
 8009340:	684b      	ldr	r3, [r1, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	dc02      	bgt.n	800934c <__sflush_r+0x1c>
 8009346:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009348:	2b00      	cmp	r3, #0
 800934a:	dd48      	ble.n	80093de <__sflush_r+0xae>
 800934c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800934e:	2e00      	cmp	r6, #0
 8009350:	d045      	beq.n	80093de <__sflush_r+0xae>
 8009352:	2300      	movs	r3, #0
 8009354:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009358:	682f      	ldr	r7, [r5, #0]
 800935a:	6a21      	ldr	r1, [r4, #32]
 800935c:	602b      	str	r3, [r5, #0]
 800935e:	d030      	beq.n	80093c2 <__sflush_r+0x92>
 8009360:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	0759      	lsls	r1, r3, #29
 8009366:	d505      	bpl.n	8009374 <__sflush_r+0x44>
 8009368:	6863      	ldr	r3, [r4, #4]
 800936a:	1ad2      	subs	r2, r2, r3
 800936c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800936e:	b10b      	cbz	r3, 8009374 <__sflush_r+0x44>
 8009370:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009372:	1ad2      	subs	r2, r2, r3
 8009374:	2300      	movs	r3, #0
 8009376:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009378:	6a21      	ldr	r1, [r4, #32]
 800937a:	4628      	mov	r0, r5
 800937c:	47b0      	blx	r6
 800937e:	1c43      	adds	r3, r0, #1
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	d106      	bne.n	8009392 <__sflush_r+0x62>
 8009384:	6829      	ldr	r1, [r5, #0]
 8009386:	291d      	cmp	r1, #29
 8009388:	d82b      	bhi.n	80093e2 <__sflush_r+0xb2>
 800938a:	4a2a      	ldr	r2, [pc, #168]	@ (8009434 <__sflush_r+0x104>)
 800938c:	40ca      	lsrs	r2, r1
 800938e:	07d6      	lsls	r6, r2, #31
 8009390:	d527      	bpl.n	80093e2 <__sflush_r+0xb2>
 8009392:	2200      	movs	r2, #0
 8009394:	6062      	str	r2, [r4, #4]
 8009396:	04d9      	lsls	r1, r3, #19
 8009398:	6922      	ldr	r2, [r4, #16]
 800939a:	6022      	str	r2, [r4, #0]
 800939c:	d504      	bpl.n	80093a8 <__sflush_r+0x78>
 800939e:	1c42      	adds	r2, r0, #1
 80093a0:	d101      	bne.n	80093a6 <__sflush_r+0x76>
 80093a2:	682b      	ldr	r3, [r5, #0]
 80093a4:	b903      	cbnz	r3, 80093a8 <__sflush_r+0x78>
 80093a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80093a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093aa:	602f      	str	r7, [r5, #0]
 80093ac:	b1b9      	cbz	r1, 80093de <__sflush_r+0xae>
 80093ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093b2:	4299      	cmp	r1, r3
 80093b4:	d002      	beq.n	80093bc <__sflush_r+0x8c>
 80093b6:	4628      	mov	r0, r5
 80093b8:	f000 fa24 	bl	8009804 <_free_r>
 80093bc:	2300      	movs	r3, #0
 80093be:	6363      	str	r3, [r4, #52]	@ 0x34
 80093c0:	e00d      	b.n	80093de <__sflush_r+0xae>
 80093c2:	2301      	movs	r3, #1
 80093c4:	4628      	mov	r0, r5
 80093c6:	47b0      	blx	r6
 80093c8:	4602      	mov	r2, r0
 80093ca:	1c50      	adds	r0, r2, #1
 80093cc:	d1c9      	bne.n	8009362 <__sflush_r+0x32>
 80093ce:	682b      	ldr	r3, [r5, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d0c6      	beq.n	8009362 <__sflush_r+0x32>
 80093d4:	2b1d      	cmp	r3, #29
 80093d6:	d001      	beq.n	80093dc <__sflush_r+0xac>
 80093d8:	2b16      	cmp	r3, #22
 80093da:	d11e      	bne.n	800941a <__sflush_r+0xea>
 80093dc:	602f      	str	r7, [r5, #0]
 80093de:	2000      	movs	r0, #0
 80093e0:	e022      	b.n	8009428 <__sflush_r+0xf8>
 80093e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093e6:	b21b      	sxth	r3, r3
 80093e8:	e01b      	b.n	8009422 <__sflush_r+0xf2>
 80093ea:	690f      	ldr	r7, [r1, #16]
 80093ec:	2f00      	cmp	r7, #0
 80093ee:	d0f6      	beq.n	80093de <__sflush_r+0xae>
 80093f0:	0793      	lsls	r3, r2, #30
 80093f2:	680e      	ldr	r6, [r1, #0]
 80093f4:	bf08      	it	eq
 80093f6:	694b      	ldreq	r3, [r1, #20]
 80093f8:	600f      	str	r7, [r1, #0]
 80093fa:	bf18      	it	ne
 80093fc:	2300      	movne	r3, #0
 80093fe:	eba6 0807 	sub.w	r8, r6, r7
 8009402:	608b      	str	r3, [r1, #8]
 8009404:	f1b8 0f00 	cmp.w	r8, #0
 8009408:	dde9      	ble.n	80093de <__sflush_r+0xae>
 800940a:	6a21      	ldr	r1, [r4, #32]
 800940c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800940e:	4643      	mov	r3, r8
 8009410:	463a      	mov	r2, r7
 8009412:	4628      	mov	r0, r5
 8009414:	47b0      	blx	r6
 8009416:	2800      	cmp	r0, #0
 8009418:	dc08      	bgt.n	800942c <__sflush_r+0xfc>
 800941a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800941e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009422:	81a3      	strh	r3, [r4, #12]
 8009424:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800942c:	4407      	add	r7, r0
 800942e:	eba8 0800 	sub.w	r8, r8, r0
 8009432:	e7e7      	b.n	8009404 <__sflush_r+0xd4>
 8009434:	20400001 	.word	0x20400001

08009438 <_fflush_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	690b      	ldr	r3, [r1, #16]
 800943c:	4605      	mov	r5, r0
 800943e:	460c      	mov	r4, r1
 8009440:	b913      	cbnz	r3, 8009448 <_fflush_r+0x10>
 8009442:	2500      	movs	r5, #0
 8009444:	4628      	mov	r0, r5
 8009446:	bd38      	pop	{r3, r4, r5, pc}
 8009448:	b118      	cbz	r0, 8009452 <_fflush_r+0x1a>
 800944a:	6a03      	ldr	r3, [r0, #32]
 800944c:	b90b      	cbnz	r3, 8009452 <_fflush_r+0x1a>
 800944e:	f7ff fb25 	bl	8008a9c <__sinit>
 8009452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d0f3      	beq.n	8009442 <_fflush_r+0xa>
 800945a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800945c:	07d0      	lsls	r0, r2, #31
 800945e:	d404      	bmi.n	800946a <_fflush_r+0x32>
 8009460:	0599      	lsls	r1, r3, #22
 8009462:	d402      	bmi.n	800946a <_fflush_r+0x32>
 8009464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009466:	f7ff fbf2 	bl	8008c4e <__retarget_lock_acquire_recursive>
 800946a:	4628      	mov	r0, r5
 800946c:	4621      	mov	r1, r4
 800946e:	f7ff ff5f 	bl	8009330 <__sflush_r>
 8009472:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009474:	07da      	lsls	r2, r3, #31
 8009476:	4605      	mov	r5, r0
 8009478:	d4e4      	bmi.n	8009444 <_fflush_r+0xc>
 800947a:	89a3      	ldrh	r3, [r4, #12]
 800947c:	059b      	lsls	r3, r3, #22
 800947e:	d4e1      	bmi.n	8009444 <_fflush_r+0xc>
 8009480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009482:	f7ff fbe5 	bl	8008c50 <__retarget_lock_release_recursive>
 8009486:	e7dd      	b.n	8009444 <_fflush_r+0xc>

08009488 <__malloc_lock>:
 8009488:	4801      	ldr	r0, [pc, #4]	@ (8009490 <__malloc_lock+0x8>)
 800948a:	f7ff bbe0 	b.w	8008c4e <__retarget_lock_acquire_recursive>
 800948e:	bf00      	nop
 8009490:	20002a20 	.word	0x20002a20

08009494 <__malloc_unlock>:
 8009494:	4801      	ldr	r0, [pc, #4]	@ (800949c <__malloc_unlock+0x8>)
 8009496:	f7ff bbdb 	b.w	8008c50 <__retarget_lock_release_recursive>
 800949a:	bf00      	nop
 800949c:	20002a20 	.word	0x20002a20

080094a0 <__sread>:
 80094a0:	b510      	push	{r4, lr}
 80094a2:	460c      	mov	r4, r1
 80094a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a8:	f000 f956 	bl	8009758 <_read_r>
 80094ac:	2800      	cmp	r0, #0
 80094ae:	bfab      	itete	ge
 80094b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80094b2:	89a3      	ldrhlt	r3, [r4, #12]
 80094b4:	181b      	addge	r3, r3, r0
 80094b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80094ba:	bfac      	ite	ge
 80094bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80094be:	81a3      	strhlt	r3, [r4, #12]
 80094c0:	bd10      	pop	{r4, pc}

080094c2 <__swrite>:
 80094c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c6:	461f      	mov	r7, r3
 80094c8:	898b      	ldrh	r3, [r1, #12]
 80094ca:	05db      	lsls	r3, r3, #23
 80094cc:	4605      	mov	r5, r0
 80094ce:	460c      	mov	r4, r1
 80094d0:	4616      	mov	r6, r2
 80094d2:	d505      	bpl.n	80094e0 <__swrite+0x1e>
 80094d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d8:	2302      	movs	r3, #2
 80094da:	2200      	movs	r2, #0
 80094dc:	f000 f92a 	bl	8009734 <_lseek_r>
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80094ea:	81a3      	strh	r3, [r4, #12]
 80094ec:	4632      	mov	r2, r6
 80094ee:	463b      	mov	r3, r7
 80094f0:	4628      	mov	r0, r5
 80094f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094f6:	f000 b951 	b.w	800979c <_write_r>

080094fa <__sseek>:
 80094fa:	b510      	push	{r4, lr}
 80094fc:	460c      	mov	r4, r1
 80094fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009502:	f000 f917 	bl	8009734 <_lseek_r>
 8009506:	1c43      	adds	r3, r0, #1
 8009508:	89a3      	ldrh	r3, [r4, #12]
 800950a:	bf15      	itete	ne
 800950c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800950e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009512:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009516:	81a3      	strheq	r3, [r4, #12]
 8009518:	bf18      	it	ne
 800951a:	81a3      	strhne	r3, [r4, #12]
 800951c:	bd10      	pop	{r4, pc}

0800951e <__sclose>:
 800951e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009522:	f000 b94d 	b.w	80097c0 <_close_r>

08009526 <__swbuf_r>:
 8009526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009528:	460e      	mov	r6, r1
 800952a:	4614      	mov	r4, r2
 800952c:	4605      	mov	r5, r0
 800952e:	b118      	cbz	r0, 8009538 <__swbuf_r+0x12>
 8009530:	6a03      	ldr	r3, [r0, #32]
 8009532:	b90b      	cbnz	r3, 8009538 <__swbuf_r+0x12>
 8009534:	f7ff fab2 	bl	8008a9c <__sinit>
 8009538:	69a3      	ldr	r3, [r4, #24]
 800953a:	60a3      	str	r3, [r4, #8]
 800953c:	89a3      	ldrh	r3, [r4, #12]
 800953e:	071a      	lsls	r2, r3, #28
 8009540:	d501      	bpl.n	8009546 <__swbuf_r+0x20>
 8009542:	6923      	ldr	r3, [r4, #16]
 8009544:	b943      	cbnz	r3, 8009558 <__swbuf_r+0x32>
 8009546:	4621      	mov	r1, r4
 8009548:	4628      	mov	r0, r5
 800954a:	f000 f82b 	bl	80095a4 <__swsetup_r>
 800954e:	b118      	cbz	r0, 8009558 <__swbuf_r+0x32>
 8009550:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009554:	4638      	mov	r0, r7
 8009556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	6922      	ldr	r2, [r4, #16]
 800955c:	1a98      	subs	r0, r3, r2
 800955e:	6963      	ldr	r3, [r4, #20]
 8009560:	b2f6      	uxtb	r6, r6
 8009562:	4283      	cmp	r3, r0
 8009564:	4637      	mov	r7, r6
 8009566:	dc05      	bgt.n	8009574 <__swbuf_r+0x4e>
 8009568:	4621      	mov	r1, r4
 800956a:	4628      	mov	r0, r5
 800956c:	f7ff ff64 	bl	8009438 <_fflush_r>
 8009570:	2800      	cmp	r0, #0
 8009572:	d1ed      	bne.n	8009550 <__swbuf_r+0x2a>
 8009574:	68a3      	ldr	r3, [r4, #8]
 8009576:	3b01      	subs	r3, #1
 8009578:	60a3      	str	r3, [r4, #8]
 800957a:	6823      	ldr	r3, [r4, #0]
 800957c:	1c5a      	adds	r2, r3, #1
 800957e:	6022      	str	r2, [r4, #0]
 8009580:	701e      	strb	r6, [r3, #0]
 8009582:	6962      	ldr	r2, [r4, #20]
 8009584:	1c43      	adds	r3, r0, #1
 8009586:	429a      	cmp	r2, r3
 8009588:	d004      	beq.n	8009594 <__swbuf_r+0x6e>
 800958a:	89a3      	ldrh	r3, [r4, #12]
 800958c:	07db      	lsls	r3, r3, #31
 800958e:	d5e1      	bpl.n	8009554 <__swbuf_r+0x2e>
 8009590:	2e0a      	cmp	r6, #10
 8009592:	d1df      	bne.n	8009554 <__swbuf_r+0x2e>
 8009594:	4621      	mov	r1, r4
 8009596:	4628      	mov	r0, r5
 8009598:	f7ff ff4e 	bl	8009438 <_fflush_r>
 800959c:	2800      	cmp	r0, #0
 800959e:	d0d9      	beq.n	8009554 <__swbuf_r+0x2e>
 80095a0:	e7d6      	b.n	8009550 <__swbuf_r+0x2a>
	...

080095a4 <__swsetup_r>:
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	4b29      	ldr	r3, [pc, #164]	@ (800964c <__swsetup_r+0xa8>)
 80095a8:	4605      	mov	r5, r0
 80095aa:	6818      	ldr	r0, [r3, #0]
 80095ac:	460c      	mov	r4, r1
 80095ae:	b118      	cbz	r0, 80095b8 <__swsetup_r+0x14>
 80095b0:	6a03      	ldr	r3, [r0, #32]
 80095b2:	b90b      	cbnz	r3, 80095b8 <__swsetup_r+0x14>
 80095b4:	f7ff fa72 	bl	8008a9c <__sinit>
 80095b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095bc:	0719      	lsls	r1, r3, #28
 80095be:	d422      	bmi.n	8009606 <__swsetup_r+0x62>
 80095c0:	06da      	lsls	r2, r3, #27
 80095c2:	d407      	bmi.n	80095d4 <__swsetup_r+0x30>
 80095c4:	2209      	movs	r2, #9
 80095c6:	602a      	str	r2, [r5, #0]
 80095c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095cc:	81a3      	strh	r3, [r4, #12]
 80095ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095d2:	e033      	b.n	800963c <__swsetup_r+0x98>
 80095d4:	0758      	lsls	r0, r3, #29
 80095d6:	d512      	bpl.n	80095fe <__swsetup_r+0x5a>
 80095d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095da:	b141      	cbz	r1, 80095ee <__swsetup_r+0x4a>
 80095dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095e0:	4299      	cmp	r1, r3
 80095e2:	d002      	beq.n	80095ea <__swsetup_r+0x46>
 80095e4:	4628      	mov	r0, r5
 80095e6:	f000 f90d 	bl	8009804 <_free_r>
 80095ea:	2300      	movs	r3, #0
 80095ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80095ee:	89a3      	ldrh	r3, [r4, #12]
 80095f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80095f4:	81a3      	strh	r3, [r4, #12]
 80095f6:	2300      	movs	r3, #0
 80095f8:	6063      	str	r3, [r4, #4]
 80095fa:	6923      	ldr	r3, [r4, #16]
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	f043 0308 	orr.w	r3, r3, #8
 8009604:	81a3      	strh	r3, [r4, #12]
 8009606:	6923      	ldr	r3, [r4, #16]
 8009608:	b94b      	cbnz	r3, 800961e <__swsetup_r+0x7a>
 800960a:	89a3      	ldrh	r3, [r4, #12]
 800960c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009614:	d003      	beq.n	800961e <__swsetup_r+0x7a>
 8009616:	4621      	mov	r1, r4
 8009618:	4628      	mov	r0, r5
 800961a:	f000 f83f 	bl	800969c <__smakebuf_r>
 800961e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009622:	f013 0201 	ands.w	r2, r3, #1
 8009626:	d00a      	beq.n	800963e <__swsetup_r+0x9a>
 8009628:	2200      	movs	r2, #0
 800962a:	60a2      	str	r2, [r4, #8]
 800962c:	6962      	ldr	r2, [r4, #20]
 800962e:	4252      	negs	r2, r2
 8009630:	61a2      	str	r2, [r4, #24]
 8009632:	6922      	ldr	r2, [r4, #16]
 8009634:	b942      	cbnz	r2, 8009648 <__swsetup_r+0xa4>
 8009636:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800963a:	d1c5      	bne.n	80095c8 <__swsetup_r+0x24>
 800963c:	bd38      	pop	{r3, r4, r5, pc}
 800963e:	0799      	lsls	r1, r3, #30
 8009640:	bf58      	it	pl
 8009642:	6962      	ldrpl	r2, [r4, #20]
 8009644:	60a2      	str	r2, [r4, #8]
 8009646:	e7f4      	b.n	8009632 <__swsetup_r+0x8e>
 8009648:	2000      	movs	r0, #0
 800964a:	e7f7      	b.n	800963c <__swsetup_r+0x98>
 800964c:	20000018 	.word	0x20000018

08009650 <__swhatbuf_r>:
 8009650:	b570      	push	{r4, r5, r6, lr}
 8009652:	460c      	mov	r4, r1
 8009654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009658:	2900      	cmp	r1, #0
 800965a:	b096      	sub	sp, #88	@ 0x58
 800965c:	4615      	mov	r5, r2
 800965e:	461e      	mov	r6, r3
 8009660:	da0d      	bge.n	800967e <__swhatbuf_r+0x2e>
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009668:	f04f 0100 	mov.w	r1, #0
 800966c:	bf14      	ite	ne
 800966e:	2340      	movne	r3, #64	@ 0x40
 8009670:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009674:	2000      	movs	r0, #0
 8009676:	6031      	str	r1, [r6, #0]
 8009678:	602b      	str	r3, [r5, #0]
 800967a:	b016      	add	sp, #88	@ 0x58
 800967c:	bd70      	pop	{r4, r5, r6, pc}
 800967e:	466a      	mov	r2, sp
 8009680:	f000 f8ae 	bl	80097e0 <_fstat_r>
 8009684:	2800      	cmp	r0, #0
 8009686:	dbec      	blt.n	8009662 <__swhatbuf_r+0x12>
 8009688:	9901      	ldr	r1, [sp, #4]
 800968a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800968e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009692:	4259      	negs	r1, r3
 8009694:	4159      	adcs	r1, r3
 8009696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800969a:	e7eb      	b.n	8009674 <__swhatbuf_r+0x24>

0800969c <__smakebuf_r>:
 800969c:	898b      	ldrh	r3, [r1, #12]
 800969e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096a0:	079d      	lsls	r5, r3, #30
 80096a2:	4606      	mov	r6, r0
 80096a4:	460c      	mov	r4, r1
 80096a6:	d507      	bpl.n	80096b8 <__smakebuf_r+0x1c>
 80096a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	6123      	str	r3, [r4, #16]
 80096b0:	2301      	movs	r3, #1
 80096b2:	6163      	str	r3, [r4, #20]
 80096b4:	b003      	add	sp, #12
 80096b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096b8:	ab01      	add	r3, sp, #4
 80096ba:	466a      	mov	r2, sp
 80096bc:	f7ff ffc8 	bl	8009650 <__swhatbuf_r>
 80096c0:	9f00      	ldr	r7, [sp, #0]
 80096c2:	4605      	mov	r5, r0
 80096c4:	4639      	mov	r1, r7
 80096c6:	4630      	mov	r0, r6
 80096c8:	f7ff fc26 	bl	8008f18 <_malloc_r>
 80096cc:	b948      	cbnz	r0, 80096e2 <__smakebuf_r+0x46>
 80096ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096d2:	059a      	lsls	r2, r3, #22
 80096d4:	d4ee      	bmi.n	80096b4 <__smakebuf_r+0x18>
 80096d6:	f023 0303 	bic.w	r3, r3, #3
 80096da:	f043 0302 	orr.w	r3, r3, #2
 80096de:	81a3      	strh	r3, [r4, #12]
 80096e0:	e7e2      	b.n	80096a8 <__smakebuf_r+0xc>
 80096e2:	89a3      	ldrh	r3, [r4, #12]
 80096e4:	6020      	str	r0, [r4, #0]
 80096e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096ea:	81a3      	strh	r3, [r4, #12]
 80096ec:	9b01      	ldr	r3, [sp, #4]
 80096ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096f2:	b15b      	cbz	r3, 800970c <__smakebuf_r+0x70>
 80096f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096f8:	4630      	mov	r0, r6
 80096fa:	f000 f80b 	bl	8009714 <_isatty_r>
 80096fe:	b128      	cbz	r0, 800970c <__smakebuf_r+0x70>
 8009700:	89a3      	ldrh	r3, [r4, #12]
 8009702:	f023 0303 	bic.w	r3, r3, #3
 8009706:	f043 0301 	orr.w	r3, r3, #1
 800970a:	81a3      	strh	r3, [r4, #12]
 800970c:	89a3      	ldrh	r3, [r4, #12]
 800970e:	431d      	orrs	r5, r3
 8009710:	81a5      	strh	r5, [r4, #12]
 8009712:	e7cf      	b.n	80096b4 <__smakebuf_r+0x18>

08009714 <_isatty_r>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	4d06      	ldr	r5, [pc, #24]	@ (8009730 <_isatty_r+0x1c>)
 8009718:	2300      	movs	r3, #0
 800971a:	4604      	mov	r4, r0
 800971c:	4608      	mov	r0, r1
 800971e:	602b      	str	r3, [r5, #0]
 8009720:	f7f7 fcc2 	bl	80010a8 <_isatty>
 8009724:	1c43      	adds	r3, r0, #1
 8009726:	d102      	bne.n	800972e <_isatty_r+0x1a>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	b103      	cbz	r3, 800972e <_isatty_r+0x1a>
 800972c:	6023      	str	r3, [r4, #0]
 800972e:	bd38      	pop	{r3, r4, r5, pc}
 8009730:	20002a2c 	.word	0x20002a2c

08009734 <_lseek_r>:
 8009734:	b538      	push	{r3, r4, r5, lr}
 8009736:	4d07      	ldr	r5, [pc, #28]	@ (8009754 <_lseek_r+0x20>)
 8009738:	4604      	mov	r4, r0
 800973a:	4608      	mov	r0, r1
 800973c:	4611      	mov	r1, r2
 800973e:	2200      	movs	r2, #0
 8009740:	602a      	str	r2, [r5, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	f7f7 fcbb 	bl	80010be <_lseek>
 8009748:	1c43      	adds	r3, r0, #1
 800974a:	d102      	bne.n	8009752 <_lseek_r+0x1e>
 800974c:	682b      	ldr	r3, [r5, #0]
 800974e:	b103      	cbz	r3, 8009752 <_lseek_r+0x1e>
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	20002a2c 	.word	0x20002a2c

08009758 <_read_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4d07      	ldr	r5, [pc, #28]	@ (8009778 <_read_r+0x20>)
 800975c:	4604      	mov	r4, r0
 800975e:	4608      	mov	r0, r1
 8009760:	4611      	mov	r1, r2
 8009762:	2200      	movs	r2, #0
 8009764:	602a      	str	r2, [r5, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	f7f7 fc65 	bl	8001036 <_read>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_read_r+0x1e>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_read_r+0x1e>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	20002a2c 	.word	0x20002a2c

0800977c <_sbrk_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4d06      	ldr	r5, [pc, #24]	@ (8009798 <_sbrk_r+0x1c>)
 8009780:	2300      	movs	r3, #0
 8009782:	4604      	mov	r4, r0
 8009784:	4608      	mov	r0, r1
 8009786:	602b      	str	r3, [r5, #0]
 8009788:	f7f7 fca6 	bl	80010d8 <_sbrk>
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	d102      	bne.n	8009796 <_sbrk_r+0x1a>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	b103      	cbz	r3, 8009796 <_sbrk_r+0x1a>
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	bd38      	pop	{r3, r4, r5, pc}
 8009798:	20002a2c 	.word	0x20002a2c

0800979c <_write_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4d07      	ldr	r5, [pc, #28]	@ (80097bc <_write_r+0x20>)
 80097a0:	4604      	mov	r4, r0
 80097a2:	4608      	mov	r0, r1
 80097a4:	4611      	mov	r1, r2
 80097a6:	2200      	movs	r2, #0
 80097a8:	602a      	str	r2, [r5, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	f7f6 ff1e 	bl	80005ec <_write>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d102      	bne.n	80097ba <_write_r+0x1e>
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	b103      	cbz	r3, 80097ba <_write_r+0x1e>
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	20002a2c 	.word	0x20002a2c

080097c0 <_close_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4d06      	ldr	r5, [pc, #24]	@ (80097dc <_close_r+0x1c>)
 80097c4:	2300      	movs	r3, #0
 80097c6:	4604      	mov	r4, r0
 80097c8:	4608      	mov	r0, r1
 80097ca:	602b      	str	r3, [r5, #0]
 80097cc:	f7f7 fc50 	bl	8001070 <_close>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	d102      	bne.n	80097da <_close_r+0x1a>
 80097d4:	682b      	ldr	r3, [r5, #0]
 80097d6:	b103      	cbz	r3, 80097da <_close_r+0x1a>
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	bd38      	pop	{r3, r4, r5, pc}
 80097dc:	20002a2c 	.word	0x20002a2c

080097e0 <_fstat_r>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	4d07      	ldr	r5, [pc, #28]	@ (8009800 <_fstat_r+0x20>)
 80097e4:	2300      	movs	r3, #0
 80097e6:	4604      	mov	r4, r0
 80097e8:	4608      	mov	r0, r1
 80097ea:	4611      	mov	r1, r2
 80097ec:	602b      	str	r3, [r5, #0]
 80097ee:	f7f7 fc4b 	bl	8001088 <_fstat>
 80097f2:	1c43      	adds	r3, r0, #1
 80097f4:	d102      	bne.n	80097fc <_fstat_r+0x1c>
 80097f6:	682b      	ldr	r3, [r5, #0]
 80097f8:	b103      	cbz	r3, 80097fc <_fstat_r+0x1c>
 80097fa:	6023      	str	r3, [r4, #0]
 80097fc:	bd38      	pop	{r3, r4, r5, pc}
 80097fe:	bf00      	nop
 8009800:	20002a2c 	.word	0x20002a2c

08009804 <_free_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	4605      	mov	r5, r0
 8009808:	2900      	cmp	r1, #0
 800980a:	d041      	beq.n	8009890 <_free_r+0x8c>
 800980c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009810:	1f0c      	subs	r4, r1, #4
 8009812:	2b00      	cmp	r3, #0
 8009814:	bfb8      	it	lt
 8009816:	18e4      	addlt	r4, r4, r3
 8009818:	f7ff fe36 	bl	8009488 <__malloc_lock>
 800981c:	4a1d      	ldr	r2, [pc, #116]	@ (8009894 <_free_r+0x90>)
 800981e:	6813      	ldr	r3, [r2, #0]
 8009820:	b933      	cbnz	r3, 8009830 <_free_r+0x2c>
 8009822:	6063      	str	r3, [r4, #4]
 8009824:	6014      	str	r4, [r2, #0]
 8009826:	4628      	mov	r0, r5
 8009828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800982c:	f7ff be32 	b.w	8009494 <__malloc_unlock>
 8009830:	42a3      	cmp	r3, r4
 8009832:	d908      	bls.n	8009846 <_free_r+0x42>
 8009834:	6820      	ldr	r0, [r4, #0]
 8009836:	1821      	adds	r1, r4, r0
 8009838:	428b      	cmp	r3, r1
 800983a:	bf01      	itttt	eq
 800983c:	6819      	ldreq	r1, [r3, #0]
 800983e:	685b      	ldreq	r3, [r3, #4]
 8009840:	1809      	addeq	r1, r1, r0
 8009842:	6021      	streq	r1, [r4, #0]
 8009844:	e7ed      	b.n	8009822 <_free_r+0x1e>
 8009846:	461a      	mov	r2, r3
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	b10b      	cbz	r3, 8009850 <_free_r+0x4c>
 800984c:	42a3      	cmp	r3, r4
 800984e:	d9fa      	bls.n	8009846 <_free_r+0x42>
 8009850:	6811      	ldr	r1, [r2, #0]
 8009852:	1850      	adds	r0, r2, r1
 8009854:	42a0      	cmp	r0, r4
 8009856:	d10b      	bne.n	8009870 <_free_r+0x6c>
 8009858:	6820      	ldr	r0, [r4, #0]
 800985a:	4401      	add	r1, r0
 800985c:	1850      	adds	r0, r2, r1
 800985e:	4283      	cmp	r3, r0
 8009860:	6011      	str	r1, [r2, #0]
 8009862:	d1e0      	bne.n	8009826 <_free_r+0x22>
 8009864:	6818      	ldr	r0, [r3, #0]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	6053      	str	r3, [r2, #4]
 800986a:	4408      	add	r0, r1
 800986c:	6010      	str	r0, [r2, #0]
 800986e:	e7da      	b.n	8009826 <_free_r+0x22>
 8009870:	d902      	bls.n	8009878 <_free_r+0x74>
 8009872:	230c      	movs	r3, #12
 8009874:	602b      	str	r3, [r5, #0]
 8009876:	e7d6      	b.n	8009826 <_free_r+0x22>
 8009878:	6820      	ldr	r0, [r4, #0]
 800987a:	1821      	adds	r1, r4, r0
 800987c:	428b      	cmp	r3, r1
 800987e:	bf04      	itt	eq
 8009880:	6819      	ldreq	r1, [r3, #0]
 8009882:	685b      	ldreq	r3, [r3, #4]
 8009884:	6063      	str	r3, [r4, #4]
 8009886:	bf04      	itt	eq
 8009888:	1809      	addeq	r1, r1, r0
 800988a:	6021      	streq	r1, [r4, #0]
 800988c:	6054      	str	r4, [r2, #4]
 800988e:	e7ca      	b.n	8009826 <_free_r+0x22>
 8009890:	bd38      	pop	{r3, r4, r5, pc}
 8009892:	bf00      	nop
 8009894:	20002a28 	.word	0x20002a28

08009898 <_init>:
 8009898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989a:	bf00      	nop
 800989c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800989e:	bc08      	pop	{r3}
 80098a0:	469e      	mov	lr, r3
 80098a2:	4770      	bx	lr

080098a4 <_fini>:
 80098a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a6:	bf00      	nop
 80098a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098aa:	bc08      	pop	{r3}
 80098ac:	469e      	mov	lr, r3
 80098ae:	4770      	bx	lr
