
cmr-sdcard-fatfs2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a728  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000095c  0800a908  0800a908  0000b908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b264  0800b264  0000d068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b264  0800b264  0000c264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b26c  0800b26c  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b26c  0800b26c  0000c26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b270  0800b270  0000c270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800b274  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b8  20000068  0800b2dc  0000d068  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001a20  0800b2dc  0000da20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015843  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d4  00000000  00000000  000228db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  00025db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e00  00000000  00000000  00027010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002501a  00000000  00000000  00027e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191e1  00000000  00000000  0004ce2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d10bc  00000000  00000000  0006600b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001370c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000555c  00000000  00000000  0013710c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0013c668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a8f0 	.word	0x0800a8f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800a8f0 	.word	0x0800a8f0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <sd_benchmark_write>:

#define TEST_SIZE 512000*2 // 1M Test File
#define BUF_SIZE 8192


uint32_t sd_benchmark_write(const char *filename, uint32_t size_bytes) {
 800061c:	b580      	push	{r7, lr}
 800061e:	f5ad 5d41 	sub.w	sp, sp, #12352	@ 0x3040
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800062a:	f843 0c4c 	str.w	r0, [r3, #-76]
 800062e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000632:	f843 1c50 	str.w	r1, [r3, #-80]
    FIL file;
    UINT written;
    uint8_t buffer[BUF_SIZE];
    memset(buffer, 0xAA, sizeof(buffer));
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	3b08      	subs	r3, #8
 800063c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000640:	21aa      	movs	r1, #170	@ 0xaa
 8000642:	4618      	mov	r0, r3
 8000644:	f009 f946 	bl	80098d4 <memset>

    FRESULT res = f_open(&file, filename, FA_CREATE_ALWAYS | FA_WRITE);
 8000648:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800064c:	4619      	mov	r1, r3
 800064e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000652:	f103 0310 	add.w	r3, r3, #16
 8000656:	3b04      	subs	r3, #4
 8000658:	220a      	movs	r2, #10
 800065a:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 800065e:	4618      	mov	r0, r3
 8000660:	f007 ffc0 	bl	80085e4 <f_open>
 8000664:	4603      	mov	r3, r0
 8000666:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 800066a:	f102 020b 	add.w	r2, r2, #11
 800066e:	7013      	strb	r3, [r2, #0]
    if (res != FR_OK) {
 8000670:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8000674:	f103 030b 	add.w	r3, r3, #11
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d00a      	beq.n	8000694 <sd_benchmark_write+0x78>
        printf("f_open failed: %d\r\n", res);
 800067e:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8000682:	f103 030b 	add.w	r3, r3, #11
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4619      	mov	r1, r3
 800068a:	484b      	ldr	r0, [pc, #300]	@ (80007b8 <sd_benchmark_write+0x19c>)
 800068c:	f009 f8b2 	bl	80097f4 <iprintf>
        return 0;
 8000690:	2300      	movs	r3, #0
 8000692:	e08a      	b.n	80007aa <sd_benchmark_write+0x18e>
    }

    uint32_t start = HAL_GetTick();
 8000694:	f001 f8c6 	bl	8001824 <HAL_GetTick>
 8000698:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 800069c:	f103 0304 	add.w	r3, r3, #4
 80006a0:	6018      	str	r0, [r3, #0]
    uint32_t remaining = size_bytes;
 80006a2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80006a6:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80006aa:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 80006ae:	f102 020c 	add.w	r2, r2, #12
 80006b2:	6013      	str	r3, [r2, #0]

    while (remaining > 0) {
 80006b4:	e04b      	b.n	800074e <sd_benchmark_write+0x132>
        UINT to_write = (remaining > sizeof(buffer)) ? sizeof(buffer) : remaining;
 80006b6:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80006ba:	f103 030c 	add.w	r3, r3, #12
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006c4:	bf28      	it	cs
 80006c6:	f44f 5300 	movcs.w	r3, #8192	@ 0x2000
 80006ca:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 80006ce:	6013      	str	r3, [r2, #0]
        res = f_write(&file, buffer, to_write, &written);
 80006d0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80006d4:	f103 0310 	add.w	r3, r3, #16
 80006d8:	3b08      	subs	r3, #8
 80006da:	f107 0110 	add.w	r1, r7, #16
 80006de:	3908      	subs	r1, #8
 80006e0:	f507 5000 	add.w	r0, r7, #8192	@ 0x2000
 80006e4:	f100 0010 	add.w	r0, r0, #16
 80006e8:	3804      	subs	r0, #4
 80006ea:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 80006ee:	6812      	ldr	r2, [r2, #0]
 80006f0:	f008 fa9f 	bl	8008c32 <f_write>
 80006f4:	4603      	mov	r3, r0
 80006f6:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 80006fa:	f102 020b 	add.w	r2, r2, #11
 80006fe:	7013      	strb	r3, [r2, #0]
        if (res != FR_OK || written != to_write) {
 8000700:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8000704:	f103 030b 	add.w	r3, r3, #11
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d10a      	bne.n	8000724 <sd_benchmark_write+0x108>
 800070e:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8000712:	f103 0310 	add.w	r3, r3, #16
 8000716:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800071a:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 800071e:	6812      	ldr	r2, [r2, #0]
 8000720:	429a      	cmp	r2, r3
 8000722:	d003      	beq.n	800072c <sd_benchmark_write+0x110>
            printf("f_write error\r\n");
 8000724:	4825      	ldr	r0, [pc, #148]	@ (80007bc <sd_benchmark_write+0x1a0>)
 8000726:	f009 f8cd 	bl	80098c4 <puts>
            break;
 800072a:	e017      	b.n	800075c <sd_benchmark_write+0x140>
        }
        remaining -= written;
 800072c:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8000730:	f103 0310 	add.w	r3, r3, #16
 8000734:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8000738:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 800073c:	f102 020c 	add.w	r2, r2, #12
 8000740:	6812      	ldr	r2, [r2, #0]
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8000748:	f102 020c 	add.w	r2, r2, #12
 800074c:	6013      	str	r3, [r2, #0]
    while (remaining > 0) {
 800074e:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8000752:	f103 030c 	add.w	r3, r3, #12
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1ac      	bne.n	80006b6 <sd_benchmark_write+0x9a>
    }

    f_close(&file);
 800075c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000760:	f103 0310 	add.w	r3, r3, #16
 8000764:	3b04      	subs	r3, #4
 8000766:	4618      	mov	r0, r3
 8000768:	f008 fc75 	bl	8009056 <f_close>
    uint32_t elapsed = HAL_GetTick() - start;
 800076c:	f001 f85a 	bl	8001824 <HAL_GetTick>
 8000770:	4602      	mov	r2, r0
 8000772:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8000776:	f103 0304 	add.w	r3, r3, #4
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000782:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8000786:	6013      	str	r3, [r2, #0]
    printf("Write %lu bytes in %lu ms\r\n", size_bytes, elapsed);
 8000788:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800078c:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000790:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8000794:	6812      	ldr	r2, [r2, #0]
 8000796:	f853 1c50 	ldr.w	r1, [r3, #-80]
 800079a:	4809      	ldr	r0, [pc, #36]	@ (80007c0 <sd_benchmark_write+0x1a4>)
 800079c:	f009 f82a 	bl	80097f4 <iprintf>
    return elapsed;
 80007a0:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80007a4:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80007a8:	681b      	ldr	r3, [r3, #0]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	f507 5741 	add.w	r7, r7, #12352	@ 0x3040
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	0800a908 	.word	0x0800a908
 80007bc:	0800a91c 	.word	0x0800a91c
 80007c0:	0800a92c 	.word	0x0800a92c

080007c4 <sd_benchmark_read>:

uint32_t sd_benchmark_read(const char *filename, uint32_t size_bytes) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	f5ad 5d41 	sub.w	sp, sp, #12352	@ 0x3040
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80007d2:	f843 0c4c 	str.w	r0, [r3, #-76]
 80007d6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80007da:	f843 1c50 	str.w	r1, [r3, #-80]
    FIL file;
    UINT read;
    uint8_t buffer[BUF_SIZE];

    FRESULT res = f_open(&file, filename, FA_READ);
 80007de:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80007e2:	4619      	mov	r1, r3
 80007e4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80007e8:	f103 0310 	add.w	r3, r3, #16
 80007ec:	3b04      	subs	r3, #4
 80007ee:	2201      	movs	r2, #1
 80007f0:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f007 fef5 	bl	80085e4 <f_open>
 80007fa:	4603      	mov	r3, r0
 80007fc:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8000800:	f102 020b 	add.w	r2, r2, #11
 8000804:	7013      	strb	r3, [r2, #0]
    if (res != FR_OK) {
 8000806:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 800080a:	f103 030b 	add.w	r3, r3, #11
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d00a      	beq.n	800082a <sd_benchmark_read+0x66>
        printf("f_open failed: %d\r\n", res);
 8000814:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8000818:	f103 030b 	add.w	r3, r3, #11
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4619      	mov	r1, r3
 8000820:	484a      	ldr	r0, [pc, #296]	@ (800094c <sd_benchmark_read+0x188>)
 8000822:	f008 ffe7 	bl	80097f4 <iprintf>
        return 0;
 8000826:	2300      	movs	r3, #0
 8000828:	e08a      	b.n	8000940 <sd_benchmark_read+0x17c>
    }

    uint32_t start = HAL_GetTick();
 800082a:	f000 fffb 	bl	8001824 <HAL_GetTick>
 800082e:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8000832:	f103 0304 	add.w	r3, r3, #4
 8000836:	6018      	str	r0, [r3, #0]
    uint32_t remaining = size_bytes;
 8000838:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800083c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8000840:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8000844:	f102 020c 	add.w	r2, r2, #12
 8000848:	6013      	str	r3, [r2, #0]

    while (remaining > 0) {
 800084a:	e04b      	b.n	80008e4 <sd_benchmark_read+0x120>
        UINT to_read = (remaining > sizeof(buffer)) ? sizeof(buffer) : remaining;
 800084c:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8000850:	f103 030c 	add.w	r3, r3, #12
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800085a:	bf28      	it	cs
 800085c:	f44f 5300 	movcs.w	r3, #8192	@ 0x2000
 8000860:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8000864:	6013      	str	r3, [r2, #0]
        res = f_read(&file, buffer, to_read, &read);
 8000866:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800086a:	f103 0310 	add.w	r3, r3, #16
 800086e:	3b08      	subs	r3, #8
 8000870:	f107 0110 	add.w	r1, r7, #16
 8000874:	3908      	subs	r1, #8
 8000876:	f507 5000 	add.w	r0, r7, #8192	@ 0x2000
 800087a:	f100 0010 	add.w	r0, r0, #16
 800087e:	3804      	subs	r0, #4
 8000880:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8000884:	6812      	ldr	r2, [r2, #0]
 8000886:	f008 f875 	bl	8008974 <f_read>
 800088a:	4603      	mov	r3, r0
 800088c:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 8000890:	f102 020b 	add.w	r2, r2, #11
 8000894:	7013      	strb	r3, [r2, #0]
        if (res != FR_OK || read != to_read) {
 8000896:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 800089a:	f103 030b 	add.w	r3, r3, #11
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10a      	bne.n	80008ba <sd_benchmark_read+0xf6>
 80008a4:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 80008a8:	f103 0310 	add.w	r3, r3, #16
 80008ac:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80008b0:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 80008b4:	6812      	ldr	r2, [r2, #0]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d003      	beq.n	80008c2 <sd_benchmark_read+0xfe>
            printf("f_read error\r\n");
 80008ba:	4825      	ldr	r0, [pc, #148]	@ (8000950 <sd_benchmark_read+0x18c>)
 80008bc:	f009 f802 	bl	80098c4 <puts>
            break;
 80008c0:	e017      	b.n	80008f2 <sd_benchmark_read+0x12e>
        }
        remaining -= read;
 80008c2:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 80008c6:	f103 0310 	add.w	r3, r3, #16
 80008ca:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80008ce:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 80008d2:	f102 020c 	add.w	r2, r2, #12
 80008d6:	6812      	ldr	r2, [r2, #0]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	f507 5241 	add.w	r2, r7, #12352	@ 0x3040
 80008de:	f102 020c 	add.w	r2, r2, #12
 80008e2:	6013      	str	r3, [r2, #0]
    while (remaining > 0) {
 80008e4:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 80008e8:	f103 030c 	add.w	r3, r3, #12
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1ac      	bne.n	800084c <sd_benchmark_read+0x88>
    }

    f_close(&file);
 80008f2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80008f6:	f103 0310 	add.w	r3, r3, #16
 80008fa:	3b04      	subs	r3, #4
 80008fc:	4618      	mov	r0, r3
 80008fe:	f008 fbaa 	bl	8009056 <f_close>
    uint32_t elapsed = HAL_GetTick() - start;
 8000902:	f000 ff8f 	bl	8001824 <HAL_GetTick>
 8000906:	4602      	mov	r2, r0
 8000908:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 800090c:	f103 0304 	add.w	r3, r3, #4
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000918:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 800091c:	6013      	str	r3, [r2, #0]
    printf("Read %lu bytes in %lu ms\r\n", size_bytes, elapsed);
 800091e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000922:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000926:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 800092a:	6812      	ldr	r2, [r2, #0]
 800092c:	f853 1c50 	ldr.w	r1, [r3, #-80]
 8000930:	4808      	ldr	r0, [pc, #32]	@ (8000954 <sd_benchmark_read+0x190>)
 8000932:	f008 ff5f 	bl	80097f4 <iprintf>
    return elapsed;
 8000936:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 800093a:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	f507 5741 	add.w	r7, r7, #12352	@ 0x3040
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	0800a908 	.word	0x0800a908
 8000950:	0800a948 	.word	0x0800a948
 8000954:	0800a958 	.word	0x0800a958

08000958 <sd_benchmark>:

void sd_benchmark(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
    if (sd_mount() == FR_OK) {
 800095e:	f000 f86d 	bl	8000a3c <sd_mount>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d126      	bne.n	80009b6 <sd_benchmark+0x5e>
        printf("Starting Benchmark Test\r\n");
 8000968:	4815      	ldr	r0, [pc, #84]	@ (80009c0 <sd_benchmark+0x68>)
 800096a:	f008 ffab 	bl	80098c4 <puts>
        uint32_t w = sd_benchmark_write("bench.bin", TEST_SIZE);
 800096e:	f44f 217a 	mov.w	r1, #1024000	@ 0xfa000
 8000972:	4814      	ldr	r0, [pc, #80]	@ (80009c4 <sd_benchmark+0x6c>)
 8000974:	f7ff fe52 	bl	800061c <sd_benchmark_write>
 8000978:	6078      	str	r0, [r7, #4]
        uint32_t r = sd_benchmark_read("bench.bin", TEST_SIZE);
 800097a:	f44f 217a 	mov.w	r1, #1024000	@ 0xfa000
 800097e:	4811      	ldr	r0, [pc, #68]	@ (80009c4 <sd_benchmark+0x6c>)
 8000980:	f7ff ff20 	bl	80007c4 <sd_benchmark_read>
 8000984:	6038      	str	r0, [r7, #0]

        if (w > 0) printf("Write speed: %lu KB/s\r\n", (TEST_SIZE / 1024 * 1000) / w);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d007      	beq.n	800099c <sd_benchmark+0x44>
 800098c:	4a0e      	ldr	r2, [pc, #56]	@ (80009c8 <sd_benchmark+0x70>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	fbb2 f3f3 	udiv	r3, r2, r3
 8000994:	4619      	mov	r1, r3
 8000996:	480d      	ldr	r0, [pc, #52]	@ (80009cc <sd_benchmark+0x74>)
 8000998:	f008 ff2c 	bl	80097f4 <iprintf>
        if (r > 0) printf("Read  speed: %lu KB/s\r\n", (TEST_SIZE / 1024 * 1000) / r);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d007      	beq.n	80009b2 <sd_benchmark+0x5a>
 80009a2:	4a09      	ldr	r2, [pc, #36]	@ (80009c8 <sd_benchmark+0x70>)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009aa:	4619      	mov	r1, r3
 80009ac:	4808      	ldr	r0, [pc, #32]	@ (80009d0 <sd_benchmark+0x78>)
 80009ae:	f008 ff21 	bl	80097f4 <iprintf>

        sd_unmount();
 80009b2:	f000 f8a3 	bl	8000afc <sd_unmount>
    }
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	0800a974 	.word	0x0800a974
 80009c4:	0800a990 	.word	0x0800a990
 80009c8:	000f4240 	.word	0x000f4240
 80009cc:	0800a99c 	.word	0x0800a99c
 80009d0:	0800a9b4 	.word	0x0800a9b4

080009d4 <sd_get_space_kb>:

extern char SDPath[4];
FATFS fs;
BSP_SD_CardInfo myCardInfo;

int sd_get_space_kb(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0
	FATFS *pfs;
	DWORD fre_clust, tot_sect, fre_sect, total_kb, free_kb;
	FRESULT res = f_getfree(SDPath, &fre_clust, &pfs);
 80009da:	f107 0208 	add.w	r2, r7, #8
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	4619      	mov	r1, r3
 80009e2:	4814      	ldr	r0, [pc, #80]	@ (8000a34 <sd_get_space_kb+0x60>)
 80009e4:	f008 fc37 	bl	8009256 <f_getfree>
 80009e8:	4603      	mov	r3, r0
 80009ea:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 80009ec:	7ffb      	ldrb	r3, [r7, #31]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <sd_get_space_kb+0x22>
 80009f2:	7ffb      	ldrb	r3, [r7, #31]
 80009f4:	e01a      	b.n	8000a2c <sd_get_space_kb+0x58>

	tot_sect = (pfs->n_fatent - 2) * pfs->csize;
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	3b02      	subs	r3, #2
 80009fc:	68ba      	ldr	r2, [r7, #8]
 80009fe:	8952      	ldrh	r2, [r2, #10]
 8000a00:	fb02 f303 	mul.w	r3, r2, r3
 8000a04:	61bb      	str	r3, [r7, #24]
	fre_sect = fre_clust * pfs->csize;
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	895b      	ldrh	r3, [r3, #10]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	fb02 f303 	mul.w	r3, r2, r3
 8000a12:	617b      	str	r3, [r7, #20]
	total_kb = tot_sect / 2;
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	085b      	lsrs	r3, r3, #1
 8000a18:	613b      	str	r3, [r7, #16]
	free_kb = fre_sect / 2;
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	085b      	lsrs	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
	printf("Total: %lu KB, Free: %lu KB\r\n", total_kb, free_kb);
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	6939      	ldr	r1, [r7, #16]
 8000a24:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <sd_get_space_kb+0x64>)
 8000a26:	f008 fee5 	bl	80097f4 <iprintf>
	return FR_OK;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3720      	adds	r7, #32
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000169c 	.word	0x2000169c
 8000a38:	0800a9cc 	.word	0x0800a9cc

08000a3c <sd_mount>:

int sd_mount(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
	FRESULT res;

	printf("Attempting mount at %s...\r\n", SDPath);
 8000a42:	4921      	ldr	r1, [pc, #132]	@ (8000ac8 <sd_mount+0x8c>)
 8000a44:	4821      	ldr	r0, [pc, #132]	@ (8000acc <sd_mount+0x90>)
 8000a46:	f008 fed5 	bl	80097f4 <iprintf>
	res = f_mount(&fs, SDPath, 1);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	491e      	ldr	r1, [pc, #120]	@ (8000ac8 <sd_mount+0x8c>)
 8000a4e:	4820      	ldr	r0, [pc, #128]	@ (8000ad0 <sd_mount+0x94>)
 8000a50:	f007 fd82 	bl	8008558 <f_mount>
 8000a54:	4603      	mov	r3, r0
 8000a56:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8000a58:	2064      	movs	r0, #100	@ 0x64
 8000a5a:	f000 feef 	bl	800183c <HAL_Delay>
	if (res == FR_OK)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d126      	bne.n	8000ab2 <sd_mount+0x76>
	{
		printf("SD card mounted successfully at %s\r\n", SDPath);
 8000a64:	4918      	ldr	r1, [pc, #96]	@ (8000ac8 <sd_mount+0x8c>)
 8000a66:	481b      	ldr	r0, [pc, #108]	@ (8000ad4 <sd_mount+0x98>)
 8000a68:	f008 fec4 	bl	80097f4 <iprintf>

		// Capacity and free space reporting
		sd_get_space_kb();
 8000a6c:	f7ff ffb2 	bl	80009d4 <sd_get_space_kb>

		// Get Card Info
		BSP_SD_GetCardInfo(&myCardInfo);
 8000a70:	4819      	ldr	r0, [pc, #100]	@ (8000ad8 <sd_mount+0x9c>)
 8000a72:	f005 f8bd 	bl	8005bf0 <BSP_SD_GetCardInfo>
		printf("Card Type: %s\r\n", myCardInfo.CardType ? "SDSC" : "SDHC/SDXC");
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <sd_mount+0x9c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <sd_mount+0x46>
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <sd_mount+0xa0>)
 8000a80:	e000      	b.n	8000a84 <sd_mount+0x48>
 8000a82:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <sd_mount+0xa4>)
 8000a84:	4619      	mov	r1, r3
 8000a86:	4817      	ldr	r0, [pc, #92]	@ (8000ae4 <sd_mount+0xa8>)
 8000a88:	f008 feb4 	bl	80097f4 <iprintf>
		printf("Card Version: %s\r\n", myCardInfo.CardVersion ? "CARD_V1_X" : "CARD_V2_X");
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <sd_mount+0x9c>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <sd_mount+0x5c>
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <sd_mount+0xac>)
 8000a96:	e000      	b.n	8000a9a <sd_mount+0x5e>
 8000a98:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <sd_mount+0xb0>)
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4814      	ldr	r0, [pc, #80]	@ (8000af0 <sd_mount+0xb4>)
 8000a9e:	f008 fea9 	bl	80097f4 <iprintf>
		printf("Card Class: %lu\r\n", myCardInfo.Class);
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <sd_mount+0x9c>)
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4812      	ldr	r0, [pc, #72]	@ (8000af4 <sd_mount+0xb8>)
 8000aaa:	f008 fea3 	bl	80097f4 <iprintf>
		return FR_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e005      	b.n	8000abe <sd_mount+0x82>
	}

	// Any other mount error
	printf("Mount failed with code: %d\r\n", res);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4810      	ldr	r0, [pc, #64]	@ (8000af8 <sd_mount+0xbc>)
 8000ab8:	f008 fe9c 	bl	80097f4 <iprintf>
	return res;
 8000abc:	79fb      	ldrb	r3, [r7, #7]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000169c 	.word	0x2000169c
 8000acc:	0800a9ec 	.word	0x0800a9ec
 8000ad0:	20000084 	.word	0x20000084
 8000ad4:	0800aa08 	.word	0x0800aa08
 8000ad8:	200010bc 	.word	0x200010bc
 8000adc:	0800aa30 	.word	0x0800aa30
 8000ae0:	0800aa38 	.word	0x0800aa38
 8000ae4:	0800aa44 	.word	0x0800aa44
 8000ae8:	0800aa54 	.word	0x0800aa54
 8000aec:	0800aa60 	.word	0x0800aa60
 8000af0:	0800aa6c 	.word	0x0800aa6c
 8000af4:	0800aa80 	.word	0x0800aa80
 8000af8:	0800aa94 	.word	0x0800aa94

08000afc <sd_unmount>:


int sd_unmount(void) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
	FRESULT res = f_mount(NULL, SDPath, 1);
 8000b02:	2201      	movs	r2, #1
 8000b04:	490a      	ldr	r1, [pc, #40]	@ (8000b30 <sd_unmount+0x34>)
 8000b06:	2000      	movs	r0, #0
 8000b08:	f007 fd26 	bl	8008558 <f_mount>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	71fb      	strb	r3, [r7, #7]
	printf("SD card unmounted: %s\r\n\r\n\r\n", (res == FR_OK) ? "OK" : "Failed");
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d101      	bne.n	8000b1a <sd_unmount+0x1e>
 8000b16:	4b07      	ldr	r3, [pc, #28]	@ (8000b34 <sd_unmount+0x38>)
 8000b18:	e000      	b.n	8000b1c <sd_unmount+0x20>
 8000b1a:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <sd_unmount+0x3c>)
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4807      	ldr	r0, [pc, #28]	@ (8000b3c <sd_unmount+0x40>)
 8000b20:	f008 fe68 	bl	80097f4 <iprintf>
	return res;
 8000b24:	79fb      	ldrb	r3, [r7, #7]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000169c 	.word	0x2000169c
 8000b34:	0800aab4 	.word	0x0800aab4
 8000b38:	0800aab8 	.word	0x0800aab8
 8000b3c:	0800aac0 	.word	0x0800aac0

08000b40 <sd_write_file>:

int sd_write_file(const char *filename, const char *text) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b4c:	f843 0c3c 	str.w	r0, [r3, #-60]
 8000b50:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b54:	f843 1c40 	str.w	r1, [r3, #-64]
	FIL file;
	UINT bw;
	FRESULT res = f_open(&file, filename, FA_CREATE_ALWAYS | FA_WRITE);
 8000b58:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	3b14      	subs	r3, #20
 8000b64:	220a      	movs	r2, #10
 8000b66:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f007 fd3a 	bl	80085e4 <f_open>
 8000b70:	4603      	mov	r3, r0
 8000b72:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000b76:	f102 021f 	add.w	r2, r2, #31
 8000b7a:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK) return res;
 8000b7c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000b80:	f103 031f 	add.w	r3, r3, #31
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d005      	beq.n	8000b96 <sd_write_file+0x56>
 8000b8a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000b8e:	f103 031f 	add.w	r3, r3, #31
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	e041      	b.n	8000c1a <sd_write_file+0xda>

	res = f_write(&file, text, strlen(text), &bw);
 8000b96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b9a:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8000b9e:	f7ff fb49 	bl	8000234 <strlen>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	f107 0320 	add.w	r3, r7, #32
 8000ba8:	3b18      	subs	r3, #24
 8000baa:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000bae:	f107 0020 	add.w	r0, r7, #32
 8000bb2:	3814      	subs	r0, #20
 8000bb4:	f851 1c40 	ldr.w	r1, [r1, #-64]
 8000bb8:	f008 f83b 	bl	8008c32 <f_write>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000bc2:	f102 021f 	add.w	r2, r2, #31
 8000bc6:	7013      	strb	r3, [r2, #0]
	f_close(&file);
 8000bc8:	f107 0320 	add.w	r3, r7, #32
 8000bcc:	3b14      	subs	r3, #20
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f008 fa41 	bl	8009056 <f_close>
	printf("Write %u bytes to %s\r\n", bw, filename);
 8000bd4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bd8:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000bdc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000be0:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8000be4:	4619      	mov	r1, r3
 8000be6:	480f      	ldr	r0, [pc, #60]	@ (8000c24 <sd_write_file+0xe4>)
 8000be8:	f008 fe04 	bl	80097f4 <iprintf>
	return (res == FR_OK && bw == strlen(text)) ? FR_OK : FR_DISK_ERR;
 8000bec:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000bf0:	f103 031f 	add.w	r3, r3, #31
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10c      	bne.n	8000c14 <sd_write_file+0xd4>
 8000bfa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bfe:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8000c02:	f7ff fb17 	bl	8000234 <strlen>
 8000c06:	4602      	mov	r2, r0
 8000c08:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c0c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d001      	beq.n	8000c18 <sd_write_file+0xd8>
 8000c14:	2301      	movs	r3, #1
 8000c16:	e000      	b.n	8000c1a <sd_write_file+0xda>
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	0800aadc 	.word	0x0800aadc

08000c28 <sd_list_directory_recursive>:
	FRESULT res = f_mkdir(path);
	printf("Create directory %s: %s\r\n", path, (res == FR_OK ? "OK" : "Failed"));
	return res;
}

void sd_list_directory_recursive(const char *path, int depth) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0fa      	sub	sp, #488	@ 0x1e8
 8000c2c:	af02      	add	r7, sp, #8
 8000c2e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000c32:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8000c36:	6018      	str	r0, [r3, #0]
 8000c38:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000c3c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8000c40:	6019      	str	r1, [r3, #0]
	DIR dir;
	FILINFO fno;
//	char lfn[256];
//	fno.fname = lfn;
//	fno.fsize = sizeof(lfn);
	FRESULT res = f_opendir(&dir, path);
 8000c42:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000c46:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8000c4a:	f507 72d2 	add.w	r2, r7, #420	@ 0x1a4
 8000c4e:	6819      	ldr	r1, [r3, #0]
 8000c50:	4610      	mov	r0, r2
 8000c52:	f008 fa2a 	bl	80090aa <f_opendir>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
	if (res != FR_OK) {
 8000c5c:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00f      	beq.n	8000c84 <sd_list_directory_recursive+0x5c>
		printf("%*s[ERR] Cannot open: %s\r\n", depth * 2, "", path);
 8000c64:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000c68:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	0059      	lsls	r1, r3, #1
 8000c70:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000c74:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d74 <sd_list_directory_recursive+0x14c>)
 8000c7c:	483e      	ldr	r0, [pc, #248]	@ (8000d78 <sd_list_directory_recursive+0x150>)
 8000c7e:	f008 fdb9 	bl	80097f4 <iprintf>
 8000c82:	e072      	b.n	8000d6a <sd_list_directory_recursive+0x142>
		return;
	}

	while (1) {
		res = f_readdir(&dir, &fno);
 8000c84:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8000c88:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f008 faa4 	bl	80091dc <f_readdir>
 8000c94:	4603      	mov	r3, r0
 8000c96:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
		if (res != FR_OK || fno.fname[0] == 0) break;
 8000c9a:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d15e      	bne.n	8000d60 <sd_list_directory_recursive+0x138>
 8000ca2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000ca6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000caa:	7d9b      	ldrb	r3, [r3, #22]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d057      	beq.n	8000d60 <sd_list_directory_recursive+0x138>

		const char *name = (*fno.fname) ? fno.fname : fno.fname;
 8000cb0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000cb4:	3316      	adds	r3, #22
 8000cb6:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

		if (fno.fattrib & AM_DIR) {
 8000cba:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000cbe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000cc2:	7a1b      	ldrb	r3, [r3, #8]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d036      	beq.n	8000d3a <sd_list_directory_recursive+0x112>
			if (strcmp(name, ".") && strcmp(name, "..")) {
 8000ccc:	492b      	ldr	r1, [pc, #172]	@ (8000d7c <sd_list_directory_recursive+0x154>)
 8000cce:	f8d7 01d8 	ldr.w	r0, [r7, #472]	@ 0x1d8
 8000cd2:	f7ff faa5 	bl	8000220 <strcmp>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0d3      	beq.n	8000c84 <sd_list_directory_recursive+0x5c>
 8000cdc:	4928      	ldr	r1, [pc, #160]	@ (8000d80 <sd_list_directory_recursive+0x158>)
 8000cde:	f8d7 01d8 	ldr.w	r0, [r7, #472]	@ 0x1d8
 8000ce2:	f7ff fa9d 	bl	8000220 <strcmp>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0cb      	beq.n	8000c84 <sd_list_directory_recursive+0x5c>
				printf("%*sD %s\r\n", depth * 2, "", name);
 8000cec:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000cf0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	0059      	lsls	r1, r3, #1
 8000cf8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8000cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8000d74 <sd_list_directory_recursive+0x14c>)
 8000cfe:	4821      	ldr	r0, [pc, #132]	@ (8000d84 <sd_list_directory_recursive+0x15c>)
 8000d00:	f008 fd78 	bl	80097f4 <iprintf>
				char newpath[128];
				snprintf(newpath, sizeof(newpath), "%s/%s", path, name);
 8000d04:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000d08:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8000d0c:	f107 000c 	add.w	r0, r7, #12
 8000d10:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000d14:	9200      	str	r2, [sp, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a1b      	ldr	r2, [pc, #108]	@ (8000d88 <sd_list_directory_recursive+0x160>)
 8000d1a:	2180      	movs	r1, #128	@ 0x80
 8000d1c:	f008 fc72 	bl	8009604 <sniprintf>
				sd_list_directory_recursive(newpath, depth + 1);
 8000d20:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000d24:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	4611      	mov	r1, r2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff78 	bl	8000c28 <sd_list_directory_recursive>
 8000d38:	e7a4      	b.n	8000c84 <sd_list_directory_recursive+0x5c>
			}
		} else {
			printf("%*sF %s (%lu bytes)\r\n", depth * 2, "", name, (unsigned long)fno.fsize);
 8000d3a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000d3e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	0059      	lsls	r1, r3, #1
 8000d46:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000d4a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8000d56:	4a07      	ldr	r2, [pc, #28]	@ (8000d74 <sd_list_directory_recursive+0x14c>)
 8000d58:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <sd_list_directory_recursive+0x164>)
 8000d5a:	f008 fd4b 	bl	80097f4 <iprintf>
	while (1) {
 8000d5e:	e791      	b.n	8000c84 <sd_list_directory_recursive+0x5c>
		}
	}
	f_closedir(&dir);
 8000d60:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8000d64:	4618      	mov	r0, r3
 8000d66:	f008 fa13 	bl	8009190 <f_closedir>
}
 8000d6a:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	0800abcc 	.word	0x0800abcc
 8000d78:	0800abd0 	.word	0x0800abd0
 8000d7c:	0800abec 	.word	0x0800abec
 8000d80:	0800abf0 	.word	0x0800abf0
 8000d84:	0800abf4 	.word	0x0800abf4
 8000d88:	0800ac00 	.word	0x0800ac00
 8000d8c:	0800ac08 	.word	0x0800ac08

08000d90 <sd_list_files>:

void sd_list_files(void) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	printf("Files on SD Card:\r\n");
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <sd_list_files+0x1c>)
 8000d96:	f008 fd95 	bl	80098c4 <puts>
	sd_list_directory_recursive(SDPath, 0);
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4804      	ldr	r0, [pc, #16]	@ (8000db0 <sd_list_files+0x20>)
 8000d9e:	f7ff ff43 	bl	8000c28 <sd_list_directory_recursive>
	printf("\r\n\r\n");
 8000da2:	4804      	ldr	r0, [pc, #16]	@ (8000db4 <sd_list_files+0x24>)
 8000da4:	f008 fd8e 	bl	80098c4 <puts>
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	0800ac20 	.word	0x0800ac20
 8000db0:	2000169c 	.word	0x2000169c
 8000db4:	0800ac34 	.word	0x0800ac34

08000db8 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char *ptr, int len) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == 1 || fd == 2) {
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d002      	beq.n	8000dd0 <_write+0x18>
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d111      	bne.n	8000df4 <_write+0x3c>
		hstatus = HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	4809      	ldr	r0, [pc, #36]	@ (8000e00 <_write+0x48>)
 8000ddc:	f003 fa3d 	bl	800425a <HAL_UART_Transmit>
 8000de0:	4603      	mov	r3, r0
 8000de2:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 8000de4:	7dfb      	ldrb	r3, [r7, #23]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <_write+0x36>
			return len;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	e004      	b.n	8000df8 <_write+0x40>
		else
			return -1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000df2:	e001      	b.n	8000df8 <_write+0x40>
	}
	return -1;
 8000df4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20001160 	.word	0x20001160

08000e04 <BSP_SD_IsDetected>:

uint8_t BSP_SD_IsDetected(void) {
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
	__IO uint8_t status = SD_PRESENT;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	71fb      	strb	r3, [r7, #7]

	return status;
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	b2db      	uxtb	r3, r3
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e26:	f000 fc97 	bl	8001758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2a:	f000 f85d 	bl	8000ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f000 f973 	bl	8001118 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e32:	f000 f917 	bl	8001064 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e36:	f000 f93f 	bl	80010b8 <MX_USB_OTG_FS_PCD_Init>
  MX_SDIO_SD_Init();
 8000e3a:	f000 f8c1 	bl	8000fc0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000e3e:	f004 fe4b 	bl	8005ad8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  sd_mount();
 8000e42:	f7ff fdfb 	bl	8000a3c <sd_mount>
  sd_list_files();
 8000e46:	f7ff ffa3 	bl	8000d90 <sd_list_files>

  sd_benchmark();
 8000e4a:	f7ff fd85 	bl	8000958 <sd_benchmark>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t now = 0, loop_cnt = 0, next_blink = 500, next_tick = 1000;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e60:	607b      	str	r3, [r7, #4]
  printf("===== START MAIN LOOP =====\r\n");
 8000e62:	481a      	ldr	r0, [pc, #104]	@ (8000ecc <main+0xac>)
 8000e64:	f008 fd2e 	bl	80098c4 <puts>
  while (1)
  {
	  now = uwTick;
 8000e68:	4b19      	ldr	r3, [pc, #100]	@ (8000ed0 <main+0xb0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	603b      	str	r3, [r7, #0]

	  if (now >= next_blink) {
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d307      	bcc.n	8000e86 <main+0x66>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000e76:	2180      	movs	r1, #128	@ 0x80
 8000e78:	4816      	ldr	r0, [pc, #88]	@ (8000ed4 <main+0xb4>)
 8000e7a:	f000 ff96 	bl	8001daa <HAL_GPIO_TogglePin>
		  next_blink += 500;
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000e84:	60bb      	str	r3, [r7, #8]
	  }

	  if (now >= next_tick) {
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d319      	bcc.n	8000ec2 <main+0xa2>

		  ++total_uptime;
 8000e8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <main+0xb8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	4a10      	ldr	r2, [pc, #64]	@ (8000ed8 <main+0xb8>)
 8000e96:	6013      	str	r3, [r2, #0]

		   printf("ITER: TICK #%lu (LOOP_CNT = %lu, UPTIME = %lu)\r\n", now/1000, loop_cnt, total_uptime);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	4a10      	ldr	r2, [pc, #64]	@ (8000edc <main+0xbc>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	0999      	lsrs	r1, r3, #6
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <main+0xb8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	480d      	ldr	r0, [pc, #52]	@ (8000ee0 <main+0xc0>)
 8000eaa:	f008 fca3 	bl	80097f4 <iprintf>


		   sd_write_file("uptime.dat", &total_uptime);
 8000eae:	490a      	ldr	r1, [pc, #40]	@ (8000ed8 <main+0xb8>)
 8000eb0:	480c      	ldr	r0, [pc, #48]	@ (8000ee4 <main+0xc4>)
 8000eb2:	f7ff fe45 	bl	8000b40 <sd_write_file>



		  loop_cnt = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
		  next_tick += 1000;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000ec0:	607b      	str	r3, [r7, #4]
	  }

	  ++loop_cnt;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
	  now = uwTick;
 8000ec8:	e7ce      	b.n	8000e68 <main+0x48>
 8000eca:	bf00      	nop
 8000ecc:	0800ac40 	.word	0x0800ac40
 8000ed0:	20001694 	.word	0x20001694
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	2000168c 	.word	0x2000168c
 8000edc:	10624dd3 	.word	0x10624dd3
 8000ee0:	0800ac60 	.word	0x0800ac60
 8000ee4:	0800ac94 	.word	0x0800ac94

08000ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b094      	sub	sp, #80	@ 0x50
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	2234      	movs	r2, #52	@ 0x34
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f008 fcec 	bl	80098d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	4b29      	ldr	r3, [pc, #164]	@ (8000fb8 <SystemClock_Config+0xd0>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f14:	4a28      	ldr	r2, [pc, #160]	@ (8000fb8 <SystemClock_Config+0xd0>)
 8000f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1c:	4b26      	ldr	r3, [pc, #152]	@ (8000fb8 <SystemClock_Config+0xd0>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f28:	2300      	movs	r3, #0
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	4b23      	ldr	r3, [pc, #140]	@ (8000fbc <SystemClock_Config+0xd4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a22      	ldr	r2, [pc, #136]	@ (8000fbc <SystemClock_Config+0xd4>)
 8000f32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b20      	ldr	r3, [pc, #128]	@ (8000fbc <SystemClock_Config+0xd4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f48:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000f4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f56:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000f5c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f60:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f62:	2304      	movs	r3, #4
 8000f64:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000f66:	2308      	movs	r3, #8
 8000f68:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 fd1a 	bl	80029ac <HAL_RCC_OscConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f7e:	f000 f985 	bl	800128c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f82:	230f      	movs	r3, #15
 8000f84:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f86:	2302      	movs	r3, #2
 8000f88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 f858 	bl	8002054 <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000faa:	f000 f96f 	bl	800128c <Error_Handler>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3750      	adds	r7, #80	@ 0x50
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40007000 	.word	0x40007000

08000fc0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001044 <MX_SDIO_SD_Init+0x84>)
 8000fc6:	4a20      	ldr	r2, [pc, #128]	@ (8001048 <MX_SDIO_SD_Init+0x88>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000fca:	4b1e      	ldr	r3, [pc, #120]	@ (8001044 <MX_SDIO_SD_Init+0x84>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <MX_SDIO_SD_Init+0x84>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <MX_SDIO_SD_Init+0x84>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000fdc:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <MX_SDIO_SD_Init+0x84>)
 8000fde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fe2:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <MX_SDIO_SD_Init+0x84>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8000fea:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <MX_SDIO_SD_Init+0x84>)
 8000fec:	2208      	movs	r2, #8
 8000fee:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  printf("\r\n\r\n===== START SDIO INIT =====\r\n");
 8000ff0:	4816      	ldr	r0, [pc, #88]	@ (800104c <MX_SDIO_SD_Init+0x8c>)
 8000ff2:	f008 fc67 	bl	80098c4 <puts>
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <MX_SDIO_SD_Init+0x84>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  if (HAL_SD_Init(&hsd) != HAL_OK) {
 8000ffc:	4811      	ldr	r0, [pc, #68]	@ (8001044 <MX_SDIO_SD_Init+0x84>)
 8000ffe:	f001 ff59 	bl	8002eb4 <HAL_SD_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d004      	beq.n	8001012 <MX_SDIO_SD_Init+0x52>
	  printf("SDIO: ERROR. Couldn't init SDIO in 1B\r\n");
 8001008:	4811      	ldr	r0, [pc, #68]	@ (8001050 <MX_SDIO_SD_Init+0x90>)
 800100a:	f008 fc5b 	bl	80098c4 <puts>
	  Error_Handler();
 800100e:	f000 f93d 	bl	800128c <Error_Handler>
  }
  printf("SDIO: Successfully init SDIO in 1B\r\n");
 8001012:	4810      	ldr	r0, [pc, #64]	@ (8001054 <MX_SDIO_SD_Init+0x94>)
 8001014:	f008 fc56 	bl	80098c4 <puts>

  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK) {
 8001018:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800101c:	4809      	ldr	r0, [pc, #36]	@ (8001044 <MX_SDIO_SD_Init+0x84>)
 800101e:	f002 fd25 	bl	8003a6c <HAL_SD_ConfigWideBusOperation>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d004      	beq.n	8001032 <MX_SDIO_SD_Init+0x72>
	  printf("SDIO: ERROR. Couldn't init SDIO in 4B\r\n");
 8001028:	480b      	ldr	r0, [pc, #44]	@ (8001058 <MX_SDIO_SD_Init+0x98>)
 800102a:	f008 fc4b 	bl	80098c4 <puts>
	  Error_Handler();
 800102e:	f000 f92d 	bl	800128c <Error_Handler>
  }
  printf("SDIO: Successfully init SDIO in 4B\r\n");
 8001032:	480a      	ldr	r0, [pc, #40]	@ (800105c <MX_SDIO_SD_Init+0x9c>)
 8001034:	f008 fc46 	bl	80098c4 <puts>
  printf("====== END SDIO INIT ======\r\n");
 8001038:	4809      	ldr	r0, [pc, #36]	@ (8001060 <MX_SDIO_SD_Init+0xa0>)
 800103a:	f008 fc43 	bl	80098c4 <puts>

  /* USER CODE END SDIO_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200010dc 	.word	0x200010dc
 8001048:	40012c00 	.word	0x40012c00
 800104c:	0800aca0 	.word	0x0800aca0
 8001050:	0800acc4 	.word	0x0800acc4
 8001054:	0800acec 	.word	0x0800acec
 8001058:	0800ad10 	.word	0x0800ad10
 800105c:	0800ad38 	.word	0x0800ad38
 8001060:	0800ad5c 	.word	0x0800ad5c

08001064 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001068:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <MX_USART3_UART_Init+0x4c>)
 800106a:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <MX_USART3_UART_Init+0x50>)
 800106c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <MX_USART3_UART_Init+0x4c>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <MX_USART3_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <MX_USART3_UART_Init+0x4c>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001082:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <MX_USART3_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <MX_USART3_UART_Init+0x4c>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <MX_USART3_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <MX_USART3_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800109a:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <MX_USART3_UART_Init+0x4c>)
 800109c:	f003 f88d 	bl	80041ba <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010a6:	f000 f8f1 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20001160 	.word	0x20001160
 80010b4:	40004800 	.word	0x40004800

080010b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80010c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80010c4:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010c6:	2206      	movs	r2, #6
 80010c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010ca:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010d0:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010d8:	2202      	movs	r2, #2
 80010da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80010dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010de:	2201      	movs	r2, #1
 80010e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80010ee:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	@ (8001114 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001102:	f000 fe6c 	bl	8001dde <HAL_PCD_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 800110c:	f000 f8be 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200011a8 	.word	0x200011a8

08001118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	@ 0x30
 800111c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
 8001132:	4b52      	ldr	r3, [pc, #328]	@ (800127c <MX_GPIO_Init+0x164>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a51      	ldr	r2, [pc, #324]	@ (800127c <MX_GPIO_Init+0x164>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b4f      	ldr	r3, [pc, #316]	@ (800127c <MX_GPIO_Init+0x164>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	4b4b      	ldr	r3, [pc, #300]	@ (800127c <MX_GPIO_Init+0x164>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a4a      	ldr	r2, [pc, #296]	@ (800127c <MX_GPIO_Init+0x164>)
 8001154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b48      	ldr	r3, [pc, #288]	@ (800127c <MX_GPIO_Init+0x164>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b44      	ldr	r3, [pc, #272]	@ (800127c <MX_GPIO_Init+0x164>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a43      	ldr	r2, [pc, #268]	@ (800127c <MX_GPIO_Init+0x164>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b41      	ldr	r3, [pc, #260]	@ (800127c <MX_GPIO_Init+0x164>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b3d      	ldr	r3, [pc, #244]	@ (800127c <MX_GPIO_Init+0x164>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a3c      	ldr	r2, [pc, #240]	@ (800127c <MX_GPIO_Init+0x164>)
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b3a      	ldr	r3, [pc, #232]	@ (800127c <MX_GPIO_Init+0x164>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b36      	ldr	r3, [pc, #216]	@ (800127c <MX_GPIO_Init+0x164>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a35      	ldr	r2, [pc, #212]	@ (800127c <MX_GPIO_Init+0x164>)
 80011a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b33      	ldr	r3, [pc, #204]	@ (800127c <MX_GPIO_Init+0x164>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b2f      	ldr	r3, [pc, #188]	@ (800127c <MX_GPIO_Init+0x164>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a2e      	ldr	r2, [pc, #184]	@ (800127c <MX_GPIO_Init+0x164>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b2c      	ldr	r3, [pc, #176]	@ (800127c <MX_GPIO_Init+0x164>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80011dc:	4828      	ldr	r0, [pc, #160]	@ (8001280 <MX_GPIO_Init+0x168>)
 80011de:	f000 fdcb 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2140      	movs	r1, #64	@ 0x40
 80011e6:	4827      	ldr	r0, [pc, #156]	@ (8001284 <MX_GPIO_Init+0x16c>)
 80011e8:	f000 fdc6 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4619      	mov	r1, r3
 8001202:	4821      	ldr	r0, [pc, #132]	@ (8001288 <MX_GPIO_Init+0x170>)
 8001204:	f000 fc24 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001208:	f244 0381 	movw	r3, #16513	@ 0x4081
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	4817      	ldr	r0, [pc, #92]	@ (8001280 <MX_GPIO_Init+0x168>)
 8001222:	f000 fc15 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001226:	2340      	movs	r3, #64	@ 0x40
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	4811      	ldr	r0, [pc, #68]	@ (8001284 <MX_GPIO_Init+0x16c>)
 800123e:	f000 fc07 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001242:	2380      	movs	r3, #128	@ 0x80
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	480b      	ldr	r0, [pc, #44]	@ (8001284 <MX_GPIO_Init+0x16c>)
 8001256:	f000 fbfb 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_DET_Pin */
  GPIO_InitStruct.Pin = SDIO_DET_Pin;
 800125a:	2320      	movs	r3, #32
 800125c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001262:	2302      	movs	r3, #2
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SDIO_DET_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	4804      	ldr	r0, [pc, #16]	@ (8001280 <MX_GPIO_Init+0x168>)
 800126e:	f000 fbef 	bl	8001a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001272:	bf00      	nop
 8001274:	3730      	adds	r7, #48	@ 0x30
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40020400 	.word	0x40020400
 8001284:	40021800 	.word	0x40021800
 8001288:	40020800 	.word	0x40020800

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <Error_Handler+0x8>

08001298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	4a0f      	ldr	r2, [pc, #60]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	4a08      	ldr	r2, [pc, #32]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800

080012e8 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b0a0      	sub	sp, #128	@ 0x80
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2258      	movs	r2, #88	@ 0x58
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f008 fae3 	bl	80098d4 <memset>
  if(hsd->Instance==SDIO)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a39      	ldr	r2, [pc, #228]	@ (80013f8 <HAL_SD_MspInit+0x110>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d16b      	bne.n	80013f0 <HAL_SD_MspInit+0x108>

    /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001318:	2360      	movs	r3, #96	@ 0x60
 800131a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800131c:	2300      	movs	r3, #0
 800131e:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001320:	2300      	movs	r3, #0
 8001322:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4618      	mov	r0, r3
 800132a:	f001 f8b3 	bl	8002494 <HAL_RCCEx_PeriphCLKConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8001334:	f7ff ffaa 	bl	800128c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	4b2f      	ldr	r3, [pc, #188]	@ (80013fc <HAL_SD_MspInit+0x114>)
 800133e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001340:	4a2e      	ldr	r2, [pc, #184]	@ (80013fc <HAL_SD_MspInit+0x114>)
 8001342:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001346:	6453      	str	r3, [r2, #68]	@ 0x44
 8001348:	4b2c      	ldr	r3, [pc, #176]	@ (80013fc <HAL_SD_MspInit+0x114>)
 800134a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	4b28      	ldr	r3, [pc, #160]	@ (80013fc <HAL_SD_MspInit+0x114>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135c:	4a27      	ldr	r2, [pc, #156]	@ (80013fc <HAL_SD_MspInit+0x114>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	6313      	str	r3, [r2, #48]	@ 0x30
 8001364:	4b25      	ldr	r3, [pc, #148]	@ (80013fc <HAL_SD_MspInit+0x114>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <HAL_SD_MspInit+0x114>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001378:	4a20      	ldr	r2, [pc, #128]	@ (80013fc <HAL_SD_MspInit+0x114>)
 800137a:	f043 0308 	orr.w	r3, r3, #8
 800137e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001380:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <HAL_SD_MspInit+0x114>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800138c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001390:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001396:	2301      	movs	r3, #1
 8001398:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800139e:	230c      	movs	r3, #12
 80013a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013a6:	4619      	mov	r1, r3
 80013a8:	4815      	ldr	r0, [pc, #84]	@ (8001400 <HAL_SD_MspInit+0x118>)
 80013aa:	f000 fb51 	bl	8001a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80013c0:	230c      	movs	r3, #12
 80013c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013c8:	4619      	mov	r1, r3
 80013ca:	480d      	ldr	r0, [pc, #52]	@ (8001400 <HAL_SD_MspInit+0x118>)
 80013cc:	f000 fb40 	bl	8001a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013d0:	2304      	movs	r3, #4
 80013d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d8:	2301      	movs	r3, #1
 80013da:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80013e0:	230c      	movs	r3, #12
 80013e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013e8:	4619      	mov	r1, r3
 80013ea:	4806      	ldr	r0, [pc, #24]	@ (8001404 <HAL_SD_MspInit+0x11c>)
 80013ec:	f000 fb30 	bl	8001a50 <HAL_GPIO_Init>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 80013f0:	bf00      	nop
 80013f2:	3780      	adds	r7, #128	@ 0x80
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40012c00 	.word	0x40012c00
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020800 	.word	0x40020800
 8001404:	40020c00 	.word	0x40020c00

08001408 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a19      	ldr	r2, [pc, #100]	@ (800148c <HAL_UART_MspInit+0x84>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d12c      	bne.n	8001484 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <HAL_UART_MspInit+0x88>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	4a17      	ldr	r2, [pc, #92]	@ (8001490 <HAL_UART_MspInit+0x88>)
 8001434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001438:	6413      	str	r3, [r2, #64]	@ 0x40
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <HAL_UART_MspInit+0x88>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <HAL_UART_MspInit+0x88>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a10      	ldr	r2, [pc, #64]	@ (8001490 <HAL_UART_MspInit+0x88>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <HAL_UART_MspInit+0x88>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001462:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001474:	2307      	movs	r3, #7
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <HAL_UART_MspInit+0x8c>)
 8001480:	f000 fae6 	bl	8001a50 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	@ 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40004800 	.word	0x40004800
 8001490:	40023800 	.word	0x40023800
 8001494:	40020c00 	.word	0x40020c00

08001498 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0a0      	sub	sp, #128	@ 0x80
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2258      	movs	r2, #88	@ 0x58
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f008 fa0b 	bl	80098d4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014c6:	d14d      	bne.n	8001564 <HAL_PCD_MspInit+0xcc>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80014c8:	2320      	movs	r3, #32
 80014ca:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80014cc:	2300      	movs	r3, #0
 80014ce:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 ffdd 	bl	8002494 <HAL_RCCEx_PeriphCLKConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 80014e0:	f7ff fed4 	bl	800128c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	4b20      	ldr	r3, [pc, #128]	@ (800156c <HAL_PCD_MspInit+0xd4>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ec:	4a1f      	ldr	r2, [pc, #124]	@ (800156c <HAL_PCD_MspInit+0xd4>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f4:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <HAL_PCD_MspInit+0xd4>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001500:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001504:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001512:	230a      	movs	r3, #10
 8001514:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800151a:	4619      	mov	r1, r3
 800151c:	4814      	ldr	r0, [pc, #80]	@ (8001570 <HAL_PCD_MspInit+0xd8>)
 800151e:	f000 fa97 	bl	8001a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001522:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001526:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001528:	2300      	movs	r3, #0
 800152a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001534:	4619      	mov	r1, r3
 8001536:	480e      	ldr	r0, [pc, #56]	@ (8001570 <HAL_PCD_MspInit+0xd8>)
 8001538:	f000 fa8a 	bl	8001a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800153c:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <HAL_PCD_MspInit+0xd4>)
 800153e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001540:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <HAL_PCD_MspInit+0xd4>)
 8001542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001546:	6353      	str	r3, [r2, #52]	@ 0x34
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <HAL_PCD_MspInit+0xd4>)
 800154e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001550:	4a06      	ldr	r2, [pc, #24]	@ (800156c <HAL_PCD_MspInit+0xd4>)
 8001552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001556:	6453      	str	r3, [r2, #68]	@ 0x44
 8001558:	4b04      	ldr	r3, [pc, #16]	@ (800156c <HAL_PCD_MspInit+0xd4>)
 800155a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001564:	bf00      	nop
 8001566:	3780      	adds	r7, #128	@ 0x80
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <NMI_Handler+0x4>

0800157c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <MemManage_Handler+0x4>

0800158c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <BusFault_Handler+0x4>

08001594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <UsageFault_Handler+0x4>

0800159c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ca:	f000 f917 	bl	80017fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	e00a      	b.n	80015fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015e4:	f3af 8000 	nop.w
 80015e8:	4601      	mov	r1, r0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	60ba      	str	r2, [r7, #8]
 80015f0:	b2ca      	uxtb	r2, r1
 80015f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3301      	adds	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	429a      	cmp	r2, r3
 8001600:	dbf0      	blt.n	80015e4 <_read+0x12>
  }

  return len;
 8001602:	687b      	ldr	r3, [r7, #4]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_close>:
  }
  return len;
}

int _close(int file)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001614:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001634:	605a      	str	r2, [r3, #4]
  return 0;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <_isatty>:

int _isatty(int file)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800164c:	2301      	movs	r3, #1
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800165a:	b480      	push	{r7}
 800165c:	b085      	sub	sp, #20
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800167c:	4a14      	ldr	r2, [pc, #80]	@ (80016d0 <_sbrk+0x5c>)
 800167e:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <_sbrk+0x60>)
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001688:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001690:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <_sbrk+0x64>)
 8001692:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <_sbrk+0x68>)
 8001694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d207      	bcs.n	80016b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a4:	f008 f91e 	bl	80098e4 <__errno>
 80016a8:	4603      	mov	r3, r0
 80016aa:	220c      	movs	r2, #12
 80016ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016b2:	e009      	b.n	80016c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b4:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ba:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	4a05      	ldr	r2, [pc, #20]	@ (80016d8 <_sbrk+0x64>)
 80016c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c6:	68fb      	ldr	r3, [r7, #12]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20050000 	.word	0x20050000
 80016d4:	00000800 	.word	0x00000800
 80016d8:	20001690 	.word	0x20001690
 80016dc:	20001a20 	.word	0x20001a20

080016e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <SystemInit+0x20>)
 80016e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ea:	4a05      	ldr	r2, [pc, #20]	@ (8001700 <SystemInit+0x20>)
 80016ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001704:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800173c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001708:	f7ff ffea 	bl	80016e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800170c:	480c      	ldr	r0, [pc, #48]	@ (8001740 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800170e:	490d      	ldr	r1, [pc, #52]	@ (8001744 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001710:	4a0d      	ldr	r2, [pc, #52]	@ (8001748 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001714:	e002      	b.n	800171c <LoopCopyDataInit>

08001716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171a:	3304      	adds	r3, #4

0800171c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800171c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001720:	d3f9      	bcc.n	8001716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001722:	4a0a      	ldr	r2, [pc, #40]	@ (800174c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001724:	4c0a      	ldr	r4, [pc, #40]	@ (8001750 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001728:	e001      	b.n	800172e <LoopFillZerobss>

0800172a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800172c:	3204      	adds	r2, #4

0800172e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001730:	d3fb      	bcc.n	800172a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001732:	f008 f8dd 	bl	80098f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001736:	f7ff fb73 	bl	8000e20 <main>
  bx  lr    
 800173a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800173c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001744:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001748:	0800b274 	.word	0x0800b274
  ldr r2, =_sbss
 800174c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001750:	20001a20 	.word	0x20001a20

08001754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001754:	e7fe      	b.n	8001754 <ADC_IRQHandler>
	...

08001758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800175c:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0d      	ldr	r2, [pc, #52]	@ (8001798 <HAL_Init+0x40>)
 8001762:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001766:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001768:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <HAL_Init+0x40>)
 800176e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001772:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001774:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a07      	ldr	r2, [pc, #28]	@ (8001798 <HAL_Init+0x40>)
 800177a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800177e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001780:	2003      	movs	r0, #3
 8001782:	f000 f931 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001786:	2000      	movs	r0, #0
 8001788:	f000 f808 	bl	800179c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800178c:	f7ff fd84 	bl	8001298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023c00 	.word	0x40023c00

0800179c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a4:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_InitTick+0x54>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_InitTick+0x58>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f93b 	bl	8001a36 <HAL_SYSTICK_Config>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00e      	b.n	80017e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b0f      	cmp	r3, #15
 80017ce:	d80a      	bhi.n	80017e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d0:	2200      	movs	r2, #0
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017d8:	f000 f911 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017dc:	4a06      	ldr	r2, [pc, #24]	@ (80017f8 <HAL_InitTick+0x5c>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e000      	b.n	80017e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000000 	.word	0x20000000
 80017f4:	20000008 	.word	0x20000008
 80017f8:	20000004 	.word	0x20000004

080017fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_IncTick+0x20>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_IncTick+0x24>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4413      	add	r3, r2
 800180c:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <HAL_IncTick+0x24>)
 800180e:	6013      	str	r3, [r2, #0]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000008 	.word	0x20000008
 8001820:	20001694 	.word	0x20001694

08001824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return uwTick;
 8001828:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <HAL_GetTick+0x14>)
 800182a:	681b      	ldr	r3, [r3, #0]
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20001694 	.word	0x20001694

0800183c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001844:	f7ff ffee 	bl	8001824 <HAL_GetTick>
 8001848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001854:	d005      	beq.n	8001862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001856:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <HAL_Delay+0x44>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4413      	add	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001862:	bf00      	nop
 8001864:	f7ff ffde 	bl	8001824 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	429a      	cmp	r2, r3
 8001872:	d8f7      	bhi.n	8001864 <HAL_Delay+0x28>
  {
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000008 	.word	0x20000008

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	@ (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	@ (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	@ 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	@ 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	@ (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019c8:	f7ff ff8e 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff47 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a10:	f7ff ff5c 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f7ff ff8e 	bl	800193c <NVIC_EncodePriority>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff5d 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffb0 	bl	80019a4 <SysTick_Config>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	@ 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	e165      	b.n	8001d38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	f040 8154 	bne.w	8001d32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d005      	beq.n	8001aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d130      	bne.n	8001b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 0201 	and.w	r2, r3, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d017      	beq.n	8001b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d123      	bne.n	8001b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	08da      	lsrs	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3208      	adds	r2, #8
 8001b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	220f      	movs	r2, #15
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	08da      	lsrs	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3208      	adds	r2, #8
 8001b8e:	69b9      	ldr	r1, [r7, #24]
 8001b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0203 	and.w	r2, r3, #3
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80ae 	beq.w	8001d32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b5d      	ldr	r3, [pc, #372]	@ (8001d50 <HAL_GPIO_Init+0x300>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	4a5c      	ldr	r2, [pc, #368]	@ (8001d50 <HAL_GPIO_Init+0x300>)
 8001be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001be6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d50 <HAL_GPIO_Init+0x300>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf2:	4a58      	ldr	r2, [pc, #352]	@ (8001d54 <HAL_GPIO_Init+0x304>)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	220f      	movs	r2, #15
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4f      	ldr	r2, [pc, #316]	@ (8001d58 <HAL_GPIO_Init+0x308>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d025      	beq.n	8001c6a <HAL_GPIO_Init+0x21a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4e      	ldr	r2, [pc, #312]	@ (8001d5c <HAL_GPIO_Init+0x30c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d01f      	beq.n	8001c66 <HAL_GPIO_Init+0x216>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4d      	ldr	r2, [pc, #308]	@ (8001d60 <HAL_GPIO_Init+0x310>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d019      	beq.n	8001c62 <HAL_GPIO_Init+0x212>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4c      	ldr	r2, [pc, #304]	@ (8001d64 <HAL_GPIO_Init+0x314>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d013      	beq.n	8001c5e <HAL_GPIO_Init+0x20e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4b      	ldr	r2, [pc, #300]	@ (8001d68 <HAL_GPIO_Init+0x318>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00d      	beq.n	8001c5a <HAL_GPIO_Init+0x20a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4a      	ldr	r2, [pc, #296]	@ (8001d6c <HAL_GPIO_Init+0x31c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d007      	beq.n	8001c56 <HAL_GPIO_Init+0x206>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a49      	ldr	r2, [pc, #292]	@ (8001d70 <HAL_GPIO_Init+0x320>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d101      	bne.n	8001c52 <HAL_GPIO_Init+0x202>
 8001c4e:	2306      	movs	r3, #6
 8001c50:	e00c      	b.n	8001c6c <HAL_GPIO_Init+0x21c>
 8001c52:	2307      	movs	r3, #7
 8001c54:	e00a      	b.n	8001c6c <HAL_GPIO_Init+0x21c>
 8001c56:	2305      	movs	r3, #5
 8001c58:	e008      	b.n	8001c6c <HAL_GPIO_Init+0x21c>
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	e006      	b.n	8001c6c <HAL_GPIO_Init+0x21c>
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e004      	b.n	8001c6c <HAL_GPIO_Init+0x21c>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e002      	b.n	8001c6c <HAL_GPIO_Init+0x21c>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_GPIO_Init+0x21c>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	f002 0203 	and.w	r2, r2, #3
 8001c72:	0092      	lsls	r2, r2, #2
 8001c74:	4093      	lsls	r3, r2
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c7c:	4935      	ldr	r1, [pc, #212]	@ (8001d54 <HAL_GPIO_Init+0x304>)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	3302      	adds	r3, #2
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d74 <HAL_GPIO_Init+0x324>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cae:	4a31      	ldr	r2, [pc, #196]	@ (8001d74 <HAL_GPIO_Init+0x324>)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d74 <HAL_GPIO_Init+0x324>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd8:	4a26      	ldr	r2, [pc, #152]	@ (8001d74 <HAL_GPIO_Init+0x324>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cde:	4b25      	ldr	r3, [pc, #148]	@ (8001d74 <HAL_GPIO_Init+0x324>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d02:	4a1c      	ldr	r2, [pc, #112]	@ (8001d74 <HAL_GPIO_Init+0x324>)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d08:	4b1a      	ldr	r3, [pc, #104]	@ (8001d74 <HAL_GPIO_Init+0x324>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d2c:	4a11      	ldr	r2, [pc, #68]	@ (8001d74 <HAL_GPIO_Init+0x324>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3301      	adds	r3, #1
 8001d36:	61fb      	str	r3, [r7, #28]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	2b0f      	cmp	r3, #15
 8001d3c:	f67f ae96 	bls.w	8001a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3724      	adds	r7, #36	@ 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40013800 	.word	0x40013800
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40020800 	.word	0x40020800
 8001d64:	40020c00 	.word	0x40020c00
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40021400 	.word	0x40021400
 8001d70:	40021800 	.word	0x40021800
 8001d74:	40013c00 	.word	0x40013c00

08001d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
 8001d84:	4613      	mov	r3, r2
 8001d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d88:	787b      	ldrb	r3, [r7, #1]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d94:	e003      	b.n	8001d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d96:	887b      	ldrh	r3, [r7, #2]
 8001d98:	041a      	lsls	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	619a      	str	r2, [r3, #24]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b085      	sub	sp, #20
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dbc:	887a      	ldrh	r2, [r7, #2]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	041a      	lsls	r2, r3, #16
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	400b      	ands	r3, r1
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	619a      	str	r2, [r3, #24]
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af02      	add	r7, sp, #8
 8001de4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e108      	b.n	8002002 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d106      	bne.n	8001e10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff fb44 	bl	8001498 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2203      	movs	r2, #3
 8001e14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e1e:	d102      	bne.n	8001e26 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 fbb8 	bl	80055a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7c1a      	ldrb	r2, [r3, #16]
 8001e38:	f88d 2000 	strb.w	r2, [sp]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e40:	f003 fb4a 	bl	80054d8 <USB_CoreInit>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0d5      	b.n	8002002 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 fbb0 	bl	80055c2 <USB_SetCurrentMode>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0c6      	b.n	8002002 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	e04a      	b.n	8001f10 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	3315      	adds	r3, #21
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3314      	adds	r3, #20
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	b298      	uxth	r0, r3
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	332e      	adds	r3, #46	@ 0x2e
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3318      	adds	r3, #24
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	331c      	adds	r3, #28
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	3320      	adds	r3, #32
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	3324      	adds	r3, #36	@ 0x24
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	791b      	ldrb	r3, [r3, #4]
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d3af      	bcc.n	8001e7a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	73fb      	strb	r3, [r7, #15]
 8001f1e:	e044      	b.n	8001faa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	791b      	ldrb	r3, [r3, #4]
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d3b5      	bcc.n	8001f20 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7c1a      	ldrb	r2, [r3, #16]
 8001fbc:	f88d 2000 	strb.w	r2, [sp]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc4:	f003 fb4a 	bl	800565c <USB_DevInit>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e013      	b.n	8002002 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7b1b      	ldrb	r3, [r3, #12]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d102      	bne.n	8001ff6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f80a 	bl	800200a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f003 fd05 	bl	8005a0a <USB_DevDisconnect>

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800200a:	b480      	push	{r7}
 800200c:	b085      	sub	sp, #20
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800203c:	f043 0303 	orr.w	r3, r3, #3
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0cc      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002068:	4b68      	ldr	r3, [pc, #416]	@ (800220c <HAL_RCC_ClockConfig+0x1b8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d90c      	bls.n	8002090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b65      	ldr	r3, [pc, #404]	@ (800220c <HAL_RCC_ClockConfig+0x1b8>)
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	4b63      	ldr	r3, [pc, #396]	@ (800220c <HAL_RCC_ClockConfig+0x1b8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0b8      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d020      	beq.n	80020de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a8:	4b59      	ldr	r3, [pc, #356]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4a58      	ldr	r2, [pc, #352]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c0:	4b53      	ldr	r3, [pc, #332]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4a52      	ldr	r2, [pc, #328]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020cc:	4b50      	ldr	r3, [pc, #320]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	494d      	ldr	r1, [pc, #308]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d044      	beq.n	8002174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	4b47      	ldr	r3, [pc, #284]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d119      	bne.n	8002132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e07f      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d003      	beq.n	8002112 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800210e:	2b03      	cmp	r3, #3
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002112:	4b3f      	ldr	r3, [pc, #252]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e06f      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002122:	4b3b      	ldr	r3, [pc, #236]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e067      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002132:	4b37      	ldr	r3, [pc, #220]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f023 0203 	bic.w	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	4934      	ldr	r1, [pc, #208]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	4313      	orrs	r3, r2
 8002142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002144:	f7ff fb6e 	bl	8001824 <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	e00a      	b.n	8002162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214c:	f7ff fb6a 	bl	8001824 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e04f      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	4b2b      	ldr	r3, [pc, #172]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 020c 	and.w	r2, r3, #12
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	429a      	cmp	r2, r3
 8002172:	d1eb      	bne.n	800214c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002174:	4b25      	ldr	r3, [pc, #148]	@ (800220c <HAL_RCC_ClockConfig+0x1b8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d20c      	bcs.n	800219c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b22      	ldr	r3, [pc, #136]	@ (800220c <HAL_RCC_ClockConfig+0x1b8>)
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b20      	ldr	r3, [pc, #128]	@ (800220c <HAL_RCC_ClockConfig+0x1b8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e032      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a8:	4b19      	ldr	r3, [pc, #100]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4916      	ldr	r1, [pc, #88]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021c6:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	490e      	ldr	r1, [pc, #56]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021da:	f000 f821 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 80021de:	4602      	mov	r2, r0
 80021e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	490a      	ldr	r1, [pc, #40]	@ (8002214 <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	5ccb      	ldrb	r3, [r1, r3]
 80021ee:	fa22 f303 	lsr.w	r3, r2, r3
 80021f2:	4a09      	ldr	r2, [pc, #36]	@ (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021f6:	4b09      	ldr	r3, [pc, #36]	@ (800221c <HAL_RCC_ClockConfig+0x1c8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff face 	bl	800179c <HAL_InitTick>

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023c00 	.word	0x40023c00
 8002210:	40023800 	.word	0x40023800
 8002214:	0800adc4 	.word	0x0800adc4
 8002218:	20000000 	.word	0x20000000
 800221c:	20000004 	.word	0x20000004

08002220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002224:	b094      	sub	sp, #80	@ 0x50
 8002226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002238:	4b79      	ldr	r3, [pc, #484]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x200>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d00d      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x40>
 8002244:	2b08      	cmp	r3, #8
 8002246:	f200 80e1 	bhi.w	800240c <HAL_RCC_GetSysClockFreq+0x1ec>
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x34>
 800224e:	2b04      	cmp	r3, #4
 8002250:	d003      	beq.n	800225a <HAL_RCC_GetSysClockFreq+0x3a>
 8002252:	e0db      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002254:	4b73      	ldr	r3, [pc, #460]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x204>)
 8002256:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002258:	e0db      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800225a:	4b73      	ldr	r3, [pc, #460]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x208>)
 800225c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800225e:	e0d8      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002260:	4b6f      	ldr	r3, [pc, #444]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x200>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002268:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800226a:	4b6d      	ldr	r3, [pc, #436]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x200>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d063      	beq.n	800233e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002276:	4b6a      	ldr	r3, [pc, #424]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x200>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	099b      	lsrs	r3, r3, #6
 800227c:	2200      	movs	r2, #0
 800227e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002280:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002288:	633b      	str	r3, [r7, #48]	@ 0x30
 800228a:	2300      	movs	r3, #0
 800228c:	637b      	str	r3, [r7, #52]	@ 0x34
 800228e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002292:	4622      	mov	r2, r4
 8002294:	462b      	mov	r3, r5
 8002296:	f04f 0000 	mov.w	r0, #0
 800229a:	f04f 0100 	mov.w	r1, #0
 800229e:	0159      	lsls	r1, r3, #5
 80022a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a4:	0150      	lsls	r0, r2, #5
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4621      	mov	r1, r4
 80022ac:	1a51      	subs	r1, r2, r1
 80022ae:	6139      	str	r1, [r7, #16]
 80022b0:	4629      	mov	r1, r5
 80022b2:	eb63 0301 	sbc.w	r3, r3, r1
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022c4:	4659      	mov	r1, fp
 80022c6:	018b      	lsls	r3, r1, #6
 80022c8:	4651      	mov	r1, sl
 80022ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ce:	4651      	mov	r1, sl
 80022d0:	018a      	lsls	r2, r1, #6
 80022d2:	4651      	mov	r1, sl
 80022d4:	ebb2 0801 	subs.w	r8, r2, r1
 80022d8:	4659      	mov	r1, fp
 80022da:	eb63 0901 	sbc.w	r9, r3, r1
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022f2:	4690      	mov	r8, r2
 80022f4:	4699      	mov	r9, r3
 80022f6:	4623      	mov	r3, r4
 80022f8:	eb18 0303 	adds.w	r3, r8, r3
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	462b      	mov	r3, r5
 8002300:	eb49 0303 	adc.w	r3, r9, r3
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002312:	4629      	mov	r1, r5
 8002314:	024b      	lsls	r3, r1, #9
 8002316:	4621      	mov	r1, r4
 8002318:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800231c:	4621      	mov	r1, r4
 800231e:	024a      	lsls	r2, r1, #9
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002326:	2200      	movs	r2, #0
 8002328:	62bb      	str	r3, [r7, #40]	@ 0x28
 800232a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800232c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002330:	f7fd ffde 	bl	80002f0 <__aeabi_uldivmod>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4613      	mov	r3, r2
 800233a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800233c:	e058      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800233e:	4b38      	ldr	r3, [pc, #224]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x200>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	099b      	lsrs	r3, r3, #6
 8002344:	2200      	movs	r2, #0
 8002346:	4618      	mov	r0, r3
 8002348:	4611      	mov	r1, r2
 800234a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800234e:	623b      	str	r3, [r7, #32]
 8002350:	2300      	movs	r3, #0
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
 8002354:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002358:	4642      	mov	r2, r8
 800235a:	464b      	mov	r3, r9
 800235c:	f04f 0000 	mov.w	r0, #0
 8002360:	f04f 0100 	mov.w	r1, #0
 8002364:	0159      	lsls	r1, r3, #5
 8002366:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800236a:	0150      	lsls	r0, r2, #5
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4641      	mov	r1, r8
 8002372:	ebb2 0a01 	subs.w	sl, r2, r1
 8002376:	4649      	mov	r1, r9
 8002378:	eb63 0b01 	sbc.w	fp, r3, r1
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002388:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800238c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002390:	ebb2 040a 	subs.w	r4, r2, sl
 8002394:	eb63 050b 	sbc.w	r5, r3, fp
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	00eb      	lsls	r3, r5, #3
 80023a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023a6:	00e2      	lsls	r2, r4, #3
 80023a8:	4614      	mov	r4, r2
 80023aa:	461d      	mov	r5, r3
 80023ac:	4643      	mov	r3, r8
 80023ae:	18e3      	adds	r3, r4, r3
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	464b      	mov	r3, r9
 80023b4:	eb45 0303 	adc.w	r3, r5, r3
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023c6:	4629      	mov	r1, r5
 80023c8:	028b      	lsls	r3, r1, #10
 80023ca:	4621      	mov	r1, r4
 80023cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023d0:	4621      	mov	r1, r4
 80023d2:	028a      	lsls	r2, r1, #10
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023da:	2200      	movs	r2, #0
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	61fa      	str	r2, [r7, #28]
 80023e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023e4:	f7fd ff84 	bl	80002f0 <__aeabi_uldivmod>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4613      	mov	r3, r2
 80023ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	0c1b      	lsrs	r3, r3, #16
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	3301      	adds	r3, #1
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002400:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800240a:	e002      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800240c:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x204>)
 800240e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002414:	4618      	mov	r0, r3
 8002416:	3750      	adds	r7, #80	@ 0x50
 8002418:	46bd      	mov	sp, r7
 800241a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	00f42400 	.word	0x00f42400
 8002428:	007a1200 	.word	0x007a1200

0800242c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002430:	4b03      	ldr	r3, [pc, #12]	@ (8002440 <HAL_RCC_GetHCLKFreq+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000000 	.word	0x20000000

08002444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002448:	f7ff fff0 	bl	800242c <HAL_RCC_GetHCLKFreq>
 800244c:	4602      	mov	r2, r0
 800244e:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	0a9b      	lsrs	r3, r3, #10
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	4903      	ldr	r1, [pc, #12]	@ (8002468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800245a:	5ccb      	ldrb	r3, [r1, r3]
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40023800 	.word	0x40023800
 8002468:	0800add4 	.word	0x0800add4

0800246c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002470:	f7ff ffdc 	bl	800242c <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b05      	ldr	r3, [pc, #20]	@ (800248c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	0b5b      	lsrs	r3, r3, #13
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4903      	ldr	r1, [pc, #12]	@ (8002490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40023800 	.word	0x40023800
 8002490:	0800add4 	.word	0x0800add4

08002494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d010      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80024b8:	4b7a      	ldr	r3, [pc, #488]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80024ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024be:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	4977      	ldr	r1, [pc, #476]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80024d6:	2301      	movs	r3, #1
 80024d8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d010      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80024e6:	4b6f      	ldr	r3, [pc, #444]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80024e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024ec:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	496b      	ldr	r1, [pc, #428]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8002504:	2301      	movs	r3, #1
 8002506:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d022      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8002514:	4b63      	ldr	r3, [pc, #396]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002516:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800251a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002522:	4960      	ldr	r1, [pc, #384]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8002532:	2301      	movs	r3, #1
 8002534:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800253e:	d10c      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8002540:	4b58      	ldr	r3, [pc, #352]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002542:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002546:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	3b01      	subs	r3, #1
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	4954      	ldr	r1, [pc, #336]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d022      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8002566:	4b4f      	ldr	r3, [pc, #316]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800256c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002574:	494b      	ldr	r1, [pc, #300]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002584:	2301      	movs	r3, #1
 8002586:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002590:	d10c      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8002592:	4b44      	ldr	r3, [pc, #272]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002598:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	493f      	ldr	r1, [pc, #252]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 808a 	beq.w	80026ce <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b39      	ldr	r3, [pc, #228]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	4a38      	ldr	r2, [pc, #224]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80025c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ca:	4b36      	ldr	r3, [pc, #216]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80025d6:	4b34      	ldr	r3, [pc, #208]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a33      	ldr	r2, [pc, #204]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80025dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025e2:	f7ff f91f 	bl	8001824 <HAL_GetTick>
 80025e6:	61b8      	str	r0, [r7, #24]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ea:	f7ff f91b 	bl	8001824 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e1d1      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80025fc:	4b2a      	ldr	r3, [pc, #168]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002608:	4b26      	ldr	r3, [pc, #152]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800260c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002610:	617b      	str	r3, [r7, #20]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d02f      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	429a      	cmp	r2, r3
 8002624:	d028      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002626:	4b1f      	ldr	r3, [pc, #124]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800262e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002630:	4b1e      	ldr	r3, [pc, #120]	@ (80026ac <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002636:	4b1d      	ldr	r3, [pc, #116]	@ (80026ac <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800263c:	4a19      	ldr	r2, [pc, #100]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002642:	4b18      	ldr	r3, [pc, #96]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b01      	cmp	r3, #1
 800264c:	d114      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800264e:	f7ff f8e9 	bl	8001824 <HAL_GetTick>
 8002652:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002654:	e00a      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7ff f8e5 	bl	8001824 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e199      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266c:	4b0d      	ldr	r3, [pc, #52]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0ee      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002680:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002684:	d114      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002686:	4b07      	ldr	r3, [pc, #28]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800269a:	4902      	ldr	r1, [pc, #8]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800269c:	4313      	orrs	r3, r2
 800269e:	608b      	str	r3, [r1, #8]
 80026a0:	e00c      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x228>
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40007000 	.word	0x40007000
 80026ac:	42470e40 	.word	0x42470e40
 80026b0:	4b89      	ldr	r3, [pc, #548]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4a88      	ldr	r2, [pc, #544]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80026b6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80026ba:	6093      	str	r3, [r2, #8]
 80026bc:	4b86      	ldr	r3, [pc, #536]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80026be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c8:	4983      	ldr	r1, [pc, #524]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d004      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 80026e0:	4b7e      	ldr	r3, [pc, #504]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80026e2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80026f0:	4b79      	ldr	r3, [pc, #484]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80026f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fe:	4976      	ldr	r1, [pc, #472]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b00      	cmp	r3, #0
 8002710:	d011      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002712:	4b71      	ldr	r3, [pc, #452]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002714:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002718:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002720:	496d      	ldr	r1, [pc, #436]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002730:	d101      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8002732:	2301      	movs	r3, #1
 8002734:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002742:	4b65      	ldr	r3, [pc, #404]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002744:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002748:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	4961      	ldr	r1, [pc, #388]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d004      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b80      	cmp	r3, #128	@ 0x80
 8002764:	f040 80c6 	bne.w	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002768:	4b5d      	ldr	r3, [pc, #372]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800276e:	f7ff f859 	bl	8001824 <HAL_GetTick>
 8002772:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002776:	f7ff f855 	bl	8001824 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e10b      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002788:	4b53      	ldr	r3, [pc, #332]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f0      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002794:	4a53      	ldr	r2, [pc, #332]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800279a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d023      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x364>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d019      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x364>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d004      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x346>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027d8:	d00e      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x364>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d019      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x386>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d115      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x386>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027f6:	d110      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	019b      	lsls	r3, r3, #6
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	061b      	lsls	r3, r3, #24
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	071b      	lsls	r3, r3, #28
 8002812:	4931      	ldr	r1, [pc, #196]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x39a>
         && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
         && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8002836:	2b00      	cmp	r3, #0
 8002838:	d026      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283e:	2b00      	cmp	r3, #0
 8002840:	d122      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002842:	4b25      	ldr	r3, [pc, #148]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002848:	0e1b      	lsrs	r3, r3, #24
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	019b      	lsls	r3, r3, #6
 800285a:	431a      	orrs	r2, r3
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	061b      	lsls	r3, r3, #24
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	071b      	lsls	r3, r3, #28
 8002868:	491b      	ldr	r1, [pc, #108]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8002870:	4b19      	ldr	r3, [pc, #100]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002876:	f023 021f 	bic.w	r2, r3, #31
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	3b01      	subs	r3, #1
 8002880:	4915      	ldr	r1, [pc, #84]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002890:	2b00      	cmp	r3, #0
 8002892:	d010      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	019b      	lsls	r3, r3, #6
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	061b      	lsls	r3, r3, #24
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	071b      	lsls	r3, r3, #28
 80028ae:	490a      	ldr	r1, [pc, #40]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028b6:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028bc:	f7fe ffb2 	bl	8001824 <HAL_GetTick>
 80028c0:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028c2:	e011      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028c4:	f7fe ffae 	bl	8001824 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d90a      	bls.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e064      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	424711e0 	.word	0x424711e0
 80028e0:	42470068 	.word	0x42470068
 80028e4:	424710d8 	.word	0x424710d8
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028e8:	4b2f      	ldr	r3, [pc, #188]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0e7      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002900:	4b29      	ldr	r3, [pc, #164]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002902:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002906:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800290e:	4926      	ldr	r1, [pc, #152]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002922:	4b21      	ldr	r3, [pc, #132]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002928:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002930:	491d      	ldr	r1, [pc, #116]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8002944:	4b18      	ldr	r3, [pc, #96]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800294a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002952:	4915      	ldr	r1, [pc, #84]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8002966:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800296c:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	490c      	ldr	r1, [pc, #48]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002988:	4b07      	ldr	r3, [pc, #28]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800298a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800298e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	4904      	ldr	r1, [pc, #16]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40023800 	.word	0x40023800

080029ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e273      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d075      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029ca:	4b88      	ldr	r3, [pc, #544]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d00c      	beq.n	80029f0 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d6:	4b85      	ldr	r3, [pc, #532]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
        || \
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d112      	bne.n	8002a08 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e2:	4b82      	ldr	r3, [pc, #520]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029ee:	d10b      	bne.n	8002a08 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f0:	4b7e      	ldr	r3, [pc, #504]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d05b      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x108>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d157      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e24e      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a10:	d106      	bne.n	8002a20 <HAL_RCC_OscConfig+0x74>
 8002a12:	4b76      	ldr	r3, [pc, #472]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a75      	ldr	r2, [pc, #468]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e01d      	b.n	8002a5c <HAL_RCC_OscConfig+0xb0>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x98>
 8002a2a:	4b70      	ldr	r3, [pc, #448]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a6f      	ldr	r2, [pc, #444]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	4b6d      	ldr	r3, [pc, #436]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a6c      	ldr	r2, [pc, #432]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e00b      	b.n	8002a5c <HAL_RCC_OscConfig+0xb0>
 8002a44:	4b69      	ldr	r3, [pc, #420]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a68      	ldr	r2, [pc, #416]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b66      	ldr	r3, [pc, #408]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a65      	ldr	r2, [pc, #404]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d013      	beq.n	8002a8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe fede 	bl	8001824 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7fe feda 	bl	8001824 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	@ 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e213      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0xc0>
 8002a8a:	e014      	b.n	8002ab6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe feca 	bl	8001824 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a94:	f7fe fec6 	bl	8001824 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	@ 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e1ff      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa6:	4b51      	ldr	r3, [pc, #324]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0xe8>
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d063      	beq.n	8002b8a <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00b      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ace:	4b47      	ldr	r3, [pc, #284]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d11c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ada:	4b44      	ldr	r3, [pc, #272]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d116      	bne.n	8002b14 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae6:	4b41      	ldr	r3, [pc, #260]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_RCC_OscConfig+0x152>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d001      	beq.n	8002afe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e1d3      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afe:	4b3b      	ldr	r3, [pc, #236]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4937      	ldr	r1, [pc, #220]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b12:	e03a      	b.n	8002b8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d020      	beq.n	8002b5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b1c:	4b34      	ldr	r3, [pc, #208]	@ (8002bf0 <HAL_RCC_OscConfig+0x244>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b22:	f7fe fe7f 	bl	8001824 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b2a:	f7fe fe7b 	bl	8001824 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e1b4      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b48:	4b28      	ldr	r3, [pc, #160]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4925      	ldr	r1, [pc, #148]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	600b      	str	r3, [r1, #0]
 8002b5c:	e015      	b.n	8002b8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b5e:	4b24      	ldr	r3, [pc, #144]	@ (8002bf0 <HAL_RCC_OscConfig+0x244>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7fe fe5e 	bl	8001824 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b6c:	f7fe fe5a 	bl	8001824 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e193      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d036      	beq.n	8002c04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d016      	beq.n	8002bcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9e:	4b15      	ldr	r3, [pc, #84]	@ (8002bf4 <HAL_RCC_OscConfig+0x248>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe fe3e 	bl	8001824 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bac:	f7fe fe3a 	bl	8001824 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e173      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x200>
 8002bca:	e01b      	b.n	8002c04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bcc:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <HAL_RCC_OscConfig+0x248>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd2:	f7fe fe27 	bl	8001824 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd8:	e00e      	b.n	8002bf8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bda:	f7fe fe23 	bl	8001824 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d907      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e15c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4fa>
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	42470000 	.word	0x42470000
 8002bf4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf8:	4b8a      	ldr	r3, [pc, #552]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002bfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1ea      	bne.n	8002bda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8097 	beq.w	8002d40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c16:	4b83      	ldr	r3, [pc, #524]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10f      	bne.n	8002c42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	4b7f      	ldr	r3, [pc, #508]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c32:	4b7c      	ldr	r3, [pc, #496]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c42:	4b79      	ldr	r3, [pc, #484]	@ (8002e28 <HAL_RCC_OscConfig+0x47c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d118      	bne.n	8002c80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4e:	4b76      	ldr	r3, [pc, #472]	@ (8002e28 <HAL_RCC_OscConfig+0x47c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a75      	ldr	r2, [pc, #468]	@ (8002e28 <HAL_RCC_OscConfig+0x47c>)
 8002c54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c5a:	f7fe fde3 	bl	8001824 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c62:	f7fe fddf 	bl	8001824 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e118      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	4b6c      	ldr	r3, [pc, #432]	@ (8002e28 <HAL_RCC_OscConfig+0x47c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d106      	bne.n	8002c96 <HAL_RCC_OscConfig+0x2ea>
 8002c88:	4b66      	ldr	r3, [pc, #408]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8c:	4a65      	ldr	r2, [pc, #404]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c94:	e01c      	b.n	8002cd0 <HAL_RCC_OscConfig+0x324>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b05      	cmp	r3, #5
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x30c>
 8002c9e:	4b61      	ldr	r3, [pc, #388]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca2:	4a60      	ldr	r2, [pc, #384]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002ca4:	f043 0304 	orr.w	r3, r3, #4
 8002ca8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002caa:	4b5e      	ldr	r3, [pc, #376]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cae:	4a5d      	ldr	r2, [pc, #372]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb6:	e00b      	b.n	8002cd0 <HAL_RCC_OscConfig+0x324>
 8002cb8:	4b5a      	ldr	r3, [pc, #360]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbc:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc4:	4b57      	ldr	r3, [pc, #348]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc8:	4a56      	ldr	r2, [pc, #344]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002cca:	f023 0304 	bic.w	r3, r3, #4
 8002cce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d015      	beq.n	8002d04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fe fda4 	bl	8001824 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce0:	f7fe fda0 	bl	8001824 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e0d7      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf6:	4b4b      	ldr	r3, [pc, #300]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0ee      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x334>
 8002d02:	e014      	b.n	8002d2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d04:	f7fe fd8e 	bl	8001824 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0c:	f7fe fd8a 	bl	8001824 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e0c1      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d22:	4b40      	ldr	r3, [pc, #256]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1ee      	bne.n	8002d0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d2e:	7dfb      	ldrb	r3, [r7, #23]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d105      	bne.n	8002d40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d34:	4b3b      	ldr	r3, [pc, #236]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	4a3a      	ldr	r2, [pc, #232]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002d3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80ad 	beq.w	8002ea4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d4a:	4b36      	ldr	r3, [pc, #216]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d060      	beq.n	8002e18 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d145      	bne.n	8002dea <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5e:	4b33      	ldr	r3, [pc, #204]	@ (8002e2c <HAL_RCC_OscConfig+0x480>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe fd5e 	bl	8001824 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7fe fd5a 	bl	8001824 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e093      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	4b29      	ldr	r3, [pc, #164]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	019b      	lsls	r3, r3, #6
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	3b01      	subs	r3, #1
 8002da4:	041b      	lsls	r3, r3, #16
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dac:	061b      	lsls	r3, r3, #24
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db4:	071b      	lsls	r3, r3, #28
 8002db6:	491b      	ldr	r1, [pc, #108]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <HAL_RCC_OscConfig+0x480>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe fd2f 	bl	8001824 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dca:	f7fe fd2b 	bl	8001824 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e064      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ddc:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x41e>
 8002de8:	e05c      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b10      	ldr	r3, [pc, #64]	@ (8002e2c <HAL_RCC_OscConfig+0x480>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df0:	f7fe fd18 	bl	8001824 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe fd14 	bl	8001824 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e04d      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0a:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x44c>
 8002e16:	e045      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e040      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4fa>
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40007000 	.word	0x40007000
 8002e2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e30:	4b1f      	ldr	r3, [pc, #124]	@ (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d030      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d129      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d122      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e60:	4013      	ands	r3, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d119      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e76:	085b      	lsrs	r3, r3, #1
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d10f      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d107      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800

08002eb4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e022      	b.n	8002f0c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d105      	bne.n	8002ede <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7fe fa05 	bl	80012e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f814 	bl	8002f14 <HAL_SD_InitCard>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e00a      	b.n	8002f0c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002f14:	b5b0      	push	{r4, r5, r7, lr}
 8002f16:	b08e      	sub	sp, #56	@ 0x38
 8002f18:	af04      	add	r7, sp, #16
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002f30:	2376      	movs	r3, #118	@ 0x76
 8002f32:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681d      	ldr	r5, [r3, #0]
 8002f38:	466c      	mov	r4, sp
 8002f3a:	f107 0318 	add.w	r3, r7, #24
 8002f3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f46:	f107 030c 	add.w	r3, r7, #12
 8002f4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	f001 fd4f 	bl	80049f0 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002f52:	4b2a      	ldr	r3, [pc, #168]	@ (8002ffc <HAL_SD_InitCard+0xe8>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 fd90 	bl	8004a82 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002f62:	4b26      	ldr	r3, [pc, #152]	@ (8002ffc <HAL_SD_InitCard+0xe8>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002f68:	2002      	movs	r0, #2
 8002f6a:	f7fe fc67 	bl	800183c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 ff04 	bl	8003d7c <SD_PowerON>
 8002f74:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00b      	beq.n	8002f94 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e02e      	b.n	8002ff2 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fe23 	bl	8003be0 <SD_InitCard>
 8002f9a:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00b      	beq.n	8002fba <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e01b      	b.n	8002ff2 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f001 fdef 	bl	8004ba6 <SDMMC_CmdBlockLength>
 8002fc8:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00f      	beq.n	8002ff0 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8003000 <HAL_SD_InitCard+0xec>)
 8002fd6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3728      	adds	r7, #40	@ 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	422580a0 	.word	0x422580a0
 8003000:	004005ff 	.word	0x004005ff

08003004 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b092      	sub	sp, #72	@ 0x48
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003012:	f7fe fc07 	bl	8001824 <HAL_GetTick>
 8003016:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d107      	bne.n	8003036 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e1bd      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	f040 81b0 	bne.w	80033a4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800304a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	441a      	add	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003054:	429a      	cmp	r2, r3
 8003056:	d907      	bls.n	8003068 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e1a4      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2203      	movs	r2, #3
 800306c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2200      	movs	r2, #0
 8003076:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307c:	2b01      	cmp	r3, #1
 800307e:	d002      	beq.n	8003086 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003082:	025b      	lsls	r3, r3, #9
 8003084:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800308a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	025b      	lsls	r3, r3, #9
 8003090:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003092:	2390      	movs	r3, #144	@ 0x90
 8003094:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003096:	2302      	movs	r3, #2
 8003098:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800309e:	2301      	movs	r3, #1
 80030a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f107 0214 	add.w	r2, r7, #20
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f001 fd4e 	bl	8004b4e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d90a      	bls.n	80030ce <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2202      	movs	r2, #2
 80030bc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030c4:	4618      	mov	r0, r3
 80030c6:	f001 fdb2 	bl	8004c2e <SDMMC_CmdReadMultiBlock>
 80030ca:	6478      	str	r0, [r7, #68]	@ 0x44
 80030cc:	e009      	b.n	80030e2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030da:	4618      	mov	r0, r3
 80030dc:	f001 fd85 	bl	8004bea <SDMMC_CmdReadSingleBlock>
 80030e0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80030e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d012      	beq.n	800310e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a7a      	ldr	r2, [pc, #488]	@ (80032d8 <HAL_SD_ReadBlocks+0x2d4>)
 80030ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030f6:	431a      	orrs	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e151      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003112:	e061      	b.n	80031d8 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d03c      	beq.n	800319c <HAL_SD_ReadBlocks+0x198>
 8003122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003124:	2b00      	cmp	r3, #0
 8003126:	d039      	beq.n	800319c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003128:	2300      	movs	r3, #0
 800312a:	643b      	str	r3, [r7, #64]	@ 0x40
 800312c:	e033      	b.n	8003196 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f001 fc87 	bl	8004a46 <SDIO_ReadFIFO>
 8003138:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800313a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313c:	b2da      	uxtb	r2, r3
 800313e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003140:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003144:	3301      	adds	r3, #1
 8003146:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800314a:	3b01      	subs	r3, #1
 800314c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800314e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003150:	0a1b      	lsrs	r3, r3, #8
 8003152:	b2da      	uxtb	r2, r3
 8003154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003156:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315a:	3301      	adds	r3, #1
 800315c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800315e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003160:	3b01      	subs	r3, #1
 8003162:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003166:	0c1b      	lsrs	r3, r3, #16
 8003168:	b2da      	uxtb	r2, r3
 800316a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800316e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003170:	3301      	adds	r3, #1
 8003172:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003176:	3b01      	subs	r3, #1
 8003178:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800317a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317c:	0e1b      	lsrs	r3, r3, #24
 800317e:	b2da      	uxtb	r2, r3
 8003180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003182:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003186:	3301      	adds	r3, #1
 8003188:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800318a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800318c:	3b01      	subs	r3, #1
 800318e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8003190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003192:	3301      	adds	r3, #1
 8003194:	643b      	str	r3, [r7, #64]	@ 0x40
 8003196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003198:	2b07      	cmp	r3, #7
 800319a:	d9c8      	bls.n	800312e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800319c:	f7fe fb42 	bl	8001824 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d902      	bls.n	80031b2 <HAL_SD_ReadBlocks+0x1ae>
 80031ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d112      	bne.n	80031d8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a48      	ldr	r2, [pc, #288]	@ (80032d8 <HAL_SD_ReadBlocks+0x2d4>)
 80031b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031be:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e0ec      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031de:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d096      	beq.n	8003114 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d022      	beq.n	800323a <HAL_SD_ReadBlocks+0x236>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d91f      	bls.n	800323a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d01b      	beq.n	800323a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f001 fd78 	bl	8004cfc <SDMMC_CmdStopTransfer>
 800320c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800320e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003210:	2b00      	cmp	r3, #0
 8003212:	d012      	beq.n	800323a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2f      	ldr	r2, [pc, #188]	@ (80032d8 <HAL_SD_ReadBlocks+0x2d4>)
 800321a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003222:	431a      	orrs	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0bb      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d012      	beq.n	800326e <HAL_SD_ReadBlocks+0x26a>
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a22      	ldr	r2, [pc, #136]	@ (80032d8 <HAL_SD_ReadBlocks+0x2d4>)
 800324e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003254:	f043 0208 	orr.w	r2, r3, #8
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e0a1      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d012      	beq.n	80032a2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a15      	ldr	r2, [pc, #84]	@ (80032d8 <HAL_SD_ReadBlocks+0x2d4>)
 8003282:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003288:	f043 0202 	orr.w	r2, r3, #2
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e087      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d064      	beq.n	800337a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a08      	ldr	r2, [pc, #32]	@ (80032d8 <HAL_SD_ReadBlocks+0x2d4>)
 80032b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e06d      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
 80032d6:	bf00      	nop
 80032d8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f001 fbb0 	bl	8004a46 <SDIO_ReadFIFO>
 80032e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80032e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80032f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032f2:	3301      	adds	r3, #1
 80032f4:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80032f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032f8:	3b01      	subs	r3, #1
 80032fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80032fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	b2da      	uxtb	r2, r3
 8003302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003304:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003308:	3301      	adds	r3, #1
 800330a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800330c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800330e:	3b01      	subs	r3, #1
 8003310:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	b2da      	uxtb	r2, r3
 8003318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800331c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331e:	3301      	adds	r3, #1
 8003320:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003324:	3b01      	subs	r3, #1
 8003326:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332a:	0e1b      	lsrs	r3, r3, #24
 800332c:	b2da      	uxtb	r2, r3
 800332e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003330:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003334:	3301      	adds	r3, #1
 8003336:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800333a:	3b01      	subs	r3, #1
 800333c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800333e:	f7fe fa71 	bl	8001824 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800334a:	429a      	cmp	r2, r3
 800334c:	d902      	bls.n	8003354 <HAL_SD_ReadBlocks+0x350>
 800334e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003350:	2b00      	cmp	r3, #0
 8003352:	d112      	bne.n	800337a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a18      	ldr	r2, [pc, #96]	@ (80033bc <HAL_SD_ReadBlocks+0x3b8>)
 800335a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003360:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e01b      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_SD_ReadBlocks+0x38a>
 8003388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1a6      	bne.n	80032dc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003396:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	e006      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
  }
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3748      	adds	r7, #72	@ 0x48
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	004005ff 	.word	0x004005ff

080033c0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b092      	sub	sp, #72	@ 0x48
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80033ce:	f7fe fa29 	bl	8001824 <HAL_GetTick>
 80033d2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d107      	bne.n	80033f2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e165      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	f040 8158 	bne.w	80036b0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003406:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	441a      	add	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003410:	429a      	cmp	r2, r3
 8003412:	d907      	bls.n	8003424 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003418:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e14c      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2203      	movs	r2, #3
 8003428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2200      	movs	r2, #0
 8003432:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003438:	2b01      	cmp	r3, #1
 800343a:	d002      	beq.n	8003442 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800343c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343e:	025b      	lsls	r3, r3, #9
 8003440:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003442:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003446:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	025b      	lsls	r3, r3, #9
 800344c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800344e:	2390      	movs	r3, #144	@ 0x90
 8003450:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003452:	2300      	movs	r3, #0
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003456:	2300      	movs	r3, #0
 8003458:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800345a:	2301      	movs	r3, #1
 800345c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f107 0218 	add.w	r2, r7, #24
 8003466:	4611      	mov	r1, r2
 8003468:	4618      	mov	r0, r3
 800346a:	f001 fb70 	bl	8004b4e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d90a      	bls.n	800348a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003480:	4618      	mov	r0, r3
 8003482:	f001 fc18 	bl	8004cb6 <SDMMC_CmdWriteMultiBlock>
 8003486:	6478      	str	r0, [r7, #68]	@ 0x44
 8003488:	e009      	b.n	800349e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2210      	movs	r2, #16
 800348e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003496:	4618      	mov	r0, r3
 8003498:	f001 fbeb 	bl	8004c72 <SDMMC_CmdWriteSingleBlock>
 800349c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800349e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d012      	beq.n	80034ca <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a87      	ldr	r2, [pc, #540]	@ (80036c8 <HAL_SD_WriteBlocks+0x308>)
 80034aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034b2:	431a      	orrs	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e0f9      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80034ce:	e065      	b.n	800359c <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d040      	beq.n	8003560 <HAL_SD_WriteBlocks+0x1a0>
 80034de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d03d      	beq.n	8003560 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80034e4:	2300      	movs	r3, #0
 80034e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80034e8:	e037      	b.n	800355a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80034ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80034f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f2:	3301      	adds	r3, #1
 80034f4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80034f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034f8:	3b01      	subs	r3, #1
 80034fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80034fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	021a      	lsls	r2, r3, #8
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350a:	3301      	adds	r3, #1
 800350c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800350e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003510:	3b01      	subs	r3, #1
 8003512:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	041a      	lsls	r2, r3, #16
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003522:	3301      	adds	r3, #1
 8003524:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003528:	3b01      	subs	r3, #1
 800352a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800352c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	061a      	lsls	r2, r3, #24
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353a:	3301      	adds	r3, #1
 800353c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800353e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003540:	3b01      	subs	r3, #1
 8003542:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f107 0214 	add.w	r2, r7, #20
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f001 fa86 	bl	8004a60 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003556:	3301      	adds	r3, #1
 8003558:	643b      	str	r3, [r7, #64]	@ 0x40
 800355a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800355c:	2b07      	cmp	r3, #7
 800355e:	d9c4      	bls.n	80034ea <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003560:	f7fe f960 	bl	8001824 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800356c:	429a      	cmp	r2, r3
 800356e:	d902      	bls.n	8003576 <HAL_SD_WriteBlocks+0x1b6>
 8003570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003572:	2b00      	cmp	r3, #0
 8003574:	d112      	bne.n	800359c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a53      	ldr	r2, [pc, #332]	@ (80036c8 <HAL_SD_WriteBlocks+0x308>)
 800357c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003584:	431a      	orrs	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e090      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a2:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d092      	beq.n	80034d0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d022      	beq.n	80035fe <HAL_SD_WriteBlocks+0x23e>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d91f      	bls.n	80035fe <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d01b      	beq.n	80035fe <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f001 fb96 	bl	8004cfc <SDMMC_CmdStopTransfer>
 80035d0:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80035d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d012      	beq.n	80035fe <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a3a      	ldr	r2, [pc, #232]	@ (80036c8 <HAL_SD_WriteBlocks+0x308>)
 80035de:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035e6:	431a      	orrs	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e05f      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d012      	beq.n	8003632 <HAL_SD_WriteBlocks+0x272>
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a2d      	ldr	r2, [pc, #180]	@ (80036c8 <HAL_SD_WriteBlocks+0x308>)
 8003612:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003618:	f043 0208 	orr.w	r2, r3, #8
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e045      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d012      	beq.n	8003666 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a20      	ldr	r2, [pc, #128]	@ (80036c8 <HAL_SD_WriteBlocks+0x308>)
 8003646:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364c:	f043 0202 	orr.w	r2, r3, #2
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e02b      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d012      	beq.n	800369a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a13      	ldr	r2, [pc, #76]	@ (80036c8 <HAL_SD_WriteBlocks+0x308>)
 800367a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003680:	f043 0210 	orr.w	r2, r3, #16
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e011      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f240 523a 	movw	r2, #1338	@ 0x53a
 80036a2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	e006      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3748      	adds	r7, #72	@ 0x48
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	004005ff 	.word	0x004005ff

080036cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036da:	0f9b      	lsrs	r3, r3, #30
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036e6:	0e9b      	lsrs	r3, r3, #26
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036f8:	0e1b      	lsrs	r3, r3, #24
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	b2da      	uxtb	r2, r3
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800370a:	0c1b      	lsrs	r3, r3, #16
 800370c:	b2da      	uxtb	r2, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	b2da      	uxtb	r2, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003722:	b2da      	uxtb	r2, r3
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800372c:	0d1b      	lsrs	r3, r3, #20
 800372e:	b29a      	uxth	r2, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	b2da      	uxtb	r2, r3
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800374a:	0bdb      	lsrs	r3, r3, #15
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	b2da      	uxtb	r2, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800375c:	0b9b      	lsrs	r3, r3, #14
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	b2da      	uxtb	r2, r3
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800376e:	0b5b      	lsrs	r3, r3, #13
 8003770:	b2db      	uxtb	r3, r3
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	b2da      	uxtb	r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003780:	0b1b      	lsrs	r3, r3, #12
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	b2da      	uxtb	r2, r3
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2200      	movs	r2, #0
 8003792:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003798:	2b00      	cmp	r3, #0
 800379a:	d163      	bne.n	8003864 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037a0:	009a      	lsls	r2, r3, #2
 80037a2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037a6:	4013      	ands	r3, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80037ac:	0f92      	lsrs	r2, r2, #30
 80037ae:	431a      	orrs	r2, r3
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037b8:	0edb      	lsrs	r3, r3, #27
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037ca:	0e1b      	lsrs	r3, r3, #24
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037dc:	0d5b      	lsrs	r3, r3, #21
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037ee:	0c9b      	lsrs	r3, r3, #18
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003800:	0bdb      	lsrs	r3, r3, #15
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	b2da      	uxtb	r2, r3
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	7e1b      	ldrb	r3, [r3, #24]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	3302      	adds	r3, #2
 8003824:	2201      	movs	r2, #1
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800382e:	fb03 f202 	mul.w	r2, r3, r2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	7a1b      	ldrb	r3, [r3, #8]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	2201      	movs	r2, #1
 8003842:	409a      	lsls	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003850:	0a52      	lsrs	r2, r2, #9
 8003852:	fb03 f202 	mul.w	r2, r3, r2
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003860:	661a      	str	r2, [r3, #96]	@ 0x60
 8003862:	e031      	b.n	80038c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003868:	2b01      	cmp	r3, #1
 800386a:	d11d      	bne.n	80038a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003870:	041b      	lsls	r3, r3, #16
 8003872:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800387a:	0c1b      	lsrs	r3, r3, #16
 800387c:	431a      	orrs	r2, r3
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	3301      	adds	r3, #1
 8003888:	029a      	lsls	r2, r3, #10
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800389c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	661a      	str	r2, [r3, #96]	@ 0x60
 80038a6:	e00f      	b.n	80038c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a58      	ldr	r2, [pc, #352]	@ (8003a10 <HAL_SD_GetCardCSD+0x344>)
 80038ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e09d      	b.n	8003a04 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038cc:	0b9b      	lsrs	r3, r3, #14
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038de:	09db      	lsrs	r3, r3, #7
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003900:	0fdb      	lsrs	r3, r3, #31
 8003902:	b2da      	uxtb	r2, r3
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390c:	0f5b      	lsrs	r3, r3, #29
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	b2da      	uxtb	r2, r3
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391e:	0e9b      	lsrs	r3, r3, #26
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	b2da      	uxtb	r2, r3
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003930:	0d9b      	lsrs	r3, r3, #22
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	b2da      	uxtb	r2, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003942:	0d5b      	lsrs	r3, r3, #21
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	b2da      	uxtb	r2, r3
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395e:	0c1b      	lsrs	r3, r3, #16
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	b2da      	uxtb	r2, r3
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003972:	0bdb      	lsrs	r3, r3, #15
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	b2da      	uxtb	r2, r3
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003986:	0b9b      	lsrs	r3, r3, #14
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	b2da      	uxtb	r2, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399a:	0b5b      	lsrs	r3, r3, #13
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ae:	0b1b      	lsrs	r3, r3, #12
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c2:	0a9b      	lsrs	r3, r3, #10
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d6:	0a1b      	lsrs	r3, r3, #8
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	004005ff 	.word	0x004005ff

08003a14 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003a6c:	b5b0      	push	{r4, r5, r7, lr}
 8003a6e:	b08e      	sub	sp, #56	@ 0x38
 8003a70:	af04      	add	r7, sp, #16
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2203      	movs	r2, #3
 8003a80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d02e      	beq.n	8003aea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a92:	d106      	bne.n	8003aa2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a98:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003aa0:	e029      	b.n	8003af6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aa8:	d10a      	bne.n	8003ac0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fa1c 	bl	8003ee8 <SD_WideBus_Enable>
 8003ab0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	639a      	str	r2, [r3, #56]	@ 0x38
 8003abe:	e01a      	b.n	8003af6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10a      	bne.n	8003adc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa59 	bl	8003f7e <SD_WideBus_Disable>
 8003acc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ada:	e00c      	b.n	8003af6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ae8:	e005      	b.n	8003af6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aee:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a26      	ldr	r2, [pc, #152]	@ (8003b9c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003b04:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003b14:	e01f      	b.n	8003b56 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681d      	ldr	r5, [r3, #0]
 8003b3c:	466c      	mov	r4, sp
 8003b3e:	f107 0314 	add.w	r3, r7, #20
 8003b42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b4a:	f107 0308 	add.w	r3, r7, #8
 8003b4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b50:	4628      	mov	r0, r5
 8003b52:	f000 ff4d 	bl	80049f0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f001 f821 	bl	8004ba6 <SDMMC_CmdBlockLength>
 8003b64:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00c      	beq.n	8003b86 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a0a      	ldr	r2, [pc, #40]	@ (8003b9c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003b72:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8003b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3728      	adds	r7, #40	@ 0x28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bdb0      	pop	{r4, r5, r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	004005ff 	.word	0x004005ff

08003ba0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003bac:	f107 030c 	add.w	r3, r7, #12
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f970 	bl	8003e98 <SD_SendStatus>
 8003bb8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	0a5b      	lsrs	r3, r3, #9
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003bd6:	693b      	ldr	r3, [r7, #16]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003be0:	b5b0      	push	{r4, r5, r7, lr}
 8003be2:	b094      	sub	sp, #80	@ 0x50
 8003be4:	af04      	add	r7, sp, #16
 8003be6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003be8:	2301      	movs	r3, #1
 8003bea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 ff54 	bl	8004a9e <SDIO_GetPowerState>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d102      	bne.n	8003c02 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003bfc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003c00:	e0b8      	b.n	8003d74 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d02f      	beq.n	8003c6a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f001 f97e 	bl	8004f10 <SDMMC_CmdSendCID>
 8003c14:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <SD_InitCard+0x40>
    {
      return errorstate;
 8003c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c1e:	e0a9      	b.n	8003d74 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 ff7e 	bl	8004b28 <SDIO_GetResponse>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2104      	movs	r1, #4
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 ff75 	bl	8004b28 <SDIO_GetResponse>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2108      	movs	r1, #8
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 ff6c 	bl	8004b28 <SDIO_GetResponse>
 8003c50:	4602      	mov	r2, r0
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	210c      	movs	r1, #12
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 ff63 	bl	8004b28 <SDIO_GetResponse>
 8003c62:	4602      	mov	r2, r0
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d00d      	beq.n	8003c8e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f107 020e 	add.w	r2, r7, #14
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f001 f984 	bl	8004f8a <SDMMC_CmdSetRelAdd>
 8003c82:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <SD_InitCard+0xae>
    {
      return errorstate;
 8003c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c8c:	e072      	b.n	8003d74 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d036      	beq.n	8003d04 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003c96:	89fb      	ldrh	r3, [r7, #14]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca6:	041b      	lsls	r3, r3, #16
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4610      	mov	r0, r2
 8003cac:	f001 f94e 	bl	8004f4c <SDMMC_CmdSendCSD>
 8003cb0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <SD_InitCard+0xdc>
    {
      return errorstate;
 8003cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cba:	e05b      	b.n	8003d74 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 ff30 	bl	8004b28 <SDIO_GetResponse>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2104      	movs	r1, #4
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 ff27 	bl	8004b28 <SDIO_GetResponse>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2108      	movs	r1, #8
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 ff1e 	bl	8004b28 <SDIO_GetResponse>
 8003cec:	4602      	mov	r2, r0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	210c      	movs	r1, #12
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 ff15 	bl	8004b28 <SDIO_GetResponse>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2104      	movs	r1, #4
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 ff0c 	bl	8004b28 <SDIO_GetResponse>
 8003d10:	4603      	mov	r3, r0
 8003d12:	0d1a      	lsrs	r2, r3, #20
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003d18:	f107 0310 	add.w	r3, r7, #16
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff fcd4 	bl	80036cc <HAL_SD_GetCardCSD>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003d2e:	e021      	b.n	8003d74 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6819      	ldr	r1, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d38:	041b      	lsls	r3, r3, #16
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	461c      	mov	r4, r3
 8003d3e:	4615      	mov	r5, r2
 8003d40:	4622      	mov	r2, r4
 8003d42:	462b      	mov	r3, r5
 8003d44:	4608      	mov	r0, r1
 8003d46:	f000 fffb 	bl	8004d40 <SDMMC_CmdSelDesel>
 8003d4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <SD_InitCard+0x176>
  {
    return errorstate;
 8003d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d54:	e00e      	b.n	8003d74 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681d      	ldr	r5, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	466c      	mov	r4, sp
 8003d5e:	f103 0210 	add.w	r2, r3, #16
 8003d62:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d68:	3304      	adds	r3, #4
 8003d6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	f000 fe3f 	bl	80049f0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3740      	adds	r7, #64	@ 0x40
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bdb0      	pop	{r4, r5, r7, pc}

08003d7c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fff6 	bl	8004d86 <SDMMC_CmdGoIdleState>
 8003d9a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	e072      	b.n	8003e8c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 f809 	bl	8004dc2 <SDMMC_CmdOperCond>
 8003db0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 ffdf 	bl	8004d86 <SDMMC_CmdGoIdleState>
 8003dc8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d004      	beq.n	8003dda <SD_PowerON+0x5e>
    {
      return errorstate;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	e05b      	b.n	8003e8c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d137      	bne.n	8003e52 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2100      	movs	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 f809 	bl	8004e00 <SDMMC_CmdAppCommand>
 8003dee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d02d      	beq.n	8003e52 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003df6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003dfa:	e047      	b.n	8003e8c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2100      	movs	r1, #0
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fffc 	bl	8004e00 <SDMMC_CmdAppCommand>
 8003e08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <SD_PowerON+0x98>
    {
      return errorstate;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	e03b      	b.n	8003e8c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	491e      	ldr	r1, [pc, #120]	@ (8003e94 <SD_PowerON+0x118>)
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f001 f812 	bl	8004e44 <SDMMC_CmdAppOperCommand>
 8003e20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003e2c:	e02e      	b.n	8003e8c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2100      	movs	r1, #0
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fe77 	bl	8004b28 <SDIO_GetResponse>
 8003e3a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	0fdb      	lsrs	r3, r3, #31
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <SD_PowerON+0xcc>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <SD_PowerON+0xce>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	613b      	str	r3, [r7, #16]

    count++;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d802      	bhi.n	8003e62 <SD_PowerON+0xe6>
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0cc      	beq.n	8003dfc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d902      	bls.n	8003e72 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003e6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e70:	e00c      	b.n	8003e8c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	645a      	str	r2, [r3, #68]	@ 0x44
 8003e82:	e002      	b.n	8003e8a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	c1100000 	.word	0xc1100000

08003e98 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003ea8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003eac:	e018      	b.n	8003ee0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb6:	041b      	lsls	r3, r3, #16
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	f001 f886 	bl	8004fcc <SDMMC_CmdSendStatus>
 8003ec0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <SD_SendStatus+0x34>
  {
    return errorstate;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	e009      	b.n	8003ee0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fe28 	bl	8004b28 <SDIO_GetResponse>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2100      	movs	r1, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fe12 	bl	8004b28 <SDIO_GetResponse>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f0e:	d102      	bne.n	8003f16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003f10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f14:	e02f      	b.n	8003f76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003f16:	f107 030c 	add.w	r3, r7, #12
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f879 	bl	8004014 <SD_FindSCR>
 8003f22:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	e023      	b.n	8003f76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01c      	beq.n	8003f72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f40:	041b      	lsls	r3, r3, #16
 8003f42:	4619      	mov	r1, r3
 8003f44:	4610      	mov	r0, r2
 8003f46:	f000 ff5b 	bl	8004e00 <SDMMC_CmdAppCommand>
 8003f4a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	e00f      	b.n	8003f76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 ff94 	bl	8004e8a <SDMMC_CmdBusWidth>
 8003f62:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	e003      	b.n	8003f76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e001      	b.n	8003f76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003f72:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b086      	sub	sp, #24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2100      	movs	r1, #0
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fdc7 	bl	8004b28 <SDIO_GetResponse>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fa4:	d102      	bne.n	8003fac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003fa6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003faa:	e02f      	b.n	800400c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003fac:	f107 030c 	add.w	r3, r7, #12
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f82e 	bl	8004014 <SD_FindSCR>
 8003fb8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	e023      	b.n	800400c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d01c      	beq.n	8004008 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd6:	041b      	lsls	r3, r3, #16
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4610      	mov	r0, r2
 8003fdc:	f000 ff10 	bl	8004e00 <SDMMC_CmdAppCommand>
 8003fe0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	e00f      	b.n	800400c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 ff49 	bl	8004e8a <SDMMC_CmdBusWidth>
 8003ff8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	e003      	b.n	800400c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004004:	2300      	movs	r3, #0
 8004006:	e001      	b.n	800400c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004008:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b08f      	sub	sp, #60	@ 0x3c
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800401e:	f7fd fc01 	bl	8001824 <HAL_GetTick>
 8004022:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004028:	2300      	movs	r3, #0
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2108      	movs	r1, #8
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fdb3 	bl	8004ba6 <SDMMC_CmdBlockLength>
 8004040:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404a:	e0b2      	b.n	80041b2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004054:	041b      	lsls	r3, r3, #16
 8004056:	4619      	mov	r1, r3
 8004058:	4610      	mov	r0, r2
 800405a:	f000 fed1 	bl	8004e00 <SDMMC_CmdAppCommand>
 800405e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004068:	e0a3      	b.n	80041b2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800406a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800406e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004070:	2308      	movs	r3, #8
 8004072:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004074:	2330      	movs	r3, #48	@ 0x30
 8004076:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004078:	2302      	movs	r3, #2
 800407a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800407c:	2300      	movs	r3, #0
 800407e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004080:	2301      	movs	r3, #1
 8004082:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f107 0210 	add.w	r2, r7, #16
 800408c:	4611      	mov	r1, r2
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fd5d 	bl	8004b4e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f000 ff18 	bl	8004ece <SDMMC_CmdSendSCR>
 800409e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80040a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d02a      	beq.n	80040fc <SD_FindSCR+0xe8>
  {
    return errorstate;
 80040a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a8:	e083      	b.n	80041b2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00f      	beq.n	80040d8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6819      	ldr	r1, [r3, #0]
 80040bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	f107 0208 	add.w	r2, r7, #8
 80040c4:	18d4      	adds	r4, r2, r3
 80040c6:	4608      	mov	r0, r1
 80040c8:	f000 fcbd 	bl	8004a46 <SDIO_ReadFIFO>
 80040cc:	4603      	mov	r3, r0
 80040ce:	6023      	str	r3, [r4, #0]
      index++;
 80040d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d2:	3301      	adds	r3, #1
 80040d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80040d6:	e006      	b.n	80040e6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d012      	beq.n	800410c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80040e6:	f7fd fb9d 	bl	8001824 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040f4:	d102      	bne.n	80040fc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80040f6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80040fa:	e05a      	b.n	80041b2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004102:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0cf      	beq.n	80040aa <SD_FindSCR+0x96>
 800410a:	e000      	b.n	800410e <SD_FindSCR+0xfa>
      break;
 800410c:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2208      	movs	r2, #8
 8004122:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004124:	2308      	movs	r3, #8
 8004126:	e044      	b.n	80041b2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2202      	movs	r2, #2
 800413c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800413e:	2302      	movs	r3, #2
 8004140:	e037      	b.n	80041b2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2220      	movs	r2, #32
 8004156:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004158:	2320      	movs	r3, #32
 800415a:	e02a      	b.n	80041b2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004164:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	061a      	lsls	r2, r3, #24
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004172:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	0a1b      	lsrs	r3, r3, #8
 8004178:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800417c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	0e1b      	lsrs	r3, r3, #24
 8004182:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004186:	601a      	str	r2, [r3, #0]
    scr++;
 8004188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418a:	3304      	adds	r3, #4
 800418c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	061a      	lsls	r2, r3, #24
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	021b      	lsls	r3, r3, #8
 8004196:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800419a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	0a1b      	lsrs	r3, r3, #8
 80041a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80041a4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	0e1b      	lsrs	r3, r3, #24
 80041aa:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80041ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ae:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	373c      	adds	r7, #60	@ 0x3c
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd90      	pop	{r4, r7, pc}

080041ba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e042      	b.n	8004252 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d106      	bne.n	80041e6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7fd f911 	bl	8001408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2224      	movs	r2, #36	@ 0x24
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f972 	bl	80044e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004212:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695a      	ldr	r2, [r3, #20]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004222:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004232:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b08a      	sub	sp, #40	@ 0x28
 800425e:	af02      	add	r7, sp, #8
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	603b      	str	r3, [r7, #0]
 8004266:	4613      	mov	r3, r2
 8004268:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b20      	cmp	r3, #32
 8004278:	d175      	bne.n	8004366 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <HAL_UART_Transmit+0x2c>
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e06e      	b.n	8004368 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2221      	movs	r2, #33	@ 0x21
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004298:	f7fd fac4 	bl	8001824 <HAL_GetTick>
 800429c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	88fa      	ldrh	r2, [r7, #6]
 80042a2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	88fa      	ldrh	r2, [r7, #6]
 80042a8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b2:	d108      	bne.n	80042c6 <HAL_UART_Transmit+0x6c>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d104      	bne.n	80042c6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042bc:	2300      	movs	r3, #0
 80042be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	e003      	b.n	80042ce <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042ce:	e02e      	b.n	800432e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	2200      	movs	r2, #0
 80042d8:	2180      	movs	r1, #128	@ 0x80
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f848 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e03a      	b.n	8004368 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10b      	bne.n	8004310 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004306:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	3302      	adds	r3, #2
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	e007      	b.n	8004320 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	781a      	ldrb	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	3301      	adds	r3, #1
 800431e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1cb      	bne.n	80042d0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2200      	movs	r2, #0
 8004340:	2140      	movs	r1, #64	@ 0x40
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f814 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e006      	b.n	8004368 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e000      	b.n	8004368 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
  }
}
 8004368:	4618      	mov	r0, r3
 800436a:	3720      	adds	r7, #32
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004380:	e03b      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004388:	d037      	beq.n	80043fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438a:	f7fd fa4b 	bl	8001824 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	6a3a      	ldr	r2, [r7, #32]
 8004396:	429a      	cmp	r2, r3
 8004398:	d302      	bcc.n	80043a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e03a      	b.n	800441a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d023      	beq.n	80043fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b80      	cmp	r3, #128	@ 0x80
 80043b6:	d020      	beq.n	80043fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b40      	cmp	r3, #64	@ 0x40
 80043bc:	d01d      	beq.n	80043fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d116      	bne.n	80043fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f81d 	bl	8004422 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2208      	movs	r2, #8
 80043ec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e00f      	b.n	800441a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4013      	ands	r3, r2
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	429a      	cmp	r2, r3
 8004408:	bf0c      	ite	eq
 800440a:	2301      	moveq	r3, #1
 800440c:	2300      	movne	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	79fb      	ldrb	r3, [r7, #7]
 8004414:	429a      	cmp	r2, r3
 8004416:	d0b4      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004422:	b480      	push	{r7}
 8004424:	b095      	sub	sp, #84	@ 0x54
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	330c      	adds	r3, #12
 8004430:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800443a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004440:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	330c      	adds	r3, #12
 8004448:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800444a:	643a      	str	r2, [r7, #64]	@ 0x40
 800444c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004450:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e5      	bne.n	800442a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3314      	adds	r3, #20
 8004464:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	61fb      	str	r3, [r7, #28]
   return(result);
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f023 0301 	bic.w	r3, r3, #1
 8004474:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3314      	adds	r3, #20
 800447c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800447e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004480:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e5      	bne.n	800445e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004496:	2b01      	cmp	r3, #1
 8004498:	d119      	bne.n	80044ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f023 0310 	bic.w	r3, r3, #16
 80044b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	330c      	adds	r3, #12
 80044b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044ba:	61ba      	str	r2, [r7, #24]
 80044bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6979      	ldr	r1, [r7, #20]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	613b      	str	r3, [r7, #16]
   return(result);
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e5      	bne.n	800449a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044dc:	bf00      	nop
 80044de:	3754      	adds	r7, #84	@ 0x54
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044ec:	b0c0      	sub	sp, #256	@ 0x100
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004504:	68d9      	ldr	r1, [r3, #12]
 8004506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	ea40 0301 	orr.w	r3, r0, r1
 8004510:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	431a      	orrs	r2, r3
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	431a      	orrs	r2, r3
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004540:	f021 010c 	bic.w	r1, r1, #12
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800454e:	430b      	orrs	r3, r1
 8004550:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800455e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004562:	6999      	ldr	r1, [r3, #24]
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	ea40 0301 	orr.w	r3, r0, r1
 800456e:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	4b95      	ldr	r3, [pc, #596]	@ (80047cc <UART_SetConfig+0x2e4>)
 8004578:	429a      	cmp	r2, r3
 800457a:	d011      	beq.n	80045a0 <UART_SetConfig+0xb8>
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4b93      	ldr	r3, [pc, #588]	@ (80047d0 <UART_SetConfig+0x2e8>)
 8004584:	429a      	cmp	r2, r3
 8004586:	d00b      	beq.n	80045a0 <UART_SetConfig+0xb8>
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4b91      	ldr	r3, [pc, #580]	@ (80047d4 <UART_SetConfig+0x2ec>)
 8004590:	429a      	cmp	r2, r3
 8004592:	d005      	beq.n	80045a0 <UART_SetConfig+0xb8>
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4b8f      	ldr	r3, [pc, #572]	@ (80047d8 <UART_SetConfig+0x2f0>)
 800459c:	429a      	cmp	r2, r3
 800459e:	d104      	bne.n	80045aa <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045a0:	f7fd ff64 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 80045a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045a8:	e003      	b.n	80045b2 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045aa:	f7fd ff4b 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 80045ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045bc:	f040 8110 	bne.w	80047e0 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045c4:	2200      	movs	r2, #0
 80045c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045d2:	4622      	mov	r2, r4
 80045d4:	462b      	mov	r3, r5
 80045d6:	1891      	adds	r1, r2, r2
 80045d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045da:	415b      	adcs	r3, r3
 80045dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045e2:	4621      	mov	r1, r4
 80045e4:	eb12 0801 	adds.w	r8, r2, r1
 80045e8:	4629      	mov	r1, r5
 80045ea:	eb43 0901 	adc.w	r9, r3, r1
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004602:	4690      	mov	r8, r2
 8004604:	4699      	mov	r9, r3
 8004606:	4623      	mov	r3, r4
 8004608:	eb18 0303 	adds.w	r3, r8, r3
 800460c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004610:	462b      	mov	r3, r5
 8004612:	eb49 0303 	adc.w	r3, r9, r3
 8004616:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800461a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004626:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800462a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800462e:	460b      	mov	r3, r1
 8004630:	18db      	adds	r3, r3, r3
 8004632:	653b      	str	r3, [r7, #80]	@ 0x50
 8004634:	4613      	mov	r3, r2
 8004636:	eb42 0303 	adc.w	r3, r2, r3
 800463a:	657b      	str	r3, [r7, #84]	@ 0x54
 800463c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004640:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004644:	f7fb fe54 	bl	80002f0 <__aeabi_uldivmod>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4b63      	ldr	r3, [pc, #396]	@ (80047dc <UART_SetConfig+0x2f4>)
 800464e:	fba3 2302 	umull	r2, r3, r3, r2
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	011c      	lsls	r4, r3, #4
 8004656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800465a:	2200      	movs	r2, #0
 800465c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004660:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004664:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004668:	4642      	mov	r2, r8
 800466a:	464b      	mov	r3, r9
 800466c:	1891      	adds	r1, r2, r2
 800466e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004670:	415b      	adcs	r3, r3
 8004672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004674:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004678:	4641      	mov	r1, r8
 800467a:	eb12 0a01 	adds.w	sl, r2, r1
 800467e:	4649      	mov	r1, r9
 8004680:	eb43 0b01 	adc.w	fp, r3, r1
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004690:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004698:	4692      	mov	sl, r2
 800469a:	469b      	mov	fp, r3
 800469c:	4643      	mov	r3, r8
 800469e:	eb1a 0303 	adds.w	r3, sl, r3
 80046a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046a6:	464b      	mov	r3, r9
 80046a8:	eb4b 0303 	adc.w	r3, fp, r3
 80046ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046c4:	460b      	mov	r3, r1
 80046c6:	18db      	adds	r3, r3, r3
 80046c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80046ca:	4613      	mov	r3, r2
 80046cc:	eb42 0303 	adc.w	r3, r2, r3
 80046d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80046d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046da:	f7fb fe09 	bl	80002f0 <__aeabi_uldivmod>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4611      	mov	r1, r2
 80046e4:	4b3d      	ldr	r3, [pc, #244]	@ (80047dc <UART_SetConfig+0x2f4>)
 80046e6:	fba3 2301 	umull	r2, r3, r3, r1
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	2264      	movs	r2, #100	@ 0x64
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
 80046f2:	1acb      	subs	r3, r1, r3
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046fa:	4b38      	ldr	r3, [pc, #224]	@ (80047dc <UART_SetConfig+0x2f4>)
 80046fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004708:	441c      	add	r4, r3
 800470a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800470e:	2200      	movs	r2, #0
 8004710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004714:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004718:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800471c:	4642      	mov	r2, r8
 800471e:	464b      	mov	r3, r9
 8004720:	1891      	adds	r1, r2, r2
 8004722:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004724:	415b      	adcs	r3, r3
 8004726:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004728:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800472c:	4641      	mov	r1, r8
 800472e:	1851      	adds	r1, r2, r1
 8004730:	6339      	str	r1, [r7, #48]	@ 0x30
 8004732:	4649      	mov	r1, r9
 8004734:	414b      	adcs	r3, r1
 8004736:	637b      	str	r3, [r7, #52]	@ 0x34
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004744:	4659      	mov	r1, fp
 8004746:	00cb      	lsls	r3, r1, #3
 8004748:	4651      	mov	r1, sl
 800474a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800474e:	4651      	mov	r1, sl
 8004750:	00ca      	lsls	r2, r1, #3
 8004752:	4610      	mov	r0, r2
 8004754:	4619      	mov	r1, r3
 8004756:	4603      	mov	r3, r0
 8004758:	4642      	mov	r2, r8
 800475a:	189b      	adds	r3, r3, r2
 800475c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004760:	464b      	mov	r3, r9
 8004762:	460a      	mov	r2, r1
 8004764:	eb42 0303 	adc.w	r3, r2, r3
 8004768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004778:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800477c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004780:	460b      	mov	r3, r1
 8004782:	18db      	adds	r3, r3, r3
 8004784:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004786:	4613      	mov	r3, r2
 8004788:	eb42 0303 	adc.w	r3, r2, r3
 800478c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800478e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004792:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004796:	f7fb fdab 	bl	80002f0 <__aeabi_uldivmod>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4b0f      	ldr	r3, [pc, #60]	@ (80047dc <UART_SetConfig+0x2f4>)
 80047a0:	fba3 1302 	umull	r1, r3, r3, r2
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	2164      	movs	r1, #100	@ 0x64
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	3332      	adds	r3, #50	@ 0x32
 80047b2:	4a0a      	ldr	r2, [pc, #40]	@ (80047dc <UART_SetConfig+0x2f4>)
 80047b4:	fba2 2303 	umull	r2, r3, r2, r3
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	f003 0207 	and.w	r2, r3, #7
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4422      	add	r2, r4
 80047c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047c8:	e10a      	b.n	80049e0 <UART_SetConfig+0x4f8>
 80047ca:	bf00      	nop
 80047cc:	40011000 	.word	0x40011000
 80047d0:	40011400 	.word	0x40011400
 80047d4:	40011800 	.word	0x40011800
 80047d8:	40011c00 	.word	0x40011c00
 80047dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047f2:	4642      	mov	r2, r8
 80047f4:	464b      	mov	r3, r9
 80047f6:	1891      	adds	r1, r2, r2
 80047f8:	6239      	str	r1, [r7, #32]
 80047fa:	415b      	adcs	r3, r3
 80047fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004802:	4641      	mov	r1, r8
 8004804:	1854      	adds	r4, r2, r1
 8004806:	4649      	mov	r1, r9
 8004808:	eb43 0501 	adc.w	r5, r3, r1
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	00eb      	lsls	r3, r5, #3
 8004816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800481a:	00e2      	lsls	r2, r4, #3
 800481c:	4614      	mov	r4, r2
 800481e:	461d      	mov	r5, r3
 8004820:	4643      	mov	r3, r8
 8004822:	18e3      	adds	r3, r4, r3
 8004824:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004828:	464b      	mov	r3, r9
 800482a:	eb45 0303 	adc.w	r3, r5, r3
 800482e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800483e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800484e:	4629      	mov	r1, r5
 8004850:	008b      	lsls	r3, r1, #2
 8004852:	4621      	mov	r1, r4
 8004854:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004858:	4621      	mov	r1, r4
 800485a:	008a      	lsls	r2, r1, #2
 800485c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004860:	f7fb fd46 	bl	80002f0 <__aeabi_uldivmod>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4b60      	ldr	r3, [pc, #384]	@ (80049ec <UART_SetConfig+0x504>)
 800486a:	fba3 2302 	umull	r2, r3, r3, r2
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	011c      	lsls	r4, r3, #4
 8004872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004876:	2200      	movs	r2, #0
 8004878:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800487c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004880:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004884:	4642      	mov	r2, r8
 8004886:	464b      	mov	r3, r9
 8004888:	1891      	adds	r1, r2, r2
 800488a:	61b9      	str	r1, [r7, #24]
 800488c:	415b      	adcs	r3, r3
 800488e:	61fb      	str	r3, [r7, #28]
 8004890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004894:	4641      	mov	r1, r8
 8004896:	1851      	adds	r1, r2, r1
 8004898:	6139      	str	r1, [r7, #16]
 800489a:	4649      	mov	r1, r9
 800489c:	414b      	adcs	r3, r1
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048ac:	4659      	mov	r1, fp
 80048ae:	00cb      	lsls	r3, r1, #3
 80048b0:	4651      	mov	r1, sl
 80048b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048b6:	4651      	mov	r1, sl
 80048b8:	00ca      	lsls	r2, r1, #3
 80048ba:	4610      	mov	r0, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	4603      	mov	r3, r0
 80048c0:	4642      	mov	r2, r8
 80048c2:	189b      	adds	r3, r3, r2
 80048c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048c8:	464b      	mov	r3, r9
 80048ca:	460a      	mov	r2, r1
 80048cc:	eb42 0303 	adc.w	r3, r2, r3
 80048d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048ec:	4649      	mov	r1, r9
 80048ee:	008b      	lsls	r3, r1, #2
 80048f0:	4641      	mov	r1, r8
 80048f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f6:	4641      	mov	r1, r8
 80048f8:	008a      	lsls	r2, r1, #2
 80048fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048fe:	f7fb fcf7 	bl	80002f0 <__aeabi_uldivmod>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4611      	mov	r1, r2
 8004908:	4b38      	ldr	r3, [pc, #224]	@ (80049ec <UART_SetConfig+0x504>)
 800490a:	fba3 2301 	umull	r2, r3, r3, r1
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	2264      	movs	r2, #100	@ 0x64
 8004912:	fb02 f303 	mul.w	r3, r2, r3
 8004916:	1acb      	subs	r3, r1, r3
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	3332      	adds	r3, #50	@ 0x32
 800491c:	4a33      	ldr	r2, [pc, #204]	@ (80049ec <UART_SetConfig+0x504>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004928:	441c      	add	r4, r3
 800492a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800492e:	2200      	movs	r2, #0
 8004930:	673b      	str	r3, [r7, #112]	@ 0x70
 8004932:	677a      	str	r2, [r7, #116]	@ 0x74
 8004934:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004938:	4642      	mov	r2, r8
 800493a:	464b      	mov	r3, r9
 800493c:	1891      	adds	r1, r2, r2
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	415b      	adcs	r3, r3
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004948:	4641      	mov	r1, r8
 800494a:	1851      	adds	r1, r2, r1
 800494c:	6039      	str	r1, [r7, #0]
 800494e:	4649      	mov	r1, r9
 8004950:	414b      	adcs	r3, r1
 8004952:	607b      	str	r3, [r7, #4]
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004960:	4659      	mov	r1, fp
 8004962:	00cb      	lsls	r3, r1, #3
 8004964:	4651      	mov	r1, sl
 8004966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800496a:	4651      	mov	r1, sl
 800496c:	00ca      	lsls	r2, r1, #3
 800496e:	4610      	mov	r0, r2
 8004970:	4619      	mov	r1, r3
 8004972:	4603      	mov	r3, r0
 8004974:	4642      	mov	r2, r8
 8004976:	189b      	adds	r3, r3, r2
 8004978:	66bb      	str	r3, [r7, #104]	@ 0x68
 800497a:	464b      	mov	r3, r9
 800497c:	460a      	mov	r2, r1
 800497e:	eb42 0303 	adc.w	r3, r2, r3
 8004982:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	663b      	str	r3, [r7, #96]	@ 0x60
 800498e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800499c:	4649      	mov	r1, r9
 800499e:	008b      	lsls	r3, r1, #2
 80049a0:	4641      	mov	r1, r8
 80049a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049a6:	4641      	mov	r1, r8
 80049a8:	008a      	lsls	r2, r1, #2
 80049aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049ae:	f7fb fc9f 	bl	80002f0 <__aeabi_uldivmod>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4b0d      	ldr	r3, [pc, #52]	@ (80049ec <UART_SetConfig+0x504>)
 80049b8:	fba3 1302 	umull	r1, r3, r3, r2
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	2164      	movs	r1, #100	@ 0x64
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	3332      	adds	r3, #50	@ 0x32
 80049ca:	4a08      	ldr	r2, [pc, #32]	@ (80049ec <UART_SetConfig+0x504>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	f003 020f 	and.w	r2, r3, #15
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4422      	add	r2, r4
 80049de:	609a      	str	r2, [r3, #8]
}
 80049e0:	bf00      	nop
 80049e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049e6:	46bd      	mov	sp, r7
 80049e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ec:	51eb851f 	.word	0x51eb851f

080049f0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80049f0:	b084      	sub	sp, #16
 80049f2:	b480      	push	{r7}
 80049f4:	b085      	sub	sp, #20
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	f107 001c 	add.w	r0, r7, #28
 80049fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004a06:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004a08:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004a0a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8004a0e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004a12:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8004a16:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8004a1a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8004a2a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	b004      	add	sp, #16
 8004a44:	4770      	bx	lr

08004a46 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2203      	movs	r2, #3
 8004a8e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b085      	sub	sp, #20
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ad8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004ade:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004ae4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004af4:	f023 030f 	bic.w	r3, r3, #15
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	b2db      	uxtb	r3, r3
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3314      	adds	r3, #20
 8004b36:	461a      	mov	r2, r3
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
}  
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b74:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004b7a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004b80:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0

}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b088      	sub	sp, #32
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bb8:	2340      	movs	r3, #64	@ 0x40
 8004bba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bc6:	f107 0308 	add.w	r3, r7, #8
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff ff74 	bl	8004aba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bd6:	2110      	movs	r1, #16
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fa19 	bl	8005010 <SDMMC_GetCmdResp1>
 8004bde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004be0:	69fb      	ldr	r3, [r7, #28]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3720      	adds	r7, #32
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b088      	sub	sp, #32
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004bf8:	2311      	movs	r3, #17
 8004bfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bfc:	2340      	movs	r3, #64	@ 0x40
 8004bfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c00:	2300      	movs	r3, #0
 8004c02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c0a:	f107 0308 	add.w	r3, r7, #8
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff ff52 	bl	8004aba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c1a:	2111      	movs	r1, #17
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f9f7 	bl	8005010 <SDMMC_GetCmdResp1>
 8004c22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c24:	69fb      	ldr	r3, [r7, #28]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3720      	adds	r7, #32
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b088      	sub	sp, #32
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004c3c:	2312      	movs	r3, #18
 8004c3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c40:	2340      	movs	r3, #64	@ 0x40
 8004c42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c4e:	f107 0308 	add.w	r3, r7, #8
 8004c52:	4619      	mov	r1, r3
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff ff30 	bl	8004aba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c5e:	2112      	movs	r1, #18
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f9d5 	bl	8005010 <SDMMC_GetCmdResp1>
 8004c66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c68:	69fb      	ldr	r3, [r7, #28]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3720      	adds	r7, #32
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b088      	sub	sp, #32
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004c80:	2318      	movs	r3, #24
 8004c82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c84:	2340      	movs	r3, #64	@ 0x40
 8004c86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c92:	f107 0308 	add.w	r3, r7, #8
 8004c96:	4619      	mov	r1, r3
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ff0e 	bl	8004aba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca2:	2118      	movs	r1, #24
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f9b3 	bl	8005010 <SDMMC_GetCmdResp1>
 8004caa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cac:	69fb      	ldr	r3, [r7, #28]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3720      	adds	r7, #32
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b088      	sub	sp, #32
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004cc4:	2319      	movs	r3, #25
 8004cc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cc8:	2340      	movs	r3, #64	@ 0x40
 8004cca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cd6:	f107 0308 	add.w	r3, r7, #8
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff feec 	bl	8004aba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ce6:	2119      	movs	r1, #25
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f991 	bl	8005010 <SDMMC_GetCmdResp1>
 8004cee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3720      	adds	r7, #32
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004d08:	230c      	movs	r3, #12
 8004d0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d0c:	2340      	movs	r3, #64	@ 0x40
 8004d0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d1a:	f107 0308 	add.w	r3, r7, #8
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7ff feca 	bl	8004aba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004d26:	4a05      	ldr	r2, [pc, #20]	@ (8004d3c <SDMMC_CmdStopTransfer+0x40>)
 8004d28:	210c      	movs	r1, #12
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f970 	bl	8005010 <SDMMC_GetCmdResp1>
 8004d30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d32:	69fb      	ldr	r3, [r7, #28]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3720      	adds	r7, #32
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	05f5e100 	.word	0x05f5e100

08004d40 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	@ 0x28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004d50:	2307      	movs	r3, #7
 8004d52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d54:	2340      	movs	r3, #64	@ 0x40
 8004d56:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d60:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d62:	f107 0310 	add.w	r3, r7, #16
 8004d66:	4619      	mov	r1, r3
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f7ff fea6 	bl	8004aba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d72:	2107      	movs	r1, #7
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f94b 	bl	8005010 <SDMMC_GetCmdResp1>
 8004d7a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3728      	adds	r7, #40	@ 0x28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b088      	sub	sp, #32
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004d96:	2300      	movs	r3, #0
 8004d98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004da2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004da4:	f107 0308 	add.w	r3, r7, #8
 8004da8:	4619      	mov	r1, r3
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff fe85 	bl	8004aba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fb65 	bl	8005480 <SDMMC_GetCmdError>
 8004db6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004db8:	69fb      	ldr	r3, [r7, #28]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b088      	sub	sp, #32
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004dca:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8004dce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dd4:	2340      	movs	r3, #64	@ 0x40
 8004dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ddc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004de0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004de2:	f107 0308 	add.w	r3, r7, #8
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff fe66 	bl	8004aba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 faf8 	bl	80053e4 <SDMMC_GetCmdResp7>
 8004df4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004df6:	69fb      	ldr	r3, [r7, #28]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3720      	adds	r7, #32
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004e0e:	2337      	movs	r3, #55	@ 0x37
 8004e10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e12:	2340      	movs	r3, #64	@ 0x40
 8004e14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e20:	f107 0308 	add.w	r3, r7, #8
 8004e24:	4619      	mov	r1, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff fe47 	bl	8004aba <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e30:	2137      	movs	r1, #55	@ 0x37
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f8ec 	bl	8005010 <SDMMC_GetCmdResp1>
 8004e38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e3a:	69fb      	ldr	r3, [r7, #28]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3720      	adds	r7, #32
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004e5a:	2329      	movs	r3, #41	@ 0x29
 8004e5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e5e:	2340      	movs	r3, #64	@ 0x40
 8004e60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e62:	2300      	movs	r3, #0
 8004e64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e6c:	f107 0308 	add.w	r3, r7, #8
 8004e70:	4619      	mov	r1, r3
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff fe21 	bl	8004aba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f9ff 	bl	800527c <SDMMC_GetCmdResp3>
 8004e7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e80:	69fb      	ldr	r3, [r7, #28]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3720      	adds	r7, #32
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b088      	sub	sp, #32
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004e98:	2306      	movs	r3, #6
 8004e9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e9c:	2340      	movs	r3, #64	@ 0x40
 8004e9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ea4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ea8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004eaa:	f107 0308 	add.w	r3, r7, #8
 8004eae:	4619      	mov	r1, r3
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff fe02 	bl	8004aba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eba:	2106      	movs	r1, #6
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f8a7 	bl	8005010 <SDMMC_GetCmdResp1>
 8004ec2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3720      	adds	r7, #32
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b088      	sub	sp, #32
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004eda:	2333      	movs	r3, #51	@ 0x33
 8004edc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ede:	2340      	movs	r3, #64	@ 0x40
 8004ee0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ee6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004eea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004eec:	f107 0308 	add.w	r3, r7, #8
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff fde1 	bl	8004aba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004efc:	2133      	movs	r1, #51	@ 0x33
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f886 	bl	8005010 <SDMMC_GetCmdResp1>
 8004f04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f06:	69fb      	ldr	r3, [r7, #28]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004f20:	23c0      	movs	r3, #192	@ 0xc0
 8004f22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f24:	2300      	movs	r3, #0
 8004f26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f2e:	f107 0308 	add.w	r3, r7, #8
 8004f32:	4619      	mov	r1, r3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff fdc0 	bl	8004aba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f956 	bl	80051ec <SDMMC_GetCmdResp2>
 8004f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f42:	69fb      	ldr	r3, [r7, #28]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b088      	sub	sp, #32
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004f5a:	2309      	movs	r3, #9
 8004f5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004f5e:	23c0      	movs	r3, #192	@ 0xc0
 8004f60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f6c:	f107 0308 	add.w	r3, r7, #8
 8004f70:	4619      	mov	r1, r3
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7ff fda1 	bl	8004aba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f937 	bl	80051ec <SDMMC_GetCmdResp2>
 8004f7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f80:	69fb      	ldr	r3, [r7, #28]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3720      	adds	r7, #32
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b088      	sub	sp, #32
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f9c:	2340      	movs	r3, #64	@ 0x40
 8004f9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fa8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004faa:	f107 0308 	add.w	r3, r7, #8
 8004fae:	4619      	mov	r1, r3
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff fd82 	bl	8004aba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	2103      	movs	r1, #3
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f99c 	bl	80052f8 <SDMMC_GetCmdResp6>
 8004fc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fc2:	69fb      	ldr	r3, [r7, #28]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3720      	adds	r7, #32
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b088      	sub	sp, #32
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004fda:	230d      	movs	r3, #13
 8004fdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fde:	2340      	movs	r3, #64	@ 0x40
 8004fe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fec:	f107 0308 	add.w	r3, r7, #8
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff fd61 	bl	8004aba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffc:	210d      	movs	r1, #13
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f806 	bl	8005010 <SDMMC_GetCmdResp1>
 8005004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005006:	69fb      	ldr	r3, [r7, #28]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3720      	adds	r7, #32
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	460b      	mov	r3, r1
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800501e:	4b70      	ldr	r3, [pc, #448]	@ (80051e0 <SDMMC_GetCmdResp1+0x1d0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a70      	ldr	r2, [pc, #448]	@ (80051e4 <SDMMC_GetCmdResp1+0x1d4>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	0a5a      	lsrs	r2, r3, #9
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	fb02 f303 	mul.w	r3, r2, r3
 8005030:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	1e5a      	subs	r2, r3, #1
 8005036:	61fa      	str	r2, [r7, #28]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800503c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005040:	e0c9      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005046:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0ef      	beq.n	8005032 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1ea      	bne.n	8005032 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d004      	beq.n	8005072 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2204      	movs	r2, #4
 800506c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800506e:	2304      	movs	r3, #4
 8005070:	e0b1      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d004      	beq.n	8005088 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005084:	2301      	movs	r3, #1
 8005086:	e0a6      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	22c5      	movs	r2, #197	@ 0xc5
 800508c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7ff fd3d 	bl	8004b0e <SDIO_GetCommandResponse>
 8005094:	4603      	mov	r3, r0
 8005096:	461a      	mov	r2, r3
 8005098:	7afb      	ldrb	r3, [r7, #11]
 800509a:	4293      	cmp	r3, r2
 800509c:	d001      	beq.n	80050a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800509e:	2301      	movs	r3, #1
 80050a0:	e099      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80050a2:	2100      	movs	r1, #0
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7ff fd3f 	bl	8004b28 <SDIO_GetResponse>
 80050aa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4b4e      	ldr	r3, [pc, #312]	@ (80051e8 <SDMMC_GetCmdResp1+0x1d8>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80050b6:	2300      	movs	r3, #0
 80050b8:	e08d      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	da02      	bge.n	80050c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80050c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050c4:	e087      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80050d0:	2340      	movs	r3, #64	@ 0x40
 80050d2:	e080      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80050de:	2380      	movs	r3, #128	@ 0x80
 80050e0:	e079      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80050ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050f0:	e071      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80050fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005100:	e069      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800510c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005110:	e061      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800511c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005120:	e059      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800512c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005130:	e051      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800513c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005140:	e049      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800514c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005150:	e041      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800515c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005160:	e039      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800516c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005170:	e031      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800517c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005180:	e029      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800518c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005190:	e021      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800519c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80051a0:	e019      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80051ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80051b0:	e011      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80051bc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80051c0:	e009      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80051cc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80051d0:	e001      	b.n	80051d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80051d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3720      	adds	r7, #32
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000000 	.word	0x20000000
 80051e4:	10624dd3 	.word	0x10624dd3
 80051e8:	fdffe008 	.word	0xfdffe008

080051ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005274 <SDMMC_GetCmdResp2+0x88>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005278 <SDMMC_GetCmdResp2+0x8c>)
 80051fa:	fba2 2303 	umull	r2, r3, r2, r3
 80051fe:	0a5b      	lsrs	r3, r3, #9
 8005200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005204:	fb02 f303 	mul.w	r3, r2, r3
 8005208:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1e5a      	subs	r2, r3, #1
 800520e:	60fa      	str	r2, [r7, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d102      	bne.n	800521a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005214:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005218:	e026      	b.n	8005268 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800521e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0ef      	beq.n	800520a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1ea      	bne.n	800520a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d004      	beq.n	800524a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2204      	movs	r2, #4
 8005244:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005246:	2304      	movs	r3, #4
 8005248:	e00e      	b.n	8005268 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d004      	beq.n	8005260 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800525c:	2301      	movs	r3, #1
 800525e:	e003      	b.n	8005268 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	22c5      	movs	r2, #197	@ 0xc5
 8005264:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	20000000 	.word	0x20000000
 8005278:	10624dd3 	.word	0x10624dd3

0800527c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005284:	4b1a      	ldr	r3, [pc, #104]	@ (80052f0 <SDMMC_GetCmdResp3+0x74>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1a      	ldr	r2, [pc, #104]	@ (80052f4 <SDMMC_GetCmdResp3+0x78>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	0a5b      	lsrs	r3, r3, #9
 8005290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005294:	fb02 f303 	mul.w	r3, r2, r3
 8005298:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1e5a      	subs	r2, r3, #1
 800529e:	60fa      	str	r2, [r7, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80052a8:	e01b      	b.n	80052e2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0ef      	beq.n	800529a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1ea      	bne.n	800529a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d004      	beq.n	80052da <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2204      	movs	r2, #4
 80052d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80052d6:	2304      	movs	r3, #4
 80052d8:	e003      	b.n	80052e2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	22c5      	movs	r2, #197	@ 0xc5
 80052de:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000000 	.word	0x20000000
 80052f4:	10624dd3 	.word	0x10624dd3

080052f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	460b      	mov	r3, r1
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005306:	4b35      	ldr	r3, [pc, #212]	@ (80053dc <SDMMC_GetCmdResp6+0xe4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a35      	ldr	r2, [pc, #212]	@ (80053e0 <SDMMC_GetCmdResp6+0xe8>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	0a5b      	lsrs	r3, r3, #9
 8005312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005316:	fb02 f303 	mul.w	r3, r2, r3
 800531a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	1e5a      	subs	r2, r3, #1
 8005320:	61fa      	str	r2, [r7, #28]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d102      	bne.n	800532c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005326:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800532a:	e052      	b.n	80053d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005330:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0ef      	beq.n	800531c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1ea      	bne.n	800531c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b00      	cmp	r3, #0
 8005350:	d004      	beq.n	800535c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2204      	movs	r2, #4
 8005356:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005358:	2304      	movs	r3, #4
 800535a:	e03a      	b.n	80053d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d004      	beq.n	8005372 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800536e:	2301      	movs	r3, #1
 8005370:	e02f      	b.n	80053d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f7ff fbcb 	bl	8004b0e <SDIO_GetCommandResponse>
 8005378:	4603      	mov	r3, r0
 800537a:	461a      	mov	r2, r3
 800537c:	7afb      	ldrb	r3, [r7, #11]
 800537e:	4293      	cmp	r3, r2
 8005380:	d001      	beq.n	8005386 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005382:	2301      	movs	r3, #1
 8005384:	e025      	b.n	80053d2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	22c5      	movs	r2, #197	@ 0xc5
 800538a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800538c:	2100      	movs	r1, #0
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7ff fbca 	bl	8004b28 <SDIO_GetResponse>
 8005394:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d106      	bne.n	80053ae <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	0c1b      	lsrs	r3, r3, #16
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80053aa:	2300      	movs	r3, #0
 80053ac:	e011      	b.n	80053d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80053b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80053bc:	e009      	b.n	80053d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80053c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053cc:	e001      	b.n	80053d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80053ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000000 	.word	0x20000000
 80053e0:	10624dd3 	.word	0x10624dd3

080053e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80053ec:	4b22      	ldr	r3, [pc, #136]	@ (8005478 <SDMMC_GetCmdResp7+0x94>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a22      	ldr	r2, [pc, #136]	@ (800547c <SDMMC_GetCmdResp7+0x98>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	0a5b      	lsrs	r3, r3, #9
 80053f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053fc:	fb02 f303 	mul.w	r3, r2, r3
 8005400:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1e5a      	subs	r2, r3, #1
 8005406:	60fa      	str	r2, [r7, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d102      	bne.n	8005412 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800540c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005410:	e02c      	b.n	800546c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005416:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0ef      	beq.n	8005402 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1ea      	bne.n	8005402 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d004      	beq.n	8005442 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2204      	movs	r2, #4
 800543c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800543e:	2304      	movs	r3, #4
 8005440:	e014      	b.n	800546c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d004      	beq.n	8005458 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005454:	2301      	movs	r3, #1
 8005456:	e009      	b.n	800546c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800545c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2240      	movs	r2, #64	@ 0x40
 8005468:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800546a:	2300      	movs	r3, #0
  
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	20000000 	.word	0x20000000
 800547c:	10624dd3 	.word	0x10624dd3

08005480 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005488:	4b11      	ldr	r3, [pc, #68]	@ (80054d0 <SDMMC_GetCmdError+0x50>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a11      	ldr	r2, [pc, #68]	@ (80054d4 <SDMMC_GetCmdError+0x54>)
 800548e:	fba2 2303 	umull	r2, r3, r2, r3
 8005492:	0a5b      	lsrs	r3, r3, #9
 8005494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005498:	fb02 f303 	mul.w	r3, r2, r3
 800549c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	1e5a      	subs	r2, r3, #1
 80054a2:	60fa      	str	r2, [r7, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80054ac:	e009      	b.n	80054c2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f1      	beq.n	800549e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	22c5      	movs	r2, #197	@ 0xc5
 80054be:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	20000000 	.word	0x20000000
 80054d4:	10624dd3 	.word	0x10624dd3

080054d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054d8:	b084      	sub	sp, #16
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	f107 001c 	add.w	r0, r7, #28
 80054e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d123      	bne.n	800553a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800551a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800551e:	2b01      	cmp	r3, #1
 8005520:	d105      	bne.n	800552e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fa9a 	bl	8005a68 <USB_CoreReset>
 8005534:	4603      	mov	r3, r0
 8005536:	73fb      	strb	r3, [r7, #15]
 8005538:	e01b      	b.n	8005572 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa8e 	bl	8005a68 <USB_CoreReset>
 800554c:	4603      	mov	r3, r0
 800554e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005550:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005554:	2b00      	cmp	r3, #0
 8005556:	d106      	bne.n	8005566 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800555c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	639a      	str	r2, [r3, #56]	@ 0x38
 8005564:	e005      	b.n	8005572 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005572:	7fbb      	ldrb	r3, [r7, #30]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d10b      	bne.n	8005590 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f043 0206 	orr.w	r2, r3, #6
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f043 0220 	orr.w	r2, r3, #32
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005590:	7bfb      	ldrb	r3, [r7, #15]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800559c:	b004      	add	sp, #16
 800559e:	4770      	bx	lr

080055a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f023 0201 	bic.w	r2, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	460b      	mov	r3, r1
 80055cc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055de:	78fb      	ldrb	r3, [r7, #3]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d115      	bne.n	8005610 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80055f0:	200a      	movs	r0, #10
 80055f2:	f7fc f923 	bl	800183c <HAL_Delay>
      ms += 10U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	330a      	adds	r3, #10
 80055fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fa25 	bl	8005a4c <USB_GetMode>
 8005602:	4603      	mov	r3, r0
 8005604:	2b01      	cmp	r3, #1
 8005606:	d01e      	beq.n	8005646 <USB_SetCurrentMode+0x84>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2bc7      	cmp	r3, #199	@ 0xc7
 800560c:	d9f0      	bls.n	80055f0 <USB_SetCurrentMode+0x2e>
 800560e:	e01a      	b.n	8005646 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d115      	bne.n	8005642 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005622:	200a      	movs	r0, #10
 8005624:	f7fc f90a 	bl	800183c <HAL_Delay>
      ms += 10U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	330a      	adds	r3, #10
 800562c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fa0c 	bl	8005a4c <USB_GetMode>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <USB_SetCurrentMode+0x84>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2bc7      	cmp	r3, #199	@ 0xc7
 800563e:	d9f0      	bls.n	8005622 <USB_SetCurrentMode+0x60>
 8005640:	e001      	b.n	8005646 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e005      	b.n	8005652 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2bc8      	cmp	r3, #200	@ 0xc8
 800564a:	d101      	bne.n	8005650 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e000      	b.n	8005652 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800565c:	b084      	sub	sp, #16
 800565e:	b580      	push	{r7, lr}
 8005660:	b086      	sub	sp, #24
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800566a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005676:	2300      	movs	r3, #0
 8005678:	613b      	str	r3, [r7, #16]
 800567a:	e009      	b.n	8005690 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	3340      	adds	r3, #64	@ 0x40
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	2200      	movs	r2, #0
 8005688:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	3301      	adds	r3, #1
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b0e      	cmp	r3, #14
 8005694:	d9f2      	bls.n	800567c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005696:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800569a:	2b00      	cmp	r3, #0
 800569c:	d11c      	bne.n	80056d8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056ac:	f043 0302 	orr.w	r3, r3, #2
 80056b0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	e005      	b.n	80056e4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056dc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80056ea:	461a      	mov	r2, r3
 80056ec:	2300      	movs	r3, #0
 80056ee:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056f0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d10d      	bne.n	8005714 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d104      	bne.n	800570a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005700:	2100      	movs	r1, #0
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f968 	bl	80059d8 <USB_SetDevSpeed>
 8005708:	e008      	b.n	800571c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800570a:	2101      	movs	r1, #1
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f963 	bl	80059d8 <USB_SetDevSpeed>
 8005712:	e003      	b.n	800571c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005714:	2103      	movs	r1, #3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f95e 	bl	80059d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800571c:	2110      	movs	r1, #16
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f8fa 	bl	8005918 <USB_FlushTxFifo>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f924 	bl	800597c <USB_FlushRxFifo>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005744:	461a      	mov	r2, r3
 8005746:	2300      	movs	r3, #0
 8005748:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005750:	461a      	mov	r2, r3
 8005752:	2300      	movs	r3, #0
 8005754:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800575c:	461a      	mov	r2, r3
 800575e:	2300      	movs	r3, #0
 8005760:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005762:	2300      	movs	r3, #0
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	e043      	b.n	80057f0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800577a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800577e:	d118      	bne.n	80057b2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005792:	461a      	mov	r2, r3
 8005794:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	e013      	b.n	80057c4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a8:	461a      	mov	r2, r3
 80057aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	e008      	b.n	80057c4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057be:	461a      	mov	r2, r3
 80057c0:	2300      	movs	r3, #0
 80057c2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d0:	461a      	mov	r2, r3
 80057d2:	2300      	movs	r3, #0
 80057d4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e2:	461a      	mov	r2, r3
 80057e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80057e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	3301      	adds	r3, #1
 80057ee:	613b      	str	r3, [r7, #16]
 80057f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057f4:	461a      	mov	r2, r3
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d3b5      	bcc.n	8005768 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057fc:	2300      	movs	r3, #0
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	e043      	b.n	800588a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005814:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005818:	d118      	bne.n	800584c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800582c:	461a      	mov	r2, r3
 800582e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	e013      	b.n	800585e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005842:	461a      	mov	r2, r3
 8005844:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	e008      	b.n	800585e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005858:	461a      	mov	r2, r3
 800585a:	2300      	movs	r3, #0
 800585c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586a:	461a      	mov	r2, r3
 800586c:	2300      	movs	r3, #0
 800586e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800587c:	461a      	mov	r2, r3
 800587e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005882:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	3301      	adds	r3, #1
 8005888:	613b      	str	r3, [r7, #16]
 800588a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800588e:	461a      	mov	r2, r3
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	4293      	cmp	r3, r2
 8005894:	d3b5      	bcc.n	8005802 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058a8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80058b6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d105      	bne.n	80058cc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	f043 0210 	orr.w	r2, r3, #16
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	699a      	ldr	r2, [r3, #24]
 80058d0:	4b10      	ldr	r3, [pc, #64]	@ (8005914 <USB_DevInit+0x2b8>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	f043 0208 	orr.w	r2, r3, #8
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d107      	bne.n	8005904 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058fc:	f043 0304 	orr.w	r3, r3, #4
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005904:	7dfb      	ldrb	r3, [r7, #23]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005910:	b004      	add	sp, #16
 8005912:	4770      	bx	lr
 8005914:	803c3800 	.word	0x803c3800

08005918 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3301      	adds	r3, #1
 800592a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005932:	d901      	bls.n	8005938 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e01b      	b.n	8005970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	daf2      	bge.n	8005926 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	019b      	lsls	r3, r3, #6
 8005948:	f043 0220 	orr.w	r2, r3, #32
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3301      	adds	r3, #1
 8005954:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800595c:	d901      	bls.n	8005962 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e006      	b.n	8005970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b20      	cmp	r3, #32
 800596c:	d0f0      	beq.n	8005950 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3301      	adds	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005994:	d901      	bls.n	800599a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e018      	b.n	80059cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	daf2      	bge.n	8005988 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2210      	movs	r2, #16
 80059aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3301      	adds	r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059b8:	d901      	bls.n	80059be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e006      	b.n	80059cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0310 	and.w	r3, r3, #16
 80059c6:	2b10      	cmp	r3, #16
 80059c8:	d0f0      	beq.n	80059ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	68f9      	ldr	r1, [r7, #12]
 80059f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059f8:	4313      	orrs	r3, r2
 80059fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b085      	sub	sp, #20
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a24:	f023 0303 	bic.w	r3, r3, #3
 8005a28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a38:	f043 0302 	orr.w	r3, r3, #2
 8005a3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	f003 0301 	and.w	r3, r3, #1
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a80:	d901      	bls.n	8005a86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e022      	b.n	8005acc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	daf2      	bge.n	8005a74 <USB_CoreReset+0xc>

  count = 10U;
 8005a8e:	230a      	movs	r3, #10
 8005a90:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005a92:	e002      	b.n	8005a9a <USB_CoreReset+0x32>
  {
    count--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f9      	bne.n	8005a94 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	f043 0201 	orr.w	r2, r3, #1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ab8:	d901      	bls.n	8005abe <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e006      	b.n	8005acc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d0f0      	beq.n	8005aac <USB_CoreReset+0x44>

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005adc:	4904      	ldr	r1, [pc, #16]	@ (8005af0 <MX_FATFS_Init+0x18>)
 8005ade:	4805      	ldr	r0, [pc, #20]	@ (8005af4 <MX_FATFS_Init+0x1c>)
 8005ae0:	f003 fcba 	bl	8009458 <FATFS_LinkDriver>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	4b03      	ldr	r3, [pc, #12]	@ (8005af8 <MX_FATFS_Init+0x20>)
 8005aea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005aec:	bf00      	nop
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	2000169c 	.word	0x2000169c
 8005af4:	0800addc 	.word	0x0800addc
 8005af8:	20001698 	.word	0x20001698

08005afc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005b00:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005b16:	f7fb f975 	bl	8000e04 <BSP_SD_IsDetected>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d001      	beq.n	8005b24 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e012      	b.n	8005b4a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005b24:	480b      	ldr	r0, [pc, #44]	@ (8005b54 <BSP_SD_Init+0x48>)
 8005b26:	f7fd f9c5 	bl	8002eb4 <HAL_SD_Init>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d109      	bne.n	8005b48 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005b34:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b38:	4806      	ldr	r0, [pc, #24]	@ (8005b54 <BSP_SD_Init+0x48>)
 8005b3a:	f7fd ff97 	bl	8003a6c <HAL_SD_ConfigWideBusOperation>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005b48:	79fb      	ldrb	r3, [r7, #7]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	200010dc 	.word	0x200010dc

08005b58 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	68f9      	ldr	r1, [r7, #12]
 8005b74:	4806      	ldr	r0, [pc, #24]	@ (8005b90 <BSP_SD_ReadBlocks+0x38>)
 8005b76:	f7fd fa45 	bl	8003004 <HAL_SD_ReadBlocks>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	200010dc 	.word	0x200010dc

08005b94 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	68f9      	ldr	r1, [r7, #12]
 8005bb0:	4806      	ldr	r0, [pc, #24]	@ (8005bcc <BSP_SD_WriteBlocks+0x38>)
 8005bb2:	f7fd fc05 	bl	80033c0 <HAL_SD_WriteBlocks>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	200010dc 	.word	0x200010dc

08005bd0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005bd4:	4805      	ldr	r0, [pc, #20]	@ (8005bec <BSP_SD_GetCardState+0x1c>)
 8005bd6:	f7fd ffe3 	bl	8003ba0 <HAL_SD_GetCardState>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	bf14      	ite	ne
 8005be0:	2301      	movne	r3, #1
 8005be2:	2300      	moveq	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	200010dc 	.word	0x200010dc

08005bf0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	4803      	ldr	r0, [pc, #12]	@ (8005c08 <BSP_SD_GetCardInfo+0x18>)
 8005bfc:	f7fd ff0a 	bl	8003a14 <HAL_SD_GetCardInfo>
}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	200010dc 	.word	0x200010dc

08005c0c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005c16:	4b0b      	ldr	r3, [pc, #44]	@ (8005c44 <SD_CheckStatus+0x38>)
 8005c18:	2201      	movs	r2, #1
 8005c1a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005c1c:	f7ff ffd8 	bl	8005bd0 <BSP_SD_GetCardState>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d107      	bne.n	8005c36 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005c26:	4b07      	ldr	r3, [pc, #28]	@ (8005c44 <SD_CheckStatus+0x38>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f023 0301 	bic.w	r3, r3, #1
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	4b04      	ldr	r3, [pc, #16]	@ (8005c44 <SD_CheckStatus+0x38>)
 8005c34:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005c36:	4b03      	ldr	r3, [pc, #12]	@ (8005c44 <SD_CheckStatus+0x38>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	b2db      	uxtb	r3, r3
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	20000009 	.word	0x20000009

08005c48 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005c52:	4b0b      	ldr	r3, [pc, #44]	@ (8005c80 <SD_initialize+0x38>)
 8005c54:	2201      	movs	r2, #1
 8005c56:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005c58:	f7ff ff58 	bl	8005b0c <BSP_SD_Init>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d107      	bne.n	8005c72 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff ffd1 	bl	8005c0c <SD_CheckStatus>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	4b04      	ldr	r3, [pc, #16]	@ (8005c80 <SD_initialize+0x38>)
 8005c70:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005c72:	4b03      	ldr	r3, [pc, #12]	@ (8005c80 <SD_initialize+0x38>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	b2db      	uxtb	r3, r3
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20000009 	.word	0x20000009

08005c84 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff ffbb 	bl	8005c0c <SD_CheckStatus>
 8005c96:	4603      	mov	r3, r0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60b9      	str	r1, [r7, #8]
 8005ca8:	607a      	str	r2, [r7, #4]
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	4603      	mov	r3, r0
 8005cae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005cb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	68b8      	ldr	r0, [r7, #8]
 8005cbe:	f7ff ff4b 	bl	8005b58 <BSP_SD_ReadBlocks>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d107      	bne.n	8005cd8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005cc8:	bf00      	nop
 8005cca:	f7ff ff81 	bl	8005bd0 <BSP_SD_GetCardState>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1fa      	bne.n	8005cca <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b086      	sub	sp, #24
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
 8005cee:	4603      	mov	r3, r0
 8005cf0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005cf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	68b8      	ldr	r0, [r7, #8]
 8005d00:	f7ff ff48 	bl	8005b94 <BSP_SD_WriteBlocks>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d107      	bne.n	8005d1a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005d0a:	bf00      	nop
 8005d0c:	f7ff ff60 	bl	8005bd0 <BSP_SD_GetCardState>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1fa      	bne.n	8005d0c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08c      	sub	sp, #48	@ 0x30
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	603a      	str	r2, [r7, #0]
 8005d2e:	71fb      	strb	r3, [r7, #7]
 8005d30:	460b      	mov	r3, r1
 8005d32:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005d3a:	4b25      	ldr	r3, [pc, #148]	@ (8005dd0 <SD_ioctl+0xac>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <SD_ioctl+0x28>
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e03c      	b.n	8005dc6 <SD_ioctl+0xa2>

  switch (cmd)
 8005d4c:	79bb      	ldrb	r3, [r7, #6]
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d834      	bhi.n	8005dbc <SD_ioctl+0x98>
 8005d52:	a201      	add	r2, pc, #4	@ (adr r2, 8005d58 <SD_ioctl+0x34>)
 8005d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d58:	08005d69 	.word	0x08005d69
 8005d5c:	08005d71 	.word	0x08005d71
 8005d60:	08005d89 	.word	0x08005d89
 8005d64:	08005da3 	.word	0x08005da3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005d6e:	e028      	b.n	8005dc2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d70:	f107 030c 	add.w	r3, r7, #12
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff ff3b 	bl	8005bf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005d86:	e01c      	b.n	8005dc2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d88:	f107 030c 	add.w	r3, r7, #12
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff ff2f 	bl	8005bf0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005da0:	e00f      	b.n	8005dc2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005da2:	f107 030c 	add.w	r3, r7, #12
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff ff22 	bl	8005bf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dae:	0a5a      	lsrs	r2, r3, #9
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005dba:	e002      	b.n	8005dc2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3730      	adds	r7, #48	@ 0x30
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000009 	.word	0x20000009

08005dd4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005dde:	79fb      	ldrb	r3, [r7, #7]
 8005de0:	4a08      	ldr	r2, [pc, #32]	@ (8005e04 <disk_status+0x30>)
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	79fa      	ldrb	r2, [r7, #7]
 8005dec:	4905      	ldr	r1, [pc, #20]	@ (8005e04 <disk_status+0x30>)
 8005dee:	440a      	add	r2, r1
 8005df0:	7a12      	ldrb	r2, [r2, #8]
 8005df2:	4610      	mov	r0, r2
 8005df4:	4798      	blx	r3
 8005df6:	4603      	mov	r3, r0
 8005df8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	200018c8 	.word	0x200018c8

08005e08 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	4603      	mov	r3, r0
 8005e10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005e16:	79fb      	ldrb	r3, [r7, #7]
 8005e18:	4a0e      	ldr	r2, [pc, #56]	@ (8005e54 <disk_initialize+0x4c>)
 8005e1a:	5cd3      	ldrb	r3, [r2, r3]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d114      	bne.n	8005e4a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005e20:	79fb      	ldrb	r3, [r7, #7]
 8005e22:	4a0c      	ldr	r2, [pc, #48]	@ (8005e54 <disk_initialize+0x4c>)
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	79fa      	ldrb	r2, [r7, #7]
 8005e2e:	4909      	ldr	r1, [pc, #36]	@ (8005e54 <disk_initialize+0x4c>)
 8005e30:	440a      	add	r2, r1
 8005e32:	7a12      	ldrb	r2, [r2, #8]
 8005e34:	4610      	mov	r0, r2
 8005e36:	4798      	blx	r3
 8005e38:	4603      	mov	r3, r0
 8005e3a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d103      	bne.n	8005e4a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	4a03      	ldr	r2, [pc, #12]	@ (8005e54 <disk_initialize+0x4c>)
 8005e46:	2101      	movs	r1, #1
 8005e48:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	200018c8 	.word	0x200018c8

08005e58 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005e58:	b590      	push	{r4, r7, lr}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	607a      	str	r2, [r7, #4]
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	4603      	mov	r3, r0
 8005e66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e94 <disk_read+0x3c>)
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	689c      	ldr	r4, [r3, #8]
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	4a07      	ldr	r2, [pc, #28]	@ (8005e94 <disk_read+0x3c>)
 8005e78:	4413      	add	r3, r2
 8005e7a:	7a18      	ldrb	r0, [r3, #8]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	47a0      	blx	r4
 8005e84:	4603      	mov	r3, r0
 8005e86:	75fb      	strb	r3, [r7, #23]
  return res;
 8005e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	371c      	adds	r7, #28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd90      	pop	{r4, r7, pc}
 8005e92:	bf00      	nop
 8005e94:	200018c8 	.word	0x200018c8

08005e98 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005e98:	b590      	push	{r4, r7, lr}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	607a      	str	r2, [r7, #4]
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8005ed4 <disk_write+0x3c>)
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	68dc      	ldr	r4, [r3, #12]
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	4a07      	ldr	r2, [pc, #28]	@ (8005ed4 <disk_write+0x3c>)
 8005eb8:	4413      	add	r3, r2
 8005eba:	7a18      	ldrb	r0, [r3, #8]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	68b9      	ldr	r1, [r7, #8]
 8005ec2:	47a0      	blx	r4
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd90      	pop	{r4, r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	200018c8 	.word	0x200018c8

08005ed8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	603a      	str	r2, [r7, #0]
 8005ee2:	71fb      	strb	r3, [r7, #7]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005ee8:	79fb      	ldrb	r3, [r7, #7]
 8005eea:	4a09      	ldr	r2, [pc, #36]	@ (8005f10 <disk_ioctl+0x38>)
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	79fa      	ldrb	r2, [r7, #7]
 8005ef6:	4906      	ldr	r1, [pc, #24]	@ (8005f10 <disk_ioctl+0x38>)
 8005ef8:	440a      	add	r2, r1
 8005efa:	7a10      	ldrb	r0, [r2, #8]
 8005efc:	79b9      	ldrb	r1, [r7, #6]
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	4798      	blx	r3
 8005f02:	4603      	mov	r3, r0
 8005f04:	73fb      	strb	r3, [r7, #15]
  return res;
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	200018c8 	.word	0x200018c8

08005f14 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005f24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f28:	021b      	lsls	r3, r3, #8
 8005f2a:	b21a      	sxth	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	b21b      	sxth	r3, r3
 8005f32:	4313      	orrs	r3, r2
 8005f34:	b21b      	sxth	r3, r3
 8005f36:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005f38:	89fb      	ldrh	r3, [r7, #14]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005f46:	b480      	push	{r7}
 8005f48:	b085      	sub	sp, #20
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	3303      	adds	r3, #3
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	021b      	lsls	r3, r3, #8
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	3202      	adds	r2, #2
 8005f5e:	7812      	ldrb	r2, [r2, #0]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	021b      	lsls	r3, r3, #8
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	3201      	adds	r2, #1
 8005f6c:	7812      	ldrb	r2, [r2, #0]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	7812      	ldrb	r2, [r2, #0]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]
	return rv;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	607a      	str	r2, [r7, #4]
 8005f9e:	887a      	ldrh	r2, [r7, #2]
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	701a      	strb	r2, [r3, #0]
 8005fa4:	887b      	ldrh	r3, [r7, #2]
 8005fa6:	0a1b      	lsrs	r3, r3, #8
 8005fa8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	887a      	ldrh	r2, [r7, #2]
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	701a      	strb	r2, [r3, #0]
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	607a      	str	r2, [r7, #4]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	0a1b      	lsrs	r3, r3, #8
 8005fdc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	0a1b      	lsrs	r3, r3, #8
 8005fee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	607a      	str	r2, [r7, #4]
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	0a1b      	lsrs	r3, r3, #8
 8006000:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800601a:	b480      	push	{r7}
 800601c:	b087      	sub	sp, #28
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00d      	beq.n	8006050 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	1c53      	adds	r3, r2, #1
 8006038:	613b      	str	r3, [r7, #16]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	1c59      	adds	r1, r3, #1
 800603e:	6179      	str	r1, [r7, #20]
 8006040:	7812      	ldrb	r2, [r2, #0]
 8006042:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3b01      	subs	r3, #1
 8006048:	607b      	str	r3, [r7, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1f1      	bne.n	8006034 <mem_cpy+0x1a>
	}
}
 8006050:	bf00      	nop
 8006052:	371c      	adds	r7, #28
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	617a      	str	r2, [r7, #20]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3b01      	subs	r3, #1
 800607c:	607b      	str	r3, [r7, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1f3      	bne.n	800606c <mem_set+0x10>
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006092:	b480      	push	{r7}
 8006094:	b089      	sub	sp, #36	@ 0x24
 8006096:	af00      	add	r7, sp, #0
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80060a6:	2300      	movs	r3, #0
 80060a8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	61fa      	str	r2, [r7, #28]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	4619      	mov	r1, r3
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	61ba      	str	r2, [r7, #24]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	1acb      	subs	r3, r1, r3
 80060be:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	607b      	str	r3, [r7, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <mem_cmp+0x40>
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0eb      	beq.n	80060aa <mem_cmp+0x18>

	return r;
 80060d2:	697b      	ldr	r3, [r7, #20]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3724      	adds	r7, #36	@ 0x24
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80060ea:	e002      	b.n	80060f2 <chk_chr+0x12>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3301      	adds	r3, #1
 80060f0:	607b      	str	r3, [r7, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <chk_chr+0x26>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	4293      	cmp	r3, r2
 8006104:	d1f2      	bne.n	80060ec <chk_chr+0xc>
	return *str;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	781b      	ldrb	r3, [r3, #0]
}
 800610a:	4618      	mov	r0, r3
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
	...

08006118 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006122:	2300      	movs	r3, #0
 8006124:	60bb      	str	r3, [r7, #8]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	e029      	b.n	8006180 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800612c:	4a27      	ldr	r2, [pc, #156]	@ (80061cc <chk_lock+0xb4>)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	4413      	add	r3, r2
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d01d      	beq.n	8006176 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800613a:	4a24      	ldr	r2, [pc, #144]	@ (80061cc <chk_lock+0xb4>)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	4413      	add	r3, r2
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d116      	bne.n	800617a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800614c:	4a1f      	ldr	r2, [pc, #124]	@ (80061cc <chk_lock+0xb4>)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	4413      	add	r3, r2
 8006154:	3304      	adds	r3, #4
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800615c:	429a      	cmp	r2, r3
 800615e:	d10c      	bne.n	800617a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006160:	4a1a      	ldr	r2, [pc, #104]	@ (80061cc <chk_lock+0xb4>)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	4413      	add	r3, r2
 8006168:	3308      	adds	r3, #8
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006170:	429a      	cmp	r2, r3
 8006172:	d102      	bne.n	800617a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006174:	e007      	b.n	8006186 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006176:	2301      	movs	r3, #1
 8006178:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3301      	adds	r3, #1
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d9d2      	bls.n	800612c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d109      	bne.n	80061a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d102      	bne.n	8006198 <chk_lock+0x80>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d101      	bne.n	800619c <chk_lock+0x84>
 8006198:	2300      	movs	r3, #0
 800619a:	e010      	b.n	80061be <chk_lock+0xa6>
 800619c:	2312      	movs	r3, #18
 800619e:	e00e      	b.n	80061be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d108      	bne.n	80061b8 <chk_lock+0xa0>
 80061a6:	4a09      	ldr	r2, [pc, #36]	@ (80061cc <chk_lock+0xb4>)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	4413      	add	r3, r2
 80061ae:	330c      	adds	r3, #12
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061b6:	d101      	bne.n	80061bc <chk_lock+0xa4>
 80061b8:	2310      	movs	r3, #16
 80061ba:	e000      	b.n	80061be <chk_lock+0xa6>
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	200016a8 	.word	0x200016a8

080061d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80061d6:	2300      	movs	r3, #0
 80061d8:	607b      	str	r3, [r7, #4]
 80061da:	e002      	b.n	80061e2 <enq_lock+0x12>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3301      	adds	r3, #1
 80061e0:	607b      	str	r3, [r7, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d806      	bhi.n	80061f6 <enq_lock+0x26>
 80061e8:	4a09      	ldr	r2, [pc, #36]	@ (8006210 <enq_lock+0x40>)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	4413      	add	r3, r2
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1f2      	bne.n	80061dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	bf14      	ite	ne
 80061fc:	2301      	movne	r3, #1
 80061fe:	2300      	moveq	r3, #0
 8006200:	b2db      	uxtb	r3, r3
}
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	200016a8 	.word	0x200016a8

08006214 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	e01f      	b.n	8006264 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006224:	4a41      	ldr	r2, [pc, #260]	@ (800632c <inc_lock+0x118>)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	4413      	add	r3, r2
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d113      	bne.n	800625e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006236:	4a3d      	ldr	r2, [pc, #244]	@ (800632c <inc_lock+0x118>)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	4413      	add	r3, r2
 800623e:	3304      	adds	r3, #4
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006246:	429a      	cmp	r2, r3
 8006248:	d109      	bne.n	800625e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800624a:	4a38      	ldr	r2, [pc, #224]	@ (800632c <inc_lock+0x118>)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	4413      	add	r3, r2
 8006252:	3308      	adds	r3, #8
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800625a:	429a      	cmp	r2, r3
 800625c:	d006      	beq.n	800626c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3301      	adds	r3, #1
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d9dc      	bls.n	8006224 <inc_lock+0x10>
 800626a:	e000      	b.n	800626e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800626c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b02      	cmp	r3, #2
 8006272:	d132      	bne.n	80062da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	e002      	b.n	8006280 <inc_lock+0x6c>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3301      	adds	r3, #1
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d806      	bhi.n	8006294 <inc_lock+0x80>
 8006286:	4a29      	ldr	r2, [pc, #164]	@ (800632c <inc_lock+0x118>)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	4413      	add	r3, r2
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1f2      	bne.n	800627a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d101      	bne.n	800629e <inc_lock+0x8a>
 800629a:	2300      	movs	r3, #0
 800629c:	e040      	b.n	8006320 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	4922      	ldr	r1, [pc, #136]	@ (800632c <inc_lock+0x118>)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	011b      	lsls	r3, r3, #4
 80062a8:	440b      	add	r3, r1
 80062aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	491e      	ldr	r1, [pc, #120]	@ (800632c <inc_lock+0x118>)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	011b      	lsls	r3, r3, #4
 80062b6:	440b      	add	r3, r1
 80062b8:	3304      	adds	r3, #4
 80062ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	695a      	ldr	r2, [r3, #20]
 80062c0:	491a      	ldr	r1, [pc, #104]	@ (800632c <inc_lock+0x118>)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	011b      	lsls	r3, r3, #4
 80062c6:	440b      	add	r3, r1
 80062c8:	3308      	adds	r3, #8
 80062ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80062cc:	4a17      	ldr	r2, [pc, #92]	@ (800632c <inc_lock+0x118>)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	4413      	add	r3, r2
 80062d4:	330c      	adds	r3, #12
 80062d6:	2200      	movs	r2, #0
 80062d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d009      	beq.n	80062f4 <inc_lock+0xe0>
 80062e0:	4a12      	ldr	r2, [pc, #72]	@ (800632c <inc_lock+0x118>)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	4413      	add	r3, r2
 80062e8:	330c      	adds	r3, #12
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <inc_lock+0xe0>
 80062f0:	2300      	movs	r3, #0
 80062f2:	e015      	b.n	8006320 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d108      	bne.n	800630c <inc_lock+0xf8>
 80062fa:	4a0c      	ldr	r2, [pc, #48]	@ (800632c <inc_lock+0x118>)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	4413      	add	r3, r2
 8006302:	330c      	adds	r3, #12
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	3301      	adds	r3, #1
 8006308:	b29a      	uxth	r2, r3
 800630a:	e001      	b.n	8006310 <inc_lock+0xfc>
 800630c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006310:	4906      	ldr	r1, [pc, #24]	@ (800632c <inc_lock+0x118>)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	011b      	lsls	r3, r3, #4
 8006316:	440b      	add	r3, r1
 8006318:	330c      	adds	r3, #12
 800631a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3301      	adds	r3, #1
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	200016a8 	.word	0x200016a8

08006330 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3b01      	subs	r3, #1
 800633c:	607b      	str	r3, [r7, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d825      	bhi.n	8006390 <dec_lock+0x60>
		n = Files[i].ctr;
 8006344:	4a17      	ldr	r2, [pc, #92]	@ (80063a4 <dec_lock+0x74>)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	4413      	add	r3, r2
 800634c:	330c      	adds	r3, #12
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006352:	89fb      	ldrh	r3, [r7, #14]
 8006354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006358:	d101      	bne.n	800635e <dec_lock+0x2e>
 800635a:	2300      	movs	r3, #0
 800635c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800635e:	89fb      	ldrh	r3, [r7, #14]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <dec_lock+0x3a>
 8006364:	89fb      	ldrh	r3, [r7, #14]
 8006366:	3b01      	subs	r3, #1
 8006368:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800636a:	4a0e      	ldr	r2, [pc, #56]	@ (80063a4 <dec_lock+0x74>)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	4413      	add	r3, r2
 8006372:	330c      	adds	r3, #12
 8006374:	89fa      	ldrh	r2, [r7, #14]
 8006376:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006378:	89fb      	ldrh	r3, [r7, #14]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d105      	bne.n	800638a <dec_lock+0x5a>
 800637e:	4a09      	ldr	r2, [pc, #36]	@ (80063a4 <dec_lock+0x74>)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	4413      	add	r3, r2
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	737b      	strb	r3, [r7, #13]
 800638e:	e001      	b.n	8006394 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006390:	2302      	movs	r3, #2
 8006392:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006394:	7b7b      	ldrb	r3, [r7, #13]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	200016a8 	.word	0x200016a8

080063a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80063b0:	2300      	movs	r3, #0
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	e010      	b.n	80063d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80063b6:	4a0d      	ldr	r2, [pc, #52]	@ (80063ec <clear_lock+0x44>)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	4413      	add	r3, r2
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d105      	bne.n	80063d2 <clear_lock+0x2a>
 80063c6:	4a09      	ldr	r2, [pc, #36]	@ (80063ec <clear_lock+0x44>)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	4413      	add	r3, r2
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3301      	adds	r3, #1
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d9eb      	bls.n	80063b6 <clear_lock+0xe>
	}
}
 80063de:	bf00      	nop
 80063e0:	bf00      	nop
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	200016a8 	.word	0x200016a8

080063f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	78db      	ldrb	r3, [r3, #3]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d034      	beq.n	800646e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006408:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	7858      	ldrb	r0, [r3, #1]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006414:	2301      	movs	r3, #1
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	f7ff fd3e 	bl	8005e98 <disk_write>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006422:	2301      	movs	r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
 8006426:	e022      	b.n	800646e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	1ad2      	subs	r2, r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	429a      	cmp	r2, r3
 800643c:	d217      	bcs.n	800646e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	789b      	ldrb	r3, [r3, #2]
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	e010      	b.n	8006468 <sync_window+0x78>
					wsect += fs->fsize;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4413      	add	r3, r2
 800644e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	7858      	ldrb	r0, [r3, #1]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800645a:	2301      	movs	r3, #1
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	f7ff fd1b 	bl	8005e98 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	3b01      	subs	r3, #1
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d8eb      	bhi.n	8006446 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3718      	adds	r7, #24
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d01b      	beq.n	80064c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7ff ffad 	bl	80063f0 <sync_window>
 8006496:	4603      	mov	r3, r0
 8006498:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d113      	bne.n	80064c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	7858      	ldrb	r0, [r3, #1]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80064aa:	2301      	movs	r3, #1
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	f7ff fcd3 	bl	8005e58 <disk_read>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d004      	beq.n	80064c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80064b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80064bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80064be:	2301      	movs	r3, #1
 80064c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7ff ff87 	bl	80063f0 <sync_window>
 80064e2:	4603      	mov	r3, r0
 80064e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d159      	bne.n	80065a0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b03      	cmp	r3, #3
 80064f2:	d149      	bne.n	8006588 <sync_fs+0xb4>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	791b      	ldrb	r3, [r3, #4]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d145      	bne.n	8006588 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	899b      	ldrh	r3, [r3, #12]
 8006506:	461a      	mov	r2, r3
 8006508:	2100      	movs	r1, #0
 800650a:	f7ff fda7 	bl	800605c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3338      	adds	r3, #56	@ 0x38
 8006512:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006516:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff fd36 	bl	8005f8c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3338      	adds	r3, #56	@ 0x38
 8006524:	4921      	ldr	r1, [pc, #132]	@ (80065ac <sync_fs+0xd8>)
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff fd4b 	bl	8005fc2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3338      	adds	r3, #56	@ 0x38
 8006530:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006534:	491e      	ldr	r1, [pc, #120]	@ (80065b0 <sync_fs+0xdc>)
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff fd43 	bl	8005fc2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3338      	adds	r3, #56	@ 0x38
 8006540:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	4619      	mov	r1, r3
 800654a:	4610      	mov	r0, r2
 800654c:	f7ff fd39 	bl	8005fc2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3338      	adds	r3, #56	@ 0x38
 8006554:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	4619      	mov	r1, r3
 800655e:	4610      	mov	r0, r2
 8006560:	f7ff fd2f 	bl	8005fc2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	7858      	ldrb	r0, [r3, #1]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800657c:	2301      	movs	r3, #1
 800657e:	f7ff fc8b 	bl	8005e98 <disk_write>
			fs->fsi_flag = 0;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	785b      	ldrb	r3, [r3, #1]
 800658c:	2200      	movs	r2, #0
 800658e:	2100      	movs	r1, #0
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff fca1 	bl	8005ed8 <disk_ioctl>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <sync_fs+0xcc>
 800659c:	2301      	movs	r3, #1
 800659e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	41615252 	.word	0x41615252
 80065b0:	61417272 	.word	0x61417272

080065b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	3b02      	subs	r3, #2
 80065c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	3b02      	subs	r3, #2
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d301      	bcc.n	80065d4 <clust2sect+0x20>
 80065d0:	2300      	movs	r3, #0
 80065d2:	e008      	b.n	80065e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	895b      	ldrh	r3, [r3, #10]
 80065d8:	461a      	mov	r2, r3
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	fb03 f202 	mul.w	r2, r3, r2
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e4:	4413      	add	r3, r2
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b086      	sub	sp, #24
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d904      	bls.n	8006612 <get_fat+0x20>
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d302      	bcc.n	8006618 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006612:	2301      	movs	r3, #1
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	e0ba      	b.n	800678e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006618:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800661c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	2b03      	cmp	r3, #3
 8006624:	f000 8082 	beq.w	800672c <get_fat+0x13a>
 8006628:	2b03      	cmp	r3, #3
 800662a:	f300 80a6 	bgt.w	800677a <get_fat+0x188>
 800662e:	2b01      	cmp	r3, #1
 8006630:	d002      	beq.n	8006638 <get_fat+0x46>
 8006632:	2b02      	cmp	r3, #2
 8006634:	d055      	beq.n	80066e2 <get_fat+0xf0>
 8006636:	e0a0      	b.n	800677a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4413      	add	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	899b      	ldrh	r3, [r3, #12]
 800664e:	4619      	mov	r1, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	fbb3 f3f1 	udiv	r3, r3, r1
 8006656:	4413      	add	r3, r2
 8006658:	4619      	mov	r1, r3
 800665a:	6938      	ldr	r0, [r7, #16]
 800665c:	f7ff ff0c 	bl	8006478 <move_window>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	f040 808c 	bne.w	8006780 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	60fa      	str	r2, [r7, #12]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	8992      	ldrh	r2, [r2, #12]
 8006672:	fbb3 f1f2 	udiv	r1, r3, r2
 8006676:	fb01 f202 	mul.w	r2, r1, r2
 800667a:	1a9b      	subs	r3, r3, r2
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	4413      	add	r3, r2
 8006680:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006684:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	899b      	ldrh	r3, [r3, #12]
 800668e:	4619      	mov	r1, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	fbb3 f3f1 	udiv	r3, r3, r1
 8006696:	4413      	add	r3, r2
 8006698:	4619      	mov	r1, r3
 800669a:	6938      	ldr	r0, [r7, #16]
 800669c:	f7ff feec 	bl	8006478 <move_window>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d16e      	bne.n	8006784 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	899b      	ldrh	r3, [r3, #12]
 80066aa:	461a      	mov	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80066b2:	fb01 f202 	mul.w	r2, r1, r2
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4413      	add	r3, r2
 80066bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <get_fat+0xe6>
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	091b      	lsrs	r3, r3, #4
 80066d6:	e002      	b.n	80066de <get_fat+0xec>
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066de:	617b      	str	r3, [r7, #20]
			break;
 80066e0:	e055      	b.n	800678e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	899b      	ldrh	r3, [r3, #12]
 80066ea:	085b      	lsrs	r3, r3, #1
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	4619      	mov	r1, r3
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80066f6:	4413      	add	r3, r2
 80066f8:	4619      	mov	r1, r3
 80066fa:	6938      	ldr	r0, [r7, #16]
 80066fc:	f7ff febc 	bl	8006478 <move_window>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d140      	bne.n	8006788 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	8992      	ldrh	r2, [r2, #12]
 8006714:	fbb3 f0f2 	udiv	r0, r3, r2
 8006718:	fb00 f202 	mul.w	r2, r0, r2
 800671c:	1a9b      	subs	r3, r3, r2
 800671e:	440b      	add	r3, r1
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff fbf7 	bl	8005f14 <ld_word>
 8006726:	4603      	mov	r3, r0
 8006728:	617b      	str	r3, [r7, #20]
			break;
 800672a:	e030      	b.n	800678e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	899b      	ldrh	r3, [r3, #12]
 8006734:	089b      	lsrs	r3, r3, #2
 8006736:	b29b      	uxth	r3, r3
 8006738:	4619      	mov	r1, r3
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006740:	4413      	add	r3, r2
 8006742:	4619      	mov	r1, r3
 8006744:	6938      	ldr	r0, [r7, #16]
 8006746:	f7ff fe97 	bl	8006478 <move_window>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d11d      	bne.n	800678c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	8992      	ldrh	r2, [r2, #12]
 800675e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006762:	fb00 f202 	mul.w	r2, r0, r2
 8006766:	1a9b      	subs	r3, r3, r2
 8006768:	440b      	add	r3, r1
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff fbeb 	bl	8005f46 <ld_dword>
 8006770:	4603      	mov	r3, r0
 8006772:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006776:	617b      	str	r3, [r7, #20]
			break;
 8006778:	e009      	b.n	800678e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800677a:	2301      	movs	r3, #1
 800677c:	617b      	str	r3, [r7, #20]
 800677e:	e006      	b.n	800678e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006780:	bf00      	nop
 8006782:	e004      	b.n	800678e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006784:	bf00      	nop
 8006786:	e002      	b.n	800678e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006788:	bf00      	nop
 800678a:	e000      	b.n	800678e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800678c:	bf00      	nop
		}
	}

	return val;
 800678e:	697b      	ldr	r3, [r7, #20]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006798:	b590      	push	{r4, r7, lr}
 800679a:	b089      	sub	sp, #36	@ 0x24
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80067a4:	2302      	movs	r3, #2
 80067a6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	f240 8109 	bls.w	80069c2 <put_fat+0x22a>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	f080 8103 	bcs.w	80069c2 <put_fat+0x22a>
		switch (fs->fs_type) {
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	f000 80b6 	beq.w	8006932 <put_fat+0x19a>
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	f300 80fb 	bgt.w	80069c2 <put_fat+0x22a>
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d003      	beq.n	80067d8 <put_fat+0x40>
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	f000 8083 	beq.w	80068dc <put_fat+0x144>
 80067d6:	e0f4      	b.n	80069c2 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	61bb      	str	r3, [r7, #24]
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	085b      	lsrs	r3, r3, #1
 80067e0:	69ba      	ldr	r2, [r7, #24]
 80067e2:	4413      	add	r3, r2
 80067e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	899b      	ldrh	r3, [r3, #12]
 80067ee:	4619      	mov	r1, r3
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80067f6:	4413      	add	r3, r2
 80067f8:	4619      	mov	r1, r3
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f7ff fe3c 	bl	8006478 <move_window>
 8006800:	4603      	mov	r3, r0
 8006802:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006804:	7ffb      	ldrb	r3, [r7, #31]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f040 80d4 	bne.w	80069b4 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	61ba      	str	r2, [r7, #24]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	8992      	ldrh	r2, [r2, #12]
 800681c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006820:	fb00 f202 	mul.w	r2, r0, r2
 8006824:	1a9b      	subs	r3, r3, r2
 8006826:	440b      	add	r3, r1
 8006828:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00d      	beq.n	8006850 <put_fat+0xb8>
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	b25b      	sxtb	r3, r3
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	b25a      	sxtb	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	b25b      	sxtb	r3, r3
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	b25b      	sxtb	r3, r3
 8006848:	4313      	orrs	r3, r2
 800684a:	b25b      	sxtb	r3, r3
 800684c:	b2db      	uxtb	r3, r3
 800684e:	e001      	b.n	8006854 <put_fat+0xbc>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2201      	movs	r2, #1
 800685c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	899b      	ldrh	r3, [r3, #12]
 8006866:	4619      	mov	r1, r3
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	fbb3 f3f1 	udiv	r3, r3, r1
 800686e:	4413      	add	r3, r2
 8006870:	4619      	mov	r1, r3
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f7ff fe00 	bl	8006478 <move_window>
 8006878:	4603      	mov	r3, r0
 800687a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800687c:	7ffb      	ldrb	r3, [r7, #31]
 800687e:	2b00      	cmp	r3, #0
 8006880:	f040 809a 	bne.w	80069b8 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	899b      	ldrh	r3, [r3, #12]
 800688e:	461a      	mov	r2, r3
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	fbb3 f0f2 	udiv	r0, r3, r2
 8006896:	fb00 f202 	mul.w	r2, r0, r2
 800689a:	1a9b      	subs	r3, r3, r2
 800689c:	440b      	add	r3, r1
 800689e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <put_fat+0x11a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	091b      	lsrs	r3, r3, #4
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	e00e      	b.n	80068d0 <put_fat+0x138>
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	b25b      	sxtb	r3, r3
 80068b8:	f023 030f 	bic.w	r3, r3, #15
 80068bc:	b25a      	sxtb	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	0a1b      	lsrs	r3, r3, #8
 80068c2:	b25b      	sxtb	r3, r3
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	b25b      	sxtb	r3, r3
 80068ca:	4313      	orrs	r3, r2
 80068cc:	b25b      	sxtb	r3, r3
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2201      	movs	r2, #1
 80068d8:	70da      	strb	r2, [r3, #3]
			break;
 80068da:	e072      	b.n	80069c2 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	899b      	ldrh	r3, [r3, #12]
 80068e4:	085b      	lsrs	r3, r3, #1
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	4619      	mov	r1, r3
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80068f0:	4413      	add	r3, r2
 80068f2:	4619      	mov	r1, r3
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f7ff fdbf 	bl	8006478 <move_window>
 80068fa:	4603      	mov	r3, r0
 80068fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068fe:	7ffb      	ldrb	r3, [r7, #31]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d15b      	bne.n	80069bc <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	8992      	ldrh	r2, [r2, #12]
 8006912:	fbb3 f0f2 	udiv	r0, r3, r2
 8006916:	fb00 f202 	mul.w	r2, r0, r2
 800691a:	1a9b      	subs	r3, r3, r2
 800691c:	440b      	add	r3, r1
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	b292      	uxth	r2, r2
 8006922:	4611      	mov	r1, r2
 8006924:	4618      	mov	r0, r3
 8006926:	f7ff fb31 	bl	8005f8c <st_word>
			fs->wflag = 1;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2201      	movs	r2, #1
 800692e:	70da      	strb	r2, [r3, #3]
			break;
 8006930:	e047      	b.n	80069c2 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	899b      	ldrh	r3, [r3, #12]
 800693a:	089b      	lsrs	r3, r3, #2
 800693c:	b29b      	uxth	r3, r3
 800693e:	4619      	mov	r1, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	fbb3 f3f1 	udiv	r3, r3, r1
 8006946:	4413      	add	r3, r2
 8006948:	4619      	mov	r1, r3
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7ff fd94 	bl	8006478 <move_window>
 8006950:	4603      	mov	r3, r0
 8006952:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006954:	7ffb      	ldrb	r3, [r7, #31]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d132      	bne.n	80069c0 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	8992      	ldrh	r2, [r2, #12]
 800696e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006972:	fb00 f202 	mul.w	r2, r0, r2
 8006976:	1a9b      	subs	r3, r3, r2
 8006978:	440b      	add	r3, r1
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff fae3 	bl	8005f46 <ld_dword>
 8006980:	4603      	mov	r3, r0
 8006982:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006986:	4323      	orrs	r3, r4
 8006988:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	8992      	ldrh	r2, [r2, #12]
 8006998:	fbb3 f0f2 	udiv	r0, r3, r2
 800699c:	fb00 f202 	mul.w	r2, r0, r2
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	440b      	add	r3, r1
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7ff fb0b 	bl	8005fc2 <st_dword>
			fs->wflag = 1;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2201      	movs	r2, #1
 80069b0:	70da      	strb	r2, [r3, #3]
			break;
 80069b2:	e006      	b.n	80069c2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80069b4:	bf00      	nop
 80069b6:	e004      	b.n	80069c2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80069b8:	bf00      	nop
 80069ba:	e002      	b.n	80069c2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80069bc:	bf00      	nop
 80069be:	e000      	b.n	80069c2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80069c0:	bf00      	nop
		}
	}
	return res;
 80069c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3724      	adds	r7, #36	@ 0x24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd90      	pop	{r4, r7, pc}

080069cc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d904      	bls.n	80069f2 <remove_chain+0x26>
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d301      	bcc.n	80069f6 <remove_chain+0x2a>
 80069f2:	2302      	movs	r3, #2
 80069f4:	e04b      	b.n	8006a8e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00c      	beq.n	8006a16 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80069fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	69b8      	ldr	r0, [r7, #24]
 8006a04:	f7ff fec8 	bl	8006798 <put_fat>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006a0c:	7ffb      	ldrb	r3, [r7, #31]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <remove_chain+0x4a>
 8006a12:	7ffb      	ldrb	r3, [r7, #31]
 8006a14:	e03b      	b.n	8006a8e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006a16:	68b9      	ldr	r1, [r7, #8]
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7ff fdea 	bl	80065f2 <get_fat>
 8006a1e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d031      	beq.n	8006a8a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <remove_chain+0x64>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e02e      	b.n	8006a8e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a36:	d101      	bne.n	8006a3c <remove_chain+0x70>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e028      	b.n	8006a8e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	68b9      	ldr	r1, [r7, #8]
 8006a40:	69b8      	ldr	r0, [r7, #24]
 8006a42:	f7ff fea9 	bl	8006798 <put_fat>
 8006a46:	4603      	mov	r3, r0
 8006a48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006a4a:	7ffb      	ldrb	r3, [r7, #31]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <remove_chain+0x88>
 8006a50:	7ffb      	ldrb	r3, [r7, #31]
 8006a52:	e01c      	b.n	8006a8e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	699a      	ldr	r2, [r3, #24]
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	3b02      	subs	r3, #2
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d20b      	bcs.n	8006a7a <remove_chain+0xae>
			fs->free_clst++;
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	791b      	ldrb	r3, [r3, #4]
 8006a70:	f043 0301 	orr.w	r3, r3, #1
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d3c6      	bcc.n	8006a16 <remove_chain+0x4a>
 8006a88:	e000      	b.n	8006a8c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006a8a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3720      	adds	r7, #32
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b088      	sub	sp, #32
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10d      	bne.n	8006ac8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <create_chain+0x2c>
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d31b      	bcc.n	8006afa <create_chain+0x64>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	61bb      	str	r3, [r7, #24]
 8006ac6:	e018      	b.n	8006afa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff fd91 	bl	80065f2 <get_fat>
 8006ad0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d801      	bhi.n	8006adc <create_chain+0x46>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e070      	b.n	8006bbe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ae2:	d101      	bne.n	8006ae8 <create_chain+0x52>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	e06a      	b.n	8006bbe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d201      	bcs.n	8006af6 <create_chain+0x60>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	e063      	b.n	8006bbe <create_chain+0x128>
		scl = clst;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	3301      	adds	r3, #1
 8006b02:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	69fa      	ldr	r2, [r7, #28]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d307      	bcc.n	8006b1e <create_chain+0x88>
				ncl = 2;
 8006b0e:	2302      	movs	r3, #2
 8006b10:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d901      	bls.n	8006b1e <create_chain+0x88>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e04f      	b.n	8006bbe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006b1e:	69f9      	ldr	r1, [r7, #28]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff fd66 	bl	80065f2 <get_fat>
 8006b26:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00e      	beq.n	8006b4c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d003      	beq.n	8006b3c <create_chain+0xa6>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b3a:	d101      	bne.n	8006b40 <create_chain+0xaa>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	e03e      	b.n	8006bbe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d1da      	bne.n	8006afe <create_chain+0x68>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	e038      	b.n	8006bbe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006b4c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006b4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b52:	69f9      	ldr	r1, [r7, #28]
 8006b54:	6938      	ldr	r0, [r7, #16]
 8006b56:	f7ff fe1f 	bl	8006798 <put_fat>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d109      	bne.n	8006b78 <create_chain+0xe2>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d006      	beq.n	8006b78 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6938      	ldr	r0, [r7, #16]
 8006b70:	f7ff fe12 	bl	8006798 <put_fat>
 8006b74:	4603      	mov	r3, r0
 8006b76:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006b78:	7dfb      	ldrb	r3, [r7, #23]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d116      	bne.n	8006bac <create_chain+0x116>
		fs->last_clst = ncl;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	69fa      	ldr	r2, [r7, #28]
 8006b82:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	699a      	ldr	r2, [r3, #24]
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	3b02      	subs	r3, #2
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d804      	bhi.n	8006b9c <create_chain+0x106>
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	1e5a      	subs	r2, r3, #1
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	791b      	ldrb	r3, [r3, #4]
 8006ba0:	f043 0301 	orr.w	r3, r3, #1
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	711a      	strb	r2, [r3, #4]
 8006baa:	e007      	b.n	8006bbc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d102      	bne.n	8006bb8 <create_chain+0x122>
 8006bb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006bb6:	e000      	b.n	8006bba <create_chain+0x124>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006bbc:	69fb      	ldr	r3, [r7, #28]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b087      	sub	sp, #28
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bda:	3304      	adds	r3, #4
 8006bdc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	899b      	ldrh	r3, [r3, #12]
 8006be2:	461a      	mov	r2, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	8952      	ldrh	r2, [r2, #10]
 8006bee:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bf2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1d1a      	adds	r2, r3, #4
 8006bf8:	613a      	str	r2, [r7, #16]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <clmt_clust+0x42>
 8006c04:	2300      	movs	r3, #0
 8006c06:	e010      	b.n	8006c2a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d307      	bcc.n	8006c20 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006c1e:	e7e9      	b.n	8006bf4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006c20:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	4413      	add	r3, r2
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b086      	sub	sp, #24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c4c:	d204      	bcs.n	8006c58 <dir_sdi+0x22>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	f003 031f 	and.w	r3, r3, #31
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <dir_sdi+0x26>
		return FR_INT_ERR;
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e071      	b.n	8006d40 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <dir_sdi+0x46>
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d902      	bls.n	8006c7c <dir_sdi+0x46>
		clst = fs->dirbase;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10c      	bne.n	8006c9c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	8912      	ldrh	r2, [r2, #8]
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d301      	bcc.n	8006c92 <dir_sdi+0x5c>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	e056      	b.n	8006d40 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	61da      	str	r2, [r3, #28]
 8006c9a:	e02d      	b.n	8006cf8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	895b      	ldrh	r3, [r3, #10]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	899b      	ldrh	r3, [r3, #12]
 8006ca6:	fb02 f303 	mul.w	r3, r2, r3
 8006caa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006cac:	e019      	b.n	8006ce2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6979      	ldr	r1, [r7, #20]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff fc9d 	bl	80065f2 <get_fat>
 8006cb8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cc0:	d101      	bne.n	8006cc6 <dir_sdi+0x90>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e03c      	b.n	8006d40 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d904      	bls.n	8006cd6 <dir_sdi+0xa0>
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d301      	bcc.n	8006cda <dir_sdi+0xa4>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	e032      	b.n	8006d40 <dir_sdi+0x10a>
			ofs -= csz;
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d2e1      	bcs.n	8006cae <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006cea:	6979      	ldr	r1, [r7, #20]
 8006cec:	6938      	ldr	r0, [r7, #16]
 8006cee:	f7ff fc61 	bl	80065b4 <clust2sect>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <dir_sdi+0xd4>
 8006d06:	2302      	movs	r3, #2
 8006d08:	e01a      	b.n	8006d40 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	69da      	ldr	r2, [r3, #28]
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	899b      	ldrh	r3, [r3, #12]
 8006d12:	4619      	mov	r1, r3
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d1a:	441a      	add	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	899b      	ldrh	r3, [r3, #12]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d32:	fb00 f202 	mul.w	r2, r0, r2
 8006d36:	1a9b      	subs	r3, r3, r2
 8006d38:	18ca      	adds	r2, r1, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	3320      	adds	r3, #32
 8006d5e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <dir_next+0x28>
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d6e:	d301      	bcc.n	8006d74 <dir_next+0x2c>
 8006d70:	2304      	movs	r3, #4
 8006d72:	e0bb      	b.n	8006eec <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	899b      	ldrh	r3, [r3, #12]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d80:	fb01 f202 	mul.w	r2, r1, r2
 8006d84:	1a9b      	subs	r3, r3, r2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f040 809d 	bne.w	8006ec6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10b      	bne.n	8006db6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	095b      	lsrs	r3, r3, #5
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	8912      	ldrh	r2, [r2, #8]
 8006da6:	4293      	cmp	r3, r2
 8006da8:	f0c0 808d 	bcc.w	8006ec6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	61da      	str	r2, [r3, #28]
 8006db2:	2304      	movs	r3, #4
 8006db4:	e09a      	b.n	8006eec <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	899b      	ldrh	r3, [r3, #12]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	8952      	ldrh	r2, [r2, #10]
 8006dc6:	3a01      	subs	r2, #1
 8006dc8:	4013      	ands	r3, r2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d17b      	bne.n	8006ec6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	f7ff fc0b 	bl	80065f2 <get_fat>
 8006ddc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d801      	bhi.n	8006de8 <dir_next+0xa0>
 8006de4:	2302      	movs	r3, #2
 8006de6:	e081      	b.n	8006eec <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dee:	d101      	bne.n	8006df4 <dir_next+0xac>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e07b      	b.n	8006eec <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	69db      	ldr	r3, [r3, #28]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d359      	bcc.n	8006eb2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d104      	bne.n	8006e0e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	61da      	str	r2, [r3, #28]
 8006e0a:	2304      	movs	r3, #4
 8006e0c:	e06e      	b.n	8006eec <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	4619      	mov	r1, r3
 8006e16:	4610      	mov	r0, r2
 8006e18:	f7ff fe3d 	bl	8006a96 <create_chain>
 8006e1c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <dir_next+0xe0>
 8006e24:	2307      	movs	r3, #7
 8006e26:	e061      	b.n	8006eec <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <dir_next+0xea>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e05c      	b.n	8006eec <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e38:	d101      	bne.n	8006e3e <dir_next+0xf6>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e056      	b.n	8006eec <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7ff fad6 	bl	80063f0 <sync_window>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <dir_next+0x106>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e04e      	b.n	8006eec <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	899b      	ldrh	r3, [r3, #12]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	f7ff f8fe 	bl	800605c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006e60:	2300      	movs	r3, #0
 8006e62:	613b      	str	r3, [r7, #16]
 8006e64:	6979      	ldr	r1, [r7, #20]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f7ff fba4 	bl	80065b4 <clust2sect>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	635a      	str	r2, [r3, #52]	@ 0x34
 8006e72:	e012      	b.n	8006e9a <dir_next+0x152>
						fs->wflag = 1;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f7ff fab8 	bl	80063f0 <sync_window>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <dir_next+0x142>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e030      	b.n	8006eec <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	613b      	str	r3, [r7, #16]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	635a      	str	r2, [r3, #52]	@ 0x34
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	895b      	ldrh	r3, [r3, #10]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d3e6      	bcc.n	8006e74 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	1ad2      	subs	r2, r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006eb8:	6979      	ldr	r1, [r7, #20]
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f7ff fb7a 	bl	80065b4 <clust2sect>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	899b      	ldrh	r3, [r3, #12]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ede:	fb00 f202 	mul.w	r2, r0, r2
 8006ee2:	1a9b      	subs	r3, r3, r2
 8006ee4:	18ca      	adds	r2, r1, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3718      	adds	r7, #24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006f04:	2100      	movs	r1, #0
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff fe95 	bl	8006c36 <dir_sdi>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d12b      	bne.n	8006f6e <dir_alloc+0x7a>
		n = 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f7ff faa9 	bl	8006478 <move_window>
 8006f26:	4603      	mov	r3, r0
 8006f28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d11d      	bne.n	8006f6c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	2be5      	cmp	r3, #229	@ 0xe5
 8006f38:	d004      	beq.n	8006f44 <dir_alloc+0x50>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d107      	bne.n	8006f54 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	3301      	adds	r3, #1
 8006f48:	613b      	str	r3, [r7, #16]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d102      	bne.n	8006f58 <dir_alloc+0x64>
 8006f52:	e00c      	b.n	8006f6e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006f54:	2300      	movs	r3, #0
 8006f56:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006f58:	2101      	movs	r1, #1
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7ff fef4 	bl	8006d48 <dir_next>
 8006f60:	4603      	mov	r3, r0
 8006f62:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0d7      	beq.n	8006f1a <dir_alloc+0x26>
 8006f6a:	e000      	b.n	8006f6e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006f6c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	d101      	bne.n	8006f78 <dir_alloc+0x84>
 8006f74:	2307      	movs	r3, #7
 8006f76:	75fb      	strb	r3, [r7, #23]
	return res;
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	331a      	adds	r3, #26
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fe ffbf 	bl	8005f14 <ld_word>
 8006f96:	4603      	mov	r3, r0
 8006f98:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d109      	bne.n	8006fb6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	3314      	adds	r3, #20
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fe ffb4 	bl	8005f14 <ld_word>
 8006fac:	4603      	mov	r3, r0
 8006fae:	041b      	lsls	r3, r3, #16
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	331a      	adds	r3, #26
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	b292      	uxth	r2, r2
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe ffd8 	bl	8005f8c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b03      	cmp	r3, #3
 8006fe2:	d109      	bne.n	8006ff8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f103 0214 	add.w	r2, r3, #20
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	0c1b      	lsrs	r3, r3, #16
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	f7fe ffca 	bl	8005f8c <st_word>
	}
}
 8006ff8:	bf00      	nop
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007000:	b590      	push	{r4, r7, lr}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	331a      	adds	r3, #26
 800700e:	4618      	mov	r0, r3
 8007010:	f7fe ff80 	bl	8005f14 <ld_word>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <cmp_lfn+0x1e>
 800701a:	2300      	movs	r3, #0
 800701c:	e059      	b.n	80070d2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007026:	1e5a      	subs	r2, r3, #1
 8007028:	4613      	mov	r3, r2
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	4413      	add	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007034:	2301      	movs	r3, #1
 8007036:	81fb      	strh	r3, [r7, #14]
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	e033      	b.n	80070a6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800703e:	4a27      	ldr	r2, [pc, #156]	@ (80070dc <cmp_lfn+0xdc>)
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	4413      	add	r3, r2
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	4413      	add	r3, r2
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe ff61 	bl	8005f14 <ld_word>
 8007052:	4603      	mov	r3, r0
 8007054:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007056:	89fb      	ldrh	r3, [r7, #14]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d01a      	beq.n	8007092 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2bfe      	cmp	r3, #254	@ 0xfe
 8007060:	d812      	bhi.n	8007088 <cmp_lfn+0x88>
 8007062:	89bb      	ldrh	r3, [r7, #12]
 8007064:	4618      	mov	r0, r3
 8007066:	f002 fa43 	bl	80094f0 <ff_wtoupper>
 800706a:	4603      	mov	r3, r0
 800706c:	461c      	mov	r4, r3
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	1c5a      	adds	r2, r3, #1
 8007072:	617a      	str	r2, [r7, #20]
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	4413      	add	r3, r2
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	4618      	mov	r0, r3
 800707e:	f002 fa37 	bl	80094f0 <ff_wtoupper>
 8007082:	4603      	mov	r3, r0
 8007084:	429c      	cmp	r4, r3
 8007086:	d001      	beq.n	800708c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007088:	2300      	movs	r3, #0
 800708a:	e022      	b.n	80070d2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800708c:	89bb      	ldrh	r3, [r7, #12]
 800708e:	81fb      	strh	r3, [r7, #14]
 8007090:	e006      	b.n	80070a0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007092:	89bb      	ldrh	r3, [r7, #12]
 8007094:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007098:	4293      	cmp	r3, r2
 800709a:	d001      	beq.n	80070a0 <cmp_lfn+0xa0>
 800709c:	2300      	movs	r3, #0
 800709e:	e018      	b.n	80070d2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	3301      	adds	r3, #1
 80070a4:	613b      	str	r3, [r7, #16]
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b0c      	cmp	r3, #12
 80070aa:	d9c8      	bls.n	800703e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <cmp_lfn+0xd0>
 80070b8:	89fb      	ldrh	r3, [r7, #14]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d008      	beq.n	80070d0 <cmp_lfn+0xd0>
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	4413      	add	r3, r2
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <cmp_lfn+0xd0>
 80070cc:	2300      	movs	r3, #0
 80070ce:	e000      	b.n	80070d2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80070d0:	2301      	movs	r3, #1
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd90      	pop	{r4, r7, pc}
 80070da:	bf00      	nop
 80070dc:	0800ae70 	.word	0x0800ae70

080070e0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	331a      	adds	r3, #26
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe ff10 	bl	8005f14 <ld_word>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <pick_lfn+0x1e>
 80070fa:	2300      	movs	r3, #0
 80070fc:	e04d      	b.n	800719a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007106:	1e5a      	subs	r2, r3, #1
 8007108:	4613      	mov	r3, r2
 800710a:	005b      	lsls	r3, r3, #1
 800710c:	4413      	add	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007114:	2301      	movs	r3, #1
 8007116:	81fb      	strh	r3, [r7, #14]
 8007118:	2300      	movs	r3, #0
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	e028      	b.n	8007170 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800711e:	4a21      	ldr	r2, [pc, #132]	@ (80071a4 <pick_lfn+0xc4>)
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	4413      	add	r3, r2
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	4413      	add	r3, r2
 800712c:	4618      	mov	r0, r3
 800712e:	f7fe fef1 	bl	8005f14 <ld_word>
 8007132:	4603      	mov	r3, r0
 8007134:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007136:	89fb      	ldrh	r3, [r7, #14]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00f      	beq.n	800715c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	2bfe      	cmp	r3, #254	@ 0xfe
 8007140:	d901      	bls.n	8007146 <pick_lfn+0x66>
 8007142:	2300      	movs	r3, #0
 8007144:	e029      	b.n	800719a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8007146:	89bb      	ldrh	r3, [r7, #12]
 8007148:	81fb      	strh	r3, [r7, #14]
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	617a      	str	r2, [r7, #20]
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	4413      	add	r3, r2
 8007156:	89fa      	ldrh	r2, [r7, #14]
 8007158:	801a      	strh	r2, [r3, #0]
 800715a:	e006      	b.n	800716a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800715c:	89bb      	ldrh	r3, [r7, #12]
 800715e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007162:	4293      	cmp	r3, r2
 8007164:	d001      	beq.n	800716a <pick_lfn+0x8a>
 8007166:	2300      	movs	r3, #0
 8007168:	e017      	b.n	800719a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	3301      	adds	r3, #1
 800716e:	613b      	str	r3, [r7, #16]
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	2b0c      	cmp	r3, #12
 8007174:	d9d3      	bls.n	800711e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2bfe      	cmp	r3, #254	@ 0xfe
 8007186:	d901      	bls.n	800718c <pick_lfn+0xac>
 8007188:	2300      	movs	r3, #0
 800718a:	e006      	b.n	800719a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	4413      	add	r3, r2
 8007194:	2200      	movs	r2, #0
 8007196:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8007198:	2301      	movs	r3, #1
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	0800ae70 	.word	0x0800ae70

080071a8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	4611      	mov	r1, r2
 80071b4:	461a      	mov	r2, r3
 80071b6:	460b      	mov	r3, r1
 80071b8:	71fb      	strb	r3, [r7, #7]
 80071ba:	4613      	mov	r3, r2
 80071bc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	330d      	adds	r3, #13
 80071c2:	79ba      	ldrb	r2, [r7, #6]
 80071c4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	330b      	adds	r3, #11
 80071ca:	220f      	movs	r2, #15
 80071cc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	330c      	adds	r3, #12
 80071d2:	2200      	movs	r2, #0
 80071d4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	331a      	adds	r3, #26
 80071da:	2100      	movs	r1, #0
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fe fed5 	bl	8005f8c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	1e5a      	subs	r2, r3, #1
 80071e6:	4613      	mov	r3, r2
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80071f2:	2300      	movs	r3, #0
 80071f4:	82fb      	strh	r3, [r7, #22]
 80071f6:	2300      	movs	r3, #0
 80071f8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80071fa:	8afb      	ldrh	r3, [r7, #22]
 80071fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007200:	4293      	cmp	r3, r2
 8007202:	d007      	beq.n	8007214 <put_lfn+0x6c>
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	61fa      	str	r2, [r7, #28]
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	4413      	add	r3, r2
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007214:	4a17      	ldr	r2, [pc, #92]	@ (8007274 <put_lfn+0xcc>)
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	4413      	add	r3, r2
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	461a      	mov	r2, r3
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	4413      	add	r3, r2
 8007222:	8afa      	ldrh	r2, [r7, #22]
 8007224:	4611      	mov	r1, r2
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe feb0 	bl	8005f8c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800722c:	8afb      	ldrh	r3, [r7, #22]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d102      	bne.n	8007238 <put_lfn+0x90>
 8007232:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007236:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	3301      	adds	r3, #1
 800723c:	61bb      	str	r3, [r7, #24]
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	2b0c      	cmp	r3, #12
 8007242:	d9da      	bls.n	80071fa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007244:	8afb      	ldrh	r3, [r7, #22]
 8007246:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800724a:	4293      	cmp	r3, r2
 800724c:	d006      	beq.n	800725c <put_lfn+0xb4>
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	4413      	add	r3, r2
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d103      	bne.n	8007264 <put_lfn+0xbc>
 800725c:	79fb      	ldrb	r3, [r7, #7]
 800725e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007262:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	79fa      	ldrb	r2, [r7, #7]
 8007268:	701a      	strb	r2, [r3, #0]
}
 800726a:	bf00      	nop
 800726c:	3720      	adds	r7, #32
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	0800ae70 	.word	0x0800ae70

08007278 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b08c      	sub	sp, #48	@ 0x30
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007286:	220b      	movs	r2, #11
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f7fe fec5 	bl	800601a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	2b05      	cmp	r3, #5
 8007294:	d92b      	bls.n	80072ee <gen_numname+0x76>
		sr = seq;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800729a:	e022      	b.n	80072e2 <gen_numname+0x6a>
			wc = *lfn++;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	1c9a      	adds	r2, r3, #2
 80072a0:	607a      	str	r2, [r7, #4]
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80072a6:	2300      	movs	r3, #0
 80072a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072aa:	e017      	b.n	80072dc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	005a      	lsls	r2, r3, #1
 80072b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	4413      	add	r3, r2
 80072b8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80072ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80072bc:	085b      	lsrs	r3, r3, #1
 80072be:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d005      	beq.n	80072d6 <gen_numname+0x5e>
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80072d0:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80072d4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80072d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d8:	3301      	adds	r3, #1
 80072da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072de:	2b0f      	cmp	r3, #15
 80072e0:	d9e4      	bls.n	80072ac <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1d8      	bne.n	800729c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80072ee:	2307      	movs	r3, #7
 80072f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	f003 030f 	and.w	r3, r3, #15
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	3330      	adds	r3, #48	@ 0x30
 80072fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8007302:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007306:	2b39      	cmp	r3, #57	@ 0x39
 8007308:	d904      	bls.n	8007314 <gen_numname+0x9c>
 800730a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800730e:	3307      	adds	r3, #7
 8007310:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8007314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007316:	1e5a      	subs	r2, r3, #1
 8007318:	62ba      	str	r2, [r7, #40]	@ 0x28
 800731a:	3330      	adds	r3, #48	@ 0x30
 800731c:	443b      	add	r3, r7
 800731e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007322:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	091b      	lsrs	r3, r3, #4
 800732a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1df      	bne.n	80072f2 <gen_numname+0x7a>
	ns[i] = '~';
 8007332:	f107 0214 	add.w	r2, r7, #20
 8007336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007338:	4413      	add	r3, r2
 800733a:	227e      	movs	r2, #126	@ 0x7e
 800733c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800733e:	2300      	movs	r3, #0
 8007340:	627b      	str	r3, [r7, #36]	@ 0x24
 8007342:	e002      	b.n	800734a <gen_numname+0xd2>
 8007344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007346:	3301      	adds	r3, #1
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24
 800734a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800734c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734e:	429a      	cmp	r2, r3
 8007350:	d205      	bcs.n	800735e <gen_numname+0xe6>
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	4413      	add	r3, r2
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b20      	cmp	r3, #32
 800735c:	d1f2      	bne.n	8007344 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800735e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007360:	2b07      	cmp	r3, #7
 8007362:	d807      	bhi.n	8007374 <gen_numname+0xfc>
 8007364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	62ba      	str	r2, [r7, #40]	@ 0x28
 800736a:	3330      	adds	r3, #48	@ 0x30
 800736c:	443b      	add	r3, r7
 800736e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007372:	e000      	b.n	8007376 <gen_numname+0xfe>
 8007374:	2120      	movs	r1, #32
 8007376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	627a      	str	r2, [r7, #36]	@ 0x24
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	4413      	add	r3, r2
 8007380:	460a      	mov	r2, r1
 8007382:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007386:	2b07      	cmp	r3, #7
 8007388:	d9e9      	bls.n	800735e <gen_numname+0xe6>
}
 800738a:	bf00      	nop
 800738c:	bf00      	nop
 800738e:	3730      	adds	r7, #48	@ 0x30
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80073a0:	230b      	movs	r3, #11
 80073a2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	0852      	lsrs	r2, r2, #1
 80073aa:	01db      	lsls	r3, r3, #7
 80073ac:	4313      	orrs	r3, r2
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	1c59      	adds	r1, r3, #1
 80073b4:	6079      	str	r1, [r7, #4]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	4413      	add	r3, r2
 80073ba:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	3b01      	subs	r3, #1
 80073c0:	60bb      	str	r3, [r7, #8]
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1ed      	bne.n	80073a4 <sum_sfn+0x10>
	return sum;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b086      	sub	sp, #24
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80073e0:	2304      	movs	r3, #4
 80073e2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80073ea:	23ff      	movs	r3, #255	@ 0xff
 80073ec:	757b      	strb	r3, [r7, #21]
 80073ee:	23ff      	movs	r3, #255	@ 0xff
 80073f0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80073f2:	e081      	b.n	80074f8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	4619      	mov	r1, r3
 80073fa:	6938      	ldr	r0, [r7, #16]
 80073fc:	f7ff f83c 	bl	8006478 <move_window>
 8007400:	4603      	mov	r3, r0
 8007402:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007404:	7dfb      	ldrb	r3, [r7, #23]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d17c      	bne.n	8007504 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8007412:	7dbb      	ldrb	r3, [r7, #22]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d102      	bne.n	800741e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007418:	2304      	movs	r3, #4
 800741a:	75fb      	strb	r3, [r7, #23]
 800741c:	e077      	b.n	800750e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	330b      	adds	r3, #11
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800742a:	73fb      	strb	r3, [r7, #15]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	7bfa      	ldrb	r2, [r7, #15]
 8007430:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8007432:	7dbb      	ldrb	r3, [r7, #22]
 8007434:	2be5      	cmp	r3, #229	@ 0xe5
 8007436:	d00e      	beq.n	8007456 <dir_read+0x80>
 8007438:	7dbb      	ldrb	r3, [r7, #22]
 800743a:	2b2e      	cmp	r3, #46	@ 0x2e
 800743c:	d00b      	beq.n	8007456 <dir_read+0x80>
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	f023 0320 	bic.w	r3, r3, #32
 8007444:	2b08      	cmp	r3, #8
 8007446:	bf0c      	ite	eq
 8007448:	2301      	moveq	r3, #1
 800744a:	2300      	movne	r3, #0
 800744c:	b2db      	uxtb	r3, r3
 800744e:	461a      	mov	r2, r3
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	4293      	cmp	r3, r2
 8007454:	d002      	beq.n	800745c <dir_read+0x86>
				ord = 0xFF;
 8007456:	23ff      	movs	r3, #255	@ 0xff
 8007458:	757b      	strb	r3, [r7, #21]
 800745a:	e044      	b.n	80074e6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	2b0f      	cmp	r3, #15
 8007460:	d12f      	bne.n	80074c2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8007462:	7dbb      	ldrb	r3, [r7, #22]
 8007464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00d      	beq.n	8007488 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	7b5b      	ldrb	r3, [r3, #13]
 8007472:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007474:	7dbb      	ldrb	r3, [r7, #22]
 8007476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800747a:	75bb      	strb	r3, [r7, #22]
 800747c:	7dbb      	ldrb	r3, [r7, #22]
 800747e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	695a      	ldr	r2, [r3, #20]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007488:	7dba      	ldrb	r2, [r7, #22]
 800748a:	7d7b      	ldrb	r3, [r7, #21]
 800748c:	429a      	cmp	r2, r3
 800748e:	d115      	bne.n	80074bc <dir_read+0xe6>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	330d      	adds	r3, #13
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	7d3a      	ldrb	r2, [r7, #20]
 800749a:	429a      	cmp	r2, r3
 800749c:	d10e      	bne.n	80074bc <dir_read+0xe6>
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	691a      	ldr	r2, [r3, #16]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	4619      	mov	r1, r3
 80074a8:	4610      	mov	r0, r2
 80074aa:	f7ff fe19 	bl	80070e0 <pick_lfn>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <dir_read+0xe6>
 80074b4:	7d7b      	ldrb	r3, [r7, #21]
 80074b6:	3b01      	subs	r3, #1
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	e000      	b.n	80074be <dir_read+0xe8>
 80074bc:	23ff      	movs	r3, #255	@ 0xff
 80074be:	757b      	strb	r3, [r7, #21]
 80074c0:	e011      	b.n	80074e6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80074c2:	7d7b      	ldrb	r3, [r7, #21]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d109      	bne.n	80074dc <dir_read+0x106>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff ff61 	bl	8007394 <sum_sfn>
 80074d2:	4603      	mov	r3, r0
 80074d4:	461a      	mov	r2, r3
 80074d6:	7d3b      	ldrb	r3, [r7, #20]
 80074d8:	4293      	cmp	r3, r2
 80074da:	d015      	beq.n	8007508 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074e2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 80074e4:	e010      	b.n	8007508 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80074e6:	2100      	movs	r1, #0
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7ff fc2d 	bl	8006d48 <dir_next>
 80074ee:	4603      	mov	r3, r0
 80074f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d109      	bne.n	800750c <dir_read+0x136>
	while (dp->sect) {
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f47f af79 	bne.w	80073f4 <dir_read+0x1e>
 8007502:	e004      	b.n	800750e <dir_read+0x138>
		if (res != FR_OK) break;
 8007504:	bf00      	nop
 8007506:	e002      	b.n	800750e <dir_read+0x138>
					break;
 8007508:	bf00      	nop
 800750a:	e000      	b.n	800750e <dir_read+0x138>
		if (res != FR_OK) break;
 800750c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800750e:	7dfb      	ldrb	r3, [r7, #23]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <dir_read+0x144>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	61da      	str	r2, [r3, #28]
	return res;
 800751a:	7dfb      	ldrb	r3, [r7, #23]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007532:	2100      	movs	r1, #0
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff fb7e 	bl	8006c36 <dir_sdi>
 800753a:	4603      	mov	r3, r0
 800753c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800753e:	7dfb      	ldrb	r3, [r7, #23]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <dir_find+0x24>
 8007544:	7dfb      	ldrb	r3, [r7, #23]
 8007546:	e0a9      	b.n	800769c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007548:	23ff      	movs	r3, #255	@ 0xff
 800754a:	753b      	strb	r3, [r7, #20]
 800754c:	7d3b      	ldrb	r3, [r7, #20]
 800754e:	757b      	strb	r3, [r7, #21]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007556:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	4619      	mov	r1, r3
 800755e:	6938      	ldr	r0, [r7, #16]
 8007560:	f7fe ff8a 	bl	8006478 <move_window>
 8007564:	4603      	mov	r3, r0
 8007566:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	2b00      	cmp	r3, #0
 800756c:	f040 8090 	bne.w	8007690 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007578:	7dbb      	ldrb	r3, [r7, #22]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d102      	bne.n	8007584 <dir_find+0x60>
 800757e:	2304      	movs	r3, #4
 8007580:	75fb      	strb	r3, [r7, #23]
 8007582:	e08a      	b.n	800769a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a1b      	ldr	r3, [r3, #32]
 8007588:	330b      	adds	r3, #11
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007590:	73fb      	strb	r3, [r7, #15]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	7bfa      	ldrb	r2, [r7, #15]
 8007596:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007598:	7dbb      	ldrb	r3, [r7, #22]
 800759a:	2be5      	cmp	r3, #229	@ 0xe5
 800759c:	d007      	beq.n	80075ae <dir_find+0x8a>
 800759e:	7bfb      	ldrb	r3, [r7, #15]
 80075a0:	f003 0308 	and.w	r3, r3, #8
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d009      	beq.n	80075bc <dir_find+0x98>
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	2b0f      	cmp	r3, #15
 80075ac:	d006      	beq.n	80075bc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80075ae:	23ff      	movs	r3, #255	@ 0xff
 80075b0:	757b      	strb	r3, [r7, #21]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80075ba:	e05e      	b.n	800767a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	2b0f      	cmp	r3, #15
 80075c0:	d136      	bne.n	8007630 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80075c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d154      	bne.n	800767a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80075d0:	7dbb      	ldrb	r3, [r7, #22]
 80075d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00d      	beq.n	80075f6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	7b5b      	ldrb	r3, [r3, #13]
 80075e0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80075e2:	7dbb      	ldrb	r3, [r7, #22]
 80075e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075e8:	75bb      	strb	r3, [r7, #22]
 80075ea:	7dbb      	ldrb	r3, [r7, #22]
 80075ec:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	695a      	ldr	r2, [r3, #20]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80075f6:	7dba      	ldrb	r2, [r7, #22]
 80075f8:	7d7b      	ldrb	r3, [r7, #21]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d115      	bne.n	800762a <dir_find+0x106>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	330d      	adds	r3, #13
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	7d3a      	ldrb	r2, [r7, #20]
 8007608:	429a      	cmp	r2, r3
 800760a:	d10e      	bne.n	800762a <dir_find+0x106>
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	691a      	ldr	r2, [r3, #16]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	4619      	mov	r1, r3
 8007616:	4610      	mov	r0, r2
 8007618:	f7ff fcf2 	bl	8007000 <cmp_lfn>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <dir_find+0x106>
 8007622:	7d7b      	ldrb	r3, [r7, #21]
 8007624:	3b01      	subs	r3, #1
 8007626:	b2db      	uxtb	r3, r3
 8007628:	e000      	b.n	800762c <dir_find+0x108>
 800762a:	23ff      	movs	r3, #255	@ 0xff
 800762c:	757b      	strb	r3, [r7, #21]
 800762e:	e024      	b.n	800767a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007630:	7d7b      	ldrb	r3, [r7, #21]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d109      	bne.n	800764a <dir_find+0x126>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff feaa 	bl	8007394 <sum_sfn>
 8007640:	4603      	mov	r3, r0
 8007642:	461a      	mov	r2, r3
 8007644:	7d3b      	ldrb	r3, [r7, #20]
 8007646:	4293      	cmp	r3, r2
 8007648:	d024      	beq.n	8007694 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <dir_find+0x14a>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a18      	ldr	r0, [r3, #32]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3324      	adds	r3, #36	@ 0x24
 8007660:	220b      	movs	r2, #11
 8007662:	4619      	mov	r1, r3
 8007664:	f7fe fd15 	bl	8006092 <mem_cmp>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d014      	beq.n	8007698 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800766e:	23ff      	movs	r3, #255	@ 0xff
 8007670:	757b      	strb	r3, [r7, #21]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007678:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800767a:	2100      	movs	r1, #0
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff fb63 	bl	8006d48 <dir_next>
 8007682:	4603      	mov	r3, r0
 8007684:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007686:	7dfb      	ldrb	r3, [r7, #23]
 8007688:	2b00      	cmp	r3, #0
 800768a:	f43f af65 	beq.w	8007558 <dir_find+0x34>
 800768e:	e004      	b.n	800769a <dir_find+0x176>
		if (res != FR_OK) break;
 8007690:	bf00      	nop
 8007692:	e002      	b.n	800769a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007694:	bf00      	nop
 8007696:	e000      	b.n	800769a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007698:	bf00      	nop

	return res;
 800769a:	7dfb      	ldrb	r3, [r7, #23]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08c      	sub	sp, #48	@ 0x30
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80076b8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <dir_register+0x20>
 80076c0:	2306      	movs	r3, #6
 80076c2:	e0e0      	b.n	8007886 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80076c4:	2300      	movs	r3, #0
 80076c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80076c8:	e002      	b.n	80076d0 <dir_register+0x2c>
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	3301      	adds	r3, #1
 80076ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	691a      	ldr	r2, [r3, #16]
 80076d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	4413      	add	r3, r2
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1f4      	bne.n	80076ca <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80076e6:	f107 030c 	add.w	r3, r7, #12
 80076ea:	220c      	movs	r2, #12
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fe fc94 	bl	800601a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80076f2:	7dfb      	ldrb	r3, [r7, #23]
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d032      	beq.n	8007762 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2240      	movs	r2, #64	@ 0x40
 8007700:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8007704:	2301      	movs	r3, #1
 8007706:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007708:	e016      	b.n	8007738 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	f107 010c 	add.w	r1, r7, #12
 8007718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771a:	f7ff fdad 	bl	8007278 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff ff00 	bl	8007524 <dir_find>
 8007724:	4603      	mov	r3, r0
 8007726:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800772a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800772e:	2b00      	cmp	r3, #0
 8007730:	d106      	bne.n	8007740 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007734:	3301      	adds	r3, #1
 8007736:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773a:	2b63      	cmp	r3, #99	@ 0x63
 800773c:	d9e5      	bls.n	800770a <dir_register+0x66>
 800773e:	e000      	b.n	8007742 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007740:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007744:	2b64      	cmp	r3, #100	@ 0x64
 8007746:	d101      	bne.n	800774c <dir_register+0xa8>
 8007748:	2307      	movs	r3, #7
 800774a:	e09c      	b.n	8007886 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800774c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007750:	2b04      	cmp	r3, #4
 8007752:	d002      	beq.n	800775a <dir_register+0xb6>
 8007754:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007758:	e095      	b.n	8007886 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800775a:	7dfa      	ldrb	r2, [r7, #23]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b00      	cmp	r3, #0
 800776a:	d007      	beq.n	800777c <dir_register+0xd8>
 800776c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776e:	330c      	adds	r3, #12
 8007770:	4a47      	ldr	r2, [pc, #284]	@ (8007890 <dir_register+0x1ec>)
 8007772:	fba2 2303 	umull	r2, r3, r2, r3
 8007776:	089b      	lsrs	r3, r3, #2
 8007778:	3301      	adds	r3, #1
 800777a:	e000      	b.n	800777e <dir_register+0xda>
 800777c:	2301      	movs	r3, #1
 800777e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007780:	6a39      	ldr	r1, [r7, #32]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7ff fbb6 	bl	8006ef4 <dir_alloc>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800778e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007792:	2b00      	cmp	r3, #0
 8007794:	d148      	bne.n	8007828 <dir_register+0x184>
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	3b01      	subs	r3, #1
 800779a:	623b      	str	r3, [r7, #32]
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d042      	beq.n	8007828 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	695a      	ldr	r2, [r3, #20]
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	015b      	lsls	r3, r3, #5
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7ff fa41 	bl	8006c36 <dir_sdi>
 80077b4:	4603      	mov	r3, r0
 80077b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80077ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d132      	bne.n	8007828 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3324      	adds	r3, #36	@ 0x24
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7ff fde4 	bl	8007394 <sum_sfn>
 80077cc:	4603      	mov	r3, r0
 80077ce:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	4619      	mov	r1, r3
 80077d6:	69f8      	ldr	r0, [r7, #28]
 80077d8:	f7fe fe4e 	bl	8006478 <move_window>
 80077dc:	4603      	mov	r3, r0
 80077de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80077e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d11d      	bne.n	8007826 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	6918      	ldr	r0, [r3, #16]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a19      	ldr	r1, [r3, #32]
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	7efb      	ldrb	r3, [r7, #27]
 80077f8:	f7ff fcd6 	bl	80071a8 <put_lfn>
				fs->wflag = 1;
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	2201      	movs	r2, #1
 8007800:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007802:	2100      	movs	r1, #0
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7ff fa9f 	bl	8006d48 <dir_next>
 800780a:	4603      	mov	r3, r0
 800780c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8007810:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007814:	2b00      	cmp	r3, #0
 8007816:	d107      	bne.n	8007828 <dir_register+0x184>
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	3b01      	subs	r3, #1
 800781c:	623b      	str	r3, [r7, #32]
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1d5      	bne.n	80077d0 <dir_register+0x12c>
 8007824:	e000      	b.n	8007828 <dir_register+0x184>
				if (res != FR_OK) break;
 8007826:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007828:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800782c:	2b00      	cmp	r3, #0
 800782e:	d128      	bne.n	8007882 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	4619      	mov	r1, r3
 8007836:	69f8      	ldr	r0, [r7, #28]
 8007838:	f7fe fe1e 	bl	8006478 <move_window>
 800783c:	4603      	mov	r3, r0
 800783e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007842:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007846:	2b00      	cmp	r3, #0
 8007848:	d11b      	bne.n	8007882 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	2220      	movs	r2, #32
 8007850:	2100      	movs	r1, #0
 8007852:	4618      	mov	r0, r3
 8007854:	f7fe fc02 	bl	800605c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a18      	ldr	r0, [r3, #32]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	3324      	adds	r3, #36	@ 0x24
 8007860:	220b      	movs	r2, #11
 8007862:	4619      	mov	r1, r3
 8007864:	f7fe fbd9 	bl	800601a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	330c      	adds	r3, #12
 8007874:	f002 0218 	and.w	r2, r2, #24
 8007878:	b2d2      	uxtb	r2, r2
 800787a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	2201      	movs	r2, #1
 8007880:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007882:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007886:	4618      	mov	r0, r3
 8007888:	3730      	adds	r7, #48	@ 0x30
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	4ec4ec4f 	.word	0x4ec4ec4f

08007894 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	2200      	movs	r2, #0
 80078a8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f000 80ca 	beq.w	8007a48 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078bc:	d032      	beq.n	8007924 <get_fileinfo+0x90>
			i = j = 0;
 80078be:	2300      	movs	r3, #0
 80078c0:	61bb      	str	r3, [r7, #24]
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80078c6:	e01b      	b.n	8007900 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80078c8:	89fb      	ldrh	r3, [r7, #14]
 80078ca:	2100      	movs	r1, #0
 80078cc:	4618      	mov	r0, r3
 80078ce:	f001 fdd3 	bl	8009478 <ff_convert>
 80078d2:	4603      	mov	r3, r0
 80078d4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80078d6:	89fb      	ldrh	r3, [r7, #14]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d102      	bne.n	80078e2 <get_fileinfo+0x4e>
 80078dc:	2300      	movs	r3, #0
 80078de:	61fb      	str	r3, [r7, #28]
 80078e0:	e01a      	b.n	8007918 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	2bfe      	cmp	r3, #254	@ 0xfe
 80078e6:	d902      	bls.n	80078ee <get_fileinfo+0x5a>
 80078e8:	2300      	movs	r3, #0
 80078ea:	61fb      	str	r3, [r7, #28]
 80078ec:	e014      	b.n	8007918 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	1c5a      	adds	r2, r3, #1
 80078f2:	61fa      	str	r2, [r7, #28]
 80078f4:	89fa      	ldrh	r2, [r7, #14]
 80078f6:	b2d1      	uxtb	r1, r2
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	4413      	add	r3, r2
 80078fc:	460a      	mov	r2, r1
 80078fe:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	691a      	ldr	r2, [r3, #16]
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	1c59      	adds	r1, r3, #1
 8007908:	61b9      	str	r1, [r7, #24]
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	4413      	add	r3, r2
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	81fb      	strh	r3, [r7, #14]
 8007912:	89fb      	ldrh	r3, [r7, #14]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1d7      	bne.n	80078c8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	4413      	add	r3, r2
 800791e:	3316      	adds	r3, #22
 8007920:	2200      	movs	r2, #0
 8007922:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	61bb      	str	r3, [r7, #24]
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	4413      	add	r3, r2
 8007932:	3316      	adds	r3, #22
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8007938:	e04d      	b.n	80079d6 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1a      	ldr	r2, [r3, #32]
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	1c59      	adds	r1, r3, #1
 8007942:	61f9      	str	r1, [r7, #28]
 8007944:	4413      	add	r3, r2
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800794a:	7dfb      	ldrb	r3, [r7, #23]
 800794c:	2b20      	cmp	r3, #32
 800794e:	d041      	beq.n	80079d4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007950:	7dfb      	ldrb	r3, [r7, #23]
 8007952:	2b05      	cmp	r3, #5
 8007954:	d101      	bne.n	800795a <get_fileinfo+0xc6>
 8007956:	23e5      	movs	r3, #229	@ 0xe5
 8007958:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	2b09      	cmp	r3, #9
 800795e:	d10f      	bne.n	8007980 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8007960:	89bb      	ldrh	r3, [r7, #12]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d105      	bne.n	8007972 <get_fileinfo+0xde>
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	4413      	add	r3, r2
 800796c:	3316      	adds	r3, #22
 800796e:	222e      	movs	r2, #46	@ 0x2e
 8007970:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	61ba      	str	r2, [r7, #24]
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	4413      	add	r3, r2
 800797c:	222e      	movs	r2, #46	@ 0x2e
 800797e:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	4413      	add	r3, r2
 8007986:	3309      	adds	r3, #9
 8007988:	7dfa      	ldrb	r2, [r7, #23]
 800798a:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800798c:	89bb      	ldrh	r3, [r7, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d11c      	bne.n	80079cc <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	2b40      	cmp	r3, #64	@ 0x40
 8007996:	d913      	bls.n	80079c0 <get_fileinfo+0x12c>
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	2b5a      	cmp	r3, #90	@ 0x5a
 800799c:	d810      	bhi.n	80079c0 <get_fileinfo+0x12c>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	330c      	adds	r3, #12
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	2b08      	cmp	r3, #8
 80079ac:	d901      	bls.n	80079b2 <get_fileinfo+0x11e>
 80079ae:	2310      	movs	r3, #16
 80079b0:	e000      	b.n	80079b4 <get_fileinfo+0x120>
 80079b2:	2308      	movs	r3, #8
 80079b4:	4013      	ands	r3, r2
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
 80079bc:	3320      	adds	r3, #32
 80079be:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	4413      	add	r3, r2
 80079c6:	3316      	adds	r3, #22
 80079c8:	7dfa      	ldrb	r2, [r7, #23]
 80079ca:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	3301      	adds	r3, #1
 80079d0:	61bb      	str	r3, [r7, #24]
 80079d2:	e000      	b.n	80079d6 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 80079d4:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	2b0a      	cmp	r3, #10
 80079da:	d9ae      	bls.n	800793a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80079dc:	89bb      	ldrh	r3, [r7, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10d      	bne.n	80079fe <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	4413      	add	r3, r2
 80079e8:	3316      	adds	r3, #22
 80079ea:	2200      	movs	r2, #0
 80079ec:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	330c      	adds	r3, #12
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <get_fileinfo+0x16a>
 80079fa:	2300      	movs	r3, #0
 80079fc:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	4413      	add	r3, r2
 8007a04:	3309      	adds	r3, #9
 8007a06:	2200      	movs	r2, #0
 8007a08:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	7ada      	ldrb	r2, [r3, #11]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a1b      	ldr	r3, [r3, #32]
 8007a18:	331c      	adds	r3, #28
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fe fa93 	bl	8005f46 <ld_dword>
 8007a20:	4602      	mov	r2, r0
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	3316      	adds	r3, #22
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fe fa8a 	bl	8005f46 <ld_dword>
 8007a32:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	80da      	strh	r2, [r3, #6]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	0c1b      	lsrs	r3, r3, #16
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	809a      	strh	r2, [r3, #4]
 8007a46:	e000      	b.n	8007a4a <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007a48:	bf00      	nop
}
 8007a4a:	3720      	adds	r7, #32
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b08a      	sub	sp, #40	@ 0x28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	613b      	str	r3, [r7, #16]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	60fb      	str	r3, [r7, #12]
 8007a68:	2300      	movs	r3, #0
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	1c5a      	adds	r2, r3, #1
 8007a74:	61ba      	str	r2, [r7, #24]
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	4413      	add	r3, r2
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007a7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a80:	2b1f      	cmp	r3, #31
 8007a82:	d940      	bls.n	8007b06 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007a84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a86:	2b2f      	cmp	r3, #47	@ 0x2f
 8007a88:	d006      	beq.n	8007a98 <create_name+0x48>
 8007a8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a8c:	2b5c      	cmp	r3, #92	@ 0x5c
 8007a8e:	d110      	bne.n	8007ab2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007a90:	e002      	b.n	8007a98 <create_name+0x48>
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	3301      	adds	r3, #1
 8007a96:	61bb      	str	r3, [r7, #24]
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b2f      	cmp	r3, #47	@ 0x2f
 8007aa2:	d0f6      	beq.n	8007a92 <create_name+0x42>
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b5c      	cmp	r3, #92	@ 0x5c
 8007aae:	d0f0      	beq.n	8007a92 <create_name+0x42>
			break;
 8007ab0:	e02a      	b.n	8007b08 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	2bfe      	cmp	r3, #254	@ 0xfe
 8007ab6:	d901      	bls.n	8007abc <create_name+0x6c>
 8007ab8:	2306      	movs	r3, #6
 8007aba:	e17d      	b.n	8007db8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007abc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007ac2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f001 fcd6 	bl	8009478 <ff_convert>
 8007acc:	4603      	mov	r3, r0
 8007ace:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007ad0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <create_name+0x8a>
 8007ad6:	2306      	movs	r3, #6
 8007ad8:	e16e      	b.n	8007db8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007ada:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007adc:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ade:	d809      	bhi.n	8007af4 <create_name+0xa4>
 8007ae0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	488d      	ldr	r0, [pc, #564]	@ (8007d1c <create_name+0x2cc>)
 8007ae6:	f7fe fafb 	bl	80060e0 <chk_chr>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <create_name+0xa4>
 8007af0:	2306      	movs	r3, #6
 8007af2:	e161      	b.n	8007db8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	617a      	str	r2, [r7, #20]
 8007afa:	005b      	lsls	r3, r3, #1
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	4413      	add	r3, r2
 8007b00:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007b02:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007b04:	e7b4      	b.n	8007a70 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007b06:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	441a      	add	r2, r3
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007b12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b14:	2b1f      	cmp	r3, #31
 8007b16:	d801      	bhi.n	8007b1c <create_name+0xcc>
 8007b18:	2304      	movs	r3, #4
 8007b1a:	e000      	b.n	8007b1e <create_name+0xce>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007b22:	e011      	b.n	8007b48 <create_name+0xf8>
		w = lfn[di - 1];
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	005b      	lsls	r3, r3, #1
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4413      	add	r3, r2
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8007b36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b38:	2b20      	cmp	r3, #32
 8007b3a:	d002      	beq.n	8007b42 <create_name+0xf2>
 8007b3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b40:	d106      	bne.n	8007b50 <create_name+0x100>
		di--;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	3b01      	subs	r3, #1
 8007b46:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1ea      	bne.n	8007b24 <create_name+0xd4>
 8007b4e:	e000      	b.n	8007b52 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007b50:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	005b      	lsls	r3, r3, #1
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	4413      	add	r3, r2
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d101      	bne.n	8007b68 <create_name+0x118>
 8007b64:	2306      	movs	r3, #6
 8007b66:	e127      	b.n	8007db8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3324      	adds	r3, #36	@ 0x24
 8007b6c:	220b      	movs	r2, #11
 8007b6e:	2120      	movs	r1, #32
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fe fa73 	bl	800605c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007b76:	2300      	movs	r3, #0
 8007b78:	61bb      	str	r3, [r7, #24]
 8007b7a:	e002      	b.n	8007b82 <create_name+0x132>
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	61bb      	str	r3, [r7, #24]
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	4413      	add	r3, r2
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	d0f5      	beq.n	8007b7c <create_name+0x12c>
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	005b      	lsls	r3, r3, #1
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	4413      	add	r3, r2
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b9c:	d0ee      	beq.n	8007b7c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d009      	beq.n	8007bb8 <create_name+0x168>
 8007ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ba8:	f043 0303 	orr.w	r3, r3, #3
 8007bac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007bb0:	e002      	b.n	8007bb8 <create_name+0x168>
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d009      	beq.n	8007bd2 <create_name+0x182>
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4413      	add	r3, r2
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bd0:	d1ef      	bne.n	8007bb2 <create_name+0x162>

	i = b = 0; ni = 8;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007bd8:	2300      	movs	r3, #0
 8007bda:	623b      	str	r3, [r7, #32]
 8007bdc:	2308      	movs	r3, #8
 8007bde:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	61ba      	str	r2, [r7, #24]
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	4413      	add	r3, r2
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007bf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 8090 	beq.w	8007d18 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007bf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bfa:	2b20      	cmp	r3, #32
 8007bfc:	d006      	beq.n	8007c0c <create_name+0x1bc>
 8007bfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c00:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c02:	d10a      	bne.n	8007c1a <create_name+0x1ca>
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d006      	beq.n	8007c1a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c10:	f043 0303 	orr.w	r3, r3, #3
 8007c14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007c18:	e07d      	b.n	8007d16 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007c1a:	6a3a      	ldr	r2, [r7, #32]
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d203      	bcs.n	8007c2a <create_name+0x1da>
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d123      	bne.n	8007c72 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	2b0b      	cmp	r3, #11
 8007c2e:	d106      	bne.n	8007c3e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007c30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c34:	f043 0303 	orr.w	r3, r3, #3
 8007c38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007c3c:	e075      	b.n	8007d2a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d005      	beq.n	8007c52 <create_name+0x202>
 8007c46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c4a:	f043 0303 	orr.w	r3, r3, #3
 8007c4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d866      	bhi.n	8007d28 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	61bb      	str	r3, [r7, #24]
 8007c5e:	2308      	movs	r3, #8
 8007c60:	623b      	str	r3, [r7, #32]
 8007c62:	230b      	movs	r3, #11
 8007c64:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007c66:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007c70:	e051      	b.n	8007d16 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007c72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c74:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c76:	d914      	bls.n	8007ca2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007c78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f001 fbfb 	bl	8009478 <ff_convert>
 8007c82:	4603      	mov	r3, r0
 8007c84:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007c86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d004      	beq.n	8007c96 <create_name+0x246>
 8007c8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c8e:	3b80      	subs	r3, #128	@ 0x80
 8007c90:	4a23      	ldr	r2, [pc, #140]	@ (8007d20 <create_name+0x2d0>)
 8007c92:	5cd3      	ldrb	r3, [r2, r3]
 8007c94:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007c96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c9a:	f043 0302 	orr.w	r3, r3, #2
 8007c9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007ca2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d007      	beq.n	8007cb8 <create_name+0x268>
 8007ca8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007caa:	4619      	mov	r1, r3
 8007cac:	481d      	ldr	r0, [pc, #116]	@ (8007d24 <create_name+0x2d4>)
 8007cae:	f7fe fa17 	bl	80060e0 <chk_chr>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d008      	beq.n	8007cca <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007cb8:	235f      	movs	r3, #95	@ 0x5f
 8007cba:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cc0:	f043 0303 	orr.w	r3, r3, #3
 8007cc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007cc8:	e01b      	b.n	8007d02 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007cca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ccc:	2b40      	cmp	r3, #64	@ 0x40
 8007cce:	d909      	bls.n	8007ce4 <create_name+0x294>
 8007cd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007cd2:	2b5a      	cmp	r3, #90	@ 0x5a
 8007cd4:	d806      	bhi.n	8007ce4 <create_name+0x294>
					b |= 2;
 8007cd6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007cda:	f043 0302 	orr.w	r3, r3, #2
 8007cde:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007ce2:	e00e      	b.n	8007d02 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007ce4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ce6:	2b60      	cmp	r3, #96	@ 0x60
 8007ce8:	d90b      	bls.n	8007d02 <create_name+0x2b2>
 8007cea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007cec:	2b7a      	cmp	r3, #122	@ 0x7a
 8007cee:	d808      	bhi.n	8007d02 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007cf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007cf4:	f043 0301 	orr.w	r3, r3, #1
 8007cf8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007cfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007cfe:	3b20      	subs	r3, #32
 8007d00:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	623a      	str	r2, [r7, #32]
 8007d08:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007d0a:	b2d1      	uxtb	r1, r2
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	4413      	add	r3, r2
 8007d10:	460a      	mov	r2, r1
 8007d12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007d16:	e763      	b.n	8007be0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007d18:	bf00      	nop
 8007d1a:	e006      	b.n	8007d2a <create_name+0x2da>
 8007d1c:	0800ad7c 	.word	0x0800ad7c
 8007d20:	0800adf0 	.word	0x0800adf0
 8007d24:	0800ad88 	.word	0x0800ad88
			if (si > di) break;			/* No extension */
 8007d28:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007d30:	2be5      	cmp	r3, #229	@ 0xe5
 8007d32:	d103      	bne.n	8007d3c <create_name+0x2ec>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2205      	movs	r2, #5
 8007d38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	2b08      	cmp	r3, #8
 8007d40:	d104      	bne.n	8007d4c <create_name+0x2fc>
 8007d42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007d4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d50:	f003 030c 	and.w	r3, r3, #12
 8007d54:	2b0c      	cmp	r3, #12
 8007d56:	d005      	beq.n	8007d64 <create_name+0x314>
 8007d58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d5c:	f003 0303 	and.w	r3, r3, #3
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d105      	bne.n	8007d70 <create_name+0x320>
 8007d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d68:	f043 0302 	orr.w	r3, r3, #2
 8007d6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007d70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d74:	f003 0302 	and.w	r3, r3, #2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d117      	bne.n	8007dac <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007d7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d80:	f003 0303 	and.w	r3, r3, #3
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d105      	bne.n	8007d94 <create_name+0x344>
 8007d88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d8c:	f043 0310 	orr.w	r3, r3, #16
 8007d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007d94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d98:	f003 030c 	and.w	r3, r3, #12
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	d105      	bne.n	8007dac <create_name+0x35c>
 8007da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007da4:	f043 0308 	orr.w	r3, r3, #8
 8007da8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007db2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007db6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3728      	adds	r7, #40	@ 0x28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007dd4:	e002      	b.n	8007ddc <follow_path+0x1c>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	2b2f      	cmp	r3, #47	@ 0x2f
 8007de2:	d0f8      	beq.n	8007dd6 <follow_path+0x16>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b5c      	cmp	r3, #92	@ 0x5c
 8007dea:	d0f4      	beq.n	8007dd6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	2200      	movs	r2, #0
 8007df0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	2b1f      	cmp	r3, #31
 8007df8:	d80a      	bhi.n	8007e10 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2280      	movs	r2, #128	@ 0x80
 8007dfe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007e02:	2100      	movs	r1, #0
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7fe ff16 	bl	8006c36 <dir_sdi>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	75fb      	strb	r3, [r7, #23]
 8007e0e:	e048      	b.n	8007ea2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e10:	463b      	mov	r3, r7
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7ff fe1b 	bl	8007a50 <create_name>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007e1e:	7dfb      	ldrb	r3, [r7, #23]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d139      	bne.n	8007e98 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7ff fb7d 	bl	8007524 <dir_find>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007e34:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00a      	beq.n	8007e52 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007e3c:	7dfb      	ldrb	r3, [r7, #23]
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d12c      	bne.n	8007e9c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007e42:	7afb      	ldrb	r3, [r7, #11]
 8007e44:	f003 0304 	and.w	r3, r3, #4
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d127      	bne.n	8007e9c <follow_path+0xdc>
 8007e4c:	2305      	movs	r3, #5
 8007e4e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007e50:	e024      	b.n	8007e9c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e52:	7afb      	ldrb	r3, [r7, #11]
 8007e54:	f003 0304 	and.w	r3, r3, #4
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d121      	bne.n	8007ea0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	799b      	ldrb	r3, [r3, #6]
 8007e60:	f003 0310 	and.w	r3, r3, #16
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d102      	bne.n	8007e6e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007e68:	2305      	movs	r3, #5
 8007e6a:	75fb      	strb	r3, [r7, #23]
 8007e6c:	e019      	b.n	8007ea2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	8992      	ldrh	r2, [r2, #12]
 8007e7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e80:	fb00 f202 	mul.w	r2, r0, r2
 8007e84:	1a9b      	subs	r3, r3, r2
 8007e86:	440b      	add	r3, r1
 8007e88:	4619      	mov	r1, r3
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f7ff f879 	bl	8006f82 <ld_clust>
 8007e90:	4602      	mov	r2, r0
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e96:	e7bb      	b.n	8007e10 <follow_path+0x50>
			if (res != FR_OK) break;
 8007e98:	bf00      	nop
 8007e9a:	e002      	b.n	8007ea2 <follow_path+0xe2>
				break;
 8007e9c:	bf00      	nop
 8007e9e:	e000      	b.n	8007ea2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007ea0:	bf00      	nop
			}
		}
	}

	return res;
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007eb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007eb8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d031      	beq.n	8007f26 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	617b      	str	r3, [r7, #20]
 8007ec8:	e002      	b.n	8007ed0 <get_ldnumber+0x24>
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	617b      	str	r3, [r7, #20]
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b1f      	cmp	r3, #31
 8007ed6:	d903      	bls.n	8007ee0 <get_ldnumber+0x34>
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b3a      	cmp	r3, #58	@ 0x3a
 8007ede:	d1f4      	bne.n	8007eca <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	2b3a      	cmp	r3, #58	@ 0x3a
 8007ee6:	d11c      	bne.n	8007f22 <get_ldnumber+0x76>
			tp = *path;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	1c5a      	adds	r2, r3, #1
 8007ef2:	60fa      	str	r2, [r7, #12]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	3b30      	subs	r3, #48	@ 0x30
 8007ef8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2b09      	cmp	r3, #9
 8007efe:	d80e      	bhi.n	8007f1e <get_ldnumber+0x72>
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d10a      	bne.n	8007f1e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d107      	bne.n	8007f1e <get_ldnumber+0x72>
					vol = (int)i;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	3301      	adds	r3, #1
 8007f16:	617b      	str	r3, [r7, #20]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	e002      	b.n	8007f28 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007f22:	2300      	movs	r3, #0
 8007f24:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007f26:	693b      	ldr	r3, [r7, #16]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	371c      	adds	r7, #28
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	70da      	strb	r2, [r3, #3]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f4a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7fe fa92 	bl	8006478 <move_window>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <check_fs+0x2a>
 8007f5a:	2304      	movs	r3, #4
 8007f5c:	e038      	b.n	8007fd0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3338      	adds	r3, #56	@ 0x38
 8007f62:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fd ffd4 	bl	8005f14 <ld_word>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d001      	beq.n	8007f7c <check_fs+0x48>
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e029      	b.n	8007fd0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007f82:	2be9      	cmp	r3, #233	@ 0xe9
 8007f84:	d009      	beq.n	8007f9a <check_fs+0x66>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007f8c:	2beb      	cmp	r3, #235	@ 0xeb
 8007f8e:	d11e      	bne.n	8007fce <check_fs+0x9a>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007f96:	2b90      	cmp	r3, #144	@ 0x90
 8007f98:	d119      	bne.n	8007fce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	3338      	adds	r3, #56	@ 0x38
 8007f9e:	3336      	adds	r3, #54	@ 0x36
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fd ffd0 	bl	8005f46 <ld_dword>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007fac:	4a0a      	ldr	r2, [pc, #40]	@ (8007fd8 <check_fs+0xa4>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d101      	bne.n	8007fb6 <check_fs+0x82>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	e00c      	b.n	8007fd0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3338      	adds	r3, #56	@ 0x38
 8007fba:	3352      	adds	r3, #82	@ 0x52
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fd ffc2 	bl	8005f46 <ld_dword>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	4a05      	ldr	r2, [pc, #20]	@ (8007fdc <check_fs+0xa8>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d101      	bne.n	8007fce <check_fs+0x9a>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	e000      	b.n	8007fd0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007fce:	2302      	movs	r3, #2
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	00544146 	.word	0x00544146
 8007fdc:	33544146 	.word	0x33544146

08007fe0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b096      	sub	sp, #88	@ 0x58
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	4613      	mov	r3, r2
 8007fec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f7ff ff59 	bl	8007eac <get_ldnumber>
 8007ffa:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	da01      	bge.n	8008006 <find_volume+0x26>
 8008002:	230b      	movs	r3, #11
 8008004:	e265      	b.n	80084d2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008006:	4a9f      	ldr	r2, [pc, #636]	@ (8008284 <find_volume+0x2a4>)
 8008008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800800a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800800e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <find_volume+0x3a>
 8008016:	230c      	movs	r3, #12
 8008018:	e25b      	b.n	80084d2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800801e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008020:	79fb      	ldrb	r3, [r7, #7]
 8008022:	f023 0301 	bic.w	r3, r3, #1
 8008026:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01a      	beq.n	8008066 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008032:	785b      	ldrb	r3, [r3, #1]
 8008034:	4618      	mov	r0, r3
 8008036:	f7fd fecd 	bl	8005dd4 <disk_status>
 800803a:	4603      	mov	r3, r0
 800803c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008040:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10c      	bne.n	8008066 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800804c:	79fb      	ldrb	r3, [r7, #7]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d007      	beq.n	8008062 <find_volume+0x82>
 8008052:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008056:	f003 0304 	and.w	r3, r3, #4
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800805e:	230a      	movs	r3, #10
 8008060:	e237      	b.n	80084d2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8008062:	2300      	movs	r3, #0
 8008064:	e235      	b.n	80084d2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008068:	2200      	movs	r2, #0
 800806a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800806c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800806e:	b2da      	uxtb	r2, r3
 8008070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008072:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008076:	785b      	ldrb	r3, [r3, #1]
 8008078:	4618      	mov	r0, r3
 800807a:	f7fd fec5 	bl	8005e08 <disk_initialize>
 800807e:	4603      	mov	r3, r0
 8008080:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008084:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008090:	2303      	movs	r3, #3
 8008092:	e21e      	b.n	80084d2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008094:	79fb      	ldrb	r3, [r7, #7]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d007      	beq.n	80080aa <find_volume+0xca>
 800809a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800809e:	f003 0304 	and.w	r3, r3, #4
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80080a6:	230a      	movs	r3, #10
 80080a8:	e213      	b.n	80084d2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80080aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ac:	7858      	ldrb	r0, [r3, #1]
 80080ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b0:	330c      	adds	r3, #12
 80080b2:	461a      	mov	r2, r3
 80080b4:	2102      	movs	r1, #2
 80080b6:	f7fd ff0f 	bl	8005ed8 <disk_ioctl>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <find_volume+0xe4>
 80080c0:	2301      	movs	r3, #1
 80080c2:	e206      	b.n	80084d2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80080c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c6:	899b      	ldrh	r3, [r3, #12]
 80080c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080cc:	d80d      	bhi.n	80080ea <find_volume+0x10a>
 80080ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d0:	899b      	ldrh	r3, [r3, #12]
 80080d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080d6:	d308      	bcc.n	80080ea <find_volume+0x10a>
 80080d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080da:	899b      	ldrh	r3, [r3, #12]
 80080dc:	461a      	mov	r2, r3
 80080de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e0:	899b      	ldrh	r3, [r3, #12]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	4013      	ands	r3, r2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <find_volume+0x10e>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e1f1      	b.n	80084d2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80080ee:	2300      	movs	r3, #0
 80080f0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80080f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80080f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80080f6:	f7ff ff1d 	bl	8007f34 <check_fs>
 80080fa:	4603      	mov	r3, r0
 80080fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008100:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008104:	2b02      	cmp	r3, #2
 8008106:	d149      	bne.n	800819c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008108:	2300      	movs	r3, #0
 800810a:	643b      	str	r3, [r7, #64]	@ 0x40
 800810c:	e01e      	b.n	800814c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800810e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008110:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008116:	011b      	lsls	r3, r3, #4
 8008118:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800811c:	4413      	add	r3, r2
 800811e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008122:	3304      	adds	r3, #4
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d006      	beq.n	8008138 <find_volume+0x158>
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	3308      	adds	r3, #8
 800812e:	4618      	mov	r0, r3
 8008130:	f7fd ff09 	bl	8005f46 <ld_dword>
 8008134:	4602      	mov	r2, r0
 8008136:	e000      	b.n	800813a <find_volume+0x15a>
 8008138:	2200      	movs	r2, #0
 800813a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	3358      	adds	r3, #88	@ 0x58
 8008140:	443b      	add	r3, r7
 8008142:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008148:	3301      	adds	r3, #1
 800814a:	643b      	str	r3, [r7, #64]	@ 0x40
 800814c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800814e:	2b03      	cmp	r3, #3
 8008150:	d9dd      	bls.n	800810e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008152:	2300      	movs	r3, #0
 8008154:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <find_volume+0x182>
 800815c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800815e:	3b01      	subs	r3, #1
 8008160:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	3358      	adds	r3, #88	@ 0x58
 8008168:	443b      	add	r3, r7
 800816a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800816e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008172:	2b00      	cmp	r3, #0
 8008174:	d005      	beq.n	8008182 <find_volume+0x1a2>
 8008176:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008178:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800817a:	f7ff fedb 	bl	8007f34 <check_fs>
 800817e:	4603      	mov	r3, r0
 8008180:	e000      	b.n	8008184 <find_volume+0x1a4>
 8008182:	2303      	movs	r3, #3
 8008184:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008188:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800818c:	2b01      	cmp	r3, #1
 800818e:	d905      	bls.n	800819c <find_volume+0x1bc>
 8008190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008192:	3301      	adds	r3, #1
 8008194:	643b      	str	r3, [r7, #64]	@ 0x40
 8008196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008198:	2b03      	cmp	r3, #3
 800819a:	d9e2      	bls.n	8008162 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800819c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d101      	bne.n	80081a8 <find_volume+0x1c8>
 80081a4:	2301      	movs	r3, #1
 80081a6:	e194      	b.n	80084d2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80081a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d901      	bls.n	80081b4 <find_volume+0x1d4>
 80081b0:	230d      	movs	r3, #13
 80081b2:	e18e      	b.n	80084d2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80081b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b6:	3338      	adds	r3, #56	@ 0x38
 80081b8:	330b      	adds	r3, #11
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fd feaa 	bl	8005f14 <ld_word>
 80081c0:	4603      	mov	r3, r0
 80081c2:	461a      	mov	r2, r3
 80081c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c6:	899b      	ldrh	r3, [r3, #12]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d001      	beq.n	80081d0 <find_volume+0x1f0>
 80081cc:	230d      	movs	r3, #13
 80081ce:	e180      	b.n	80084d2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80081d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d2:	3338      	adds	r3, #56	@ 0x38
 80081d4:	3316      	adds	r3, #22
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fd fe9c 	bl	8005f14 <ld_word>
 80081dc:	4603      	mov	r3, r0
 80081de:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80081e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d106      	bne.n	80081f4 <find_volume+0x214>
 80081e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e8:	3338      	adds	r3, #56	@ 0x38
 80081ea:	3324      	adds	r3, #36	@ 0x24
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fd feaa 	bl	8005f46 <ld_dword>
 80081f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80081f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80081f8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80081fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fc:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8008200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008202:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008206:	789b      	ldrb	r3, [r3, #2]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d005      	beq.n	8008218 <find_volume+0x238>
 800820c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820e:	789b      	ldrb	r3, [r3, #2]
 8008210:	2b02      	cmp	r3, #2
 8008212:	d001      	beq.n	8008218 <find_volume+0x238>
 8008214:	230d      	movs	r3, #13
 8008216:	e15c      	b.n	80084d2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821a:	789b      	ldrb	r3, [r3, #2]
 800821c:	461a      	mov	r2, r3
 800821e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008220:	fb02 f303 	mul.w	r3, r2, r3
 8008224:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008228:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800822c:	461a      	mov	r2, r3
 800822e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008230:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008234:	895b      	ldrh	r3, [r3, #10]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d008      	beq.n	800824c <find_volume+0x26c>
 800823a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800823c:	895b      	ldrh	r3, [r3, #10]
 800823e:	461a      	mov	r2, r3
 8008240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008242:	895b      	ldrh	r3, [r3, #10]
 8008244:	3b01      	subs	r3, #1
 8008246:	4013      	ands	r3, r2
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <find_volume+0x270>
 800824c:	230d      	movs	r3, #13
 800824e:	e140      	b.n	80084d2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008252:	3338      	adds	r3, #56	@ 0x38
 8008254:	3311      	adds	r3, #17
 8008256:	4618      	mov	r0, r3
 8008258:	f7fd fe5c 	bl	8005f14 <ld_word>
 800825c:	4603      	mov	r3, r0
 800825e:	461a      	mov	r2, r3
 8008260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008262:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008266:	891b      	ldrh	r3, [r3, #8]
 8008268:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800826a:	8992      	ldrh	r2, [r2, #12]
 800826c:	0952      	lsrs	r2, r2, #5
 800826e:	b292      	uxth	r2, r2
 8008270:	fbb3 f1f2 	udiv	r1, r3, r2
 8008274:	fb01 f202 	mul.w	r2, r1, r2
 8008278:	1a9b      	subs	r3, r3, r2
 800827a:	b29b      	uxth	r3, r3
 800827c:	2b00      	cmp	r3, #0
 800827e:	d003      	beq.n	8008288 <find_volume+0x2a8>
 8008280:	230d      	movs	r3, #13
 8008282:	e126      	b.n	80084d2 <find_volume+0x4f2>
 8008284:	200016a0 	.word	0x200016a0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828a:	3338      	adds	r3, #56	@ 0x38
 800828c:	3313      	adds	r3, #19
 800828e:	4618      	mov	r0, r3
 8008290:	f7fd fe40 	bl	8005f14 <ld_word>
 8008294:	4603      	mov	r3, r0
 8008296:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008298:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800829a:	2b00      	cmp	r3, #0
 800829c:	d106      	bne.n	80082ac <find_volume+0x2cc>
 800829e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a0:	3338      	adds	r3, #56	@ 0x38
 80082a2:	3320      	adds	r3, #32
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fd fe4e 	bl	8005f46 <ld_dword>
 80082aa:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80082ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ae:	3338      	adds	r3, #56	@ 0x38
 80082b0:	330e      	adds	r3, #14
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fd fe2e 	bl	8005f14 <ld_word>
 80082b8:	4603      	mov	r3, r0
 80082ba:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80082bc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d101      	bne.n	80082c6 <find_volume+0x2e6>
 80082c2:	230d      	movs	r3, #13
 80082c4:	e105      	b.n	80084d2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80082c6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80082c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082ca:	4413      	add	r3, r2
 80082cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082ce:	8911      	ldrh	r1, [r2, #8]
 80082d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082d2:	8992      	ldrh	r2, [r2, #12]
 80082d4:	0952      	lsrs	r2, r2, #5
 80082d6:	b292      	uxth	r2, r2
 80082d8:	fbb1 f2f2 	udiv	r2, r1, r2
 80082dc:	b292      	uxth	r2, r2
 80082de:	4413      	add	r3, r2
 80082e0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80082e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d201      	bcs.n	80082ee <find_volume+0x30e>
 80082ea:	230d      	movs	r3, #13
 80082ec:	e0f1      	b.n	80084d2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80082ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082f6:	8952      	ldrh	r2, [r2, #10]
 80082f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80082fc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80082fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <find_volume+0x328>
 8008304:	230d      	movs	r3, #13
 8008306:	e0e4      	b.n	80084d2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8008308:	2303      	movs	r3, #3
 800830a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800830e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008310:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008314:	4293      	cmp	r3, r2
 8008316:	d802      	bhi.n	800831e <find_volume+0x33e>
 8008318:	2302      	movs	r3, #2
 800831a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800831e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008320:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008324:	4293      	cmp	r3, r2
 8008326:	d802      	bhi.n	800832e <find_volume+0x34e>
 8008328:	2301      	movs	r3, #1
 800832a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800832e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008330:	1c9a      	adds	r2, r3, #2
 8008332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008334:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008338:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800833a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800833c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800833e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008340:	441a      	add	r2, r3
 8008342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008344:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008346:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834a:	441a      	add	r2, r3
 800834c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8008350:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008354:	2b03      	cmp	r3, #3
 8008356:	d11e      	bne.n	8008396 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835a:	3338      	adds	r3, #56	@ 0x38
 800835c:	332a      	adds	r3, #42	@ 0x2a
 800835e:	4618      	mov	r0, r3
 8008360:	f7fd fdd8 	bl	8005f14 <ld_word>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d001      	beq.n	800836e <find_volume+0x38e>
 800836a:	230d      	movs	r3, #13
 800836c:	e0b1      	b.n	80084d2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800836e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008370:	891b      	ldrh	r3, [r3, #8]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <find_volume+0x39a>
 8008376:	230d      	movs	r3, #13
 8008378:	e0ab      	b.n	80084d2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800837a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800837c:	3338      	adds	r3, #56	@ 0x38
 800837e:	332c      	adds	r3, #44	@ 0x2c
 8008380:	4618      	mov	r0, r3
 8008382:	f7fd fde0 	bl	8005f46 <ld_dword>
 8008386:	4602      	mov	r2, r0
 8008388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800838a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800838c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800838e:	69db      	ldr	r3, [r3, #28]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	647b      	str	r3, [r7, #68]	@ 0x44
 8008394:	e01f      	b.n	80083d6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008398:	891b      	ldrh	r3, [r3, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <find_volume+0x3c2>
 800839e:	230d      	movs	r3, #13
 80083a0:	e097      	b.n	80084d2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80083a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083a8:	441a      	add	r2, r3
 80083aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ac:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80083ae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d103      	bne.n	80083be <find_volume+0x3de>
 80083b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b8:	69db      	ldr	r3, [r3, #28]
 80083ba:	005b      	lsls	r3, r3, #1
 80083bc:	e00a      	b.n	80083d4 <find_volume+0x3f4>
 80083be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c0:	69da      	ldr	r2, [r3, #28]
 80083c2:	4613      	mov	r3, r2
 80083c4:	005b      	lsls	r3, r3, #1
 80083c6:	4413      	add	r3, r2
 80083c8:	085a      	lsrs	r2, r3, #1
 80083ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083cc:	69db      	ldr	r3, [r3, #28]
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80083d4:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80083d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d8:	6a1a      	ldr	r2, [r3, #32]
 80083da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083dc:	899b      	ldrh	r3, [r3, #12]
 80083de:	4619      	mov	r1, r3
 80083e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083e2:	440b      	add	r3, r1
 80083e4:	3b01      	subs	r3, #1
 80083e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80083e8:	8989      	ldrh	r1, [r1, #12]
 80083ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d201      	bcs.n	80083f6 <find_volume+0x416>
 80083f2:	230d      	movs	r3, #13
 80083f4:	e06d      	b.n	80084d2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80083f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083fc:	619a      	str	r2, [r3, #24]
 80083fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008400:	699a      	ldr	r2, [r3, #24]
 8008402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008404:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008408:	2280      	movs	r2, #128	@ 0x80
 800840a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800840c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008410:	2b03      	cmp	r3, #3
 8008412:	d149      	bne.n	80084a8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008416:	3338      	adds	r3, #56	@ 0x38
 8008418:	3330      	adds	r3, #48	@ 0x30
 800841a:	4618      	mov	r0, r3
 800841c:	f7fd fd7a 	bl	8005f14 <ld_word>
 8008420:	4603      	mov	r3, r0
 8008422:	2b01      	cmp	r3, #1
 8008424:	d140      	bne.n	80084a8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008428:	3301      	adds	r3, #1
 800842a:	4619      	mov	r1, r3
 800842c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800842e:	f7fe f823 	bl	8006478 <move_window>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d137      	bne.n	80084a8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800843a:	2200      	movs	r2, #0
 800843c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800843e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008440:	3338      	adds	r3, #56	@ 0x38
 8008442:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008446:	4618      	mov	r0, r3
 8008448:	f7fd fd64 	bl	8005f14 <ld_word>
 800844c:	4603      	mov	r3, r0
 800844e:	461a      	mov	r2, r3
 8008450:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008454:	429a      	cmp	r2, r3
 8008456:	d127      	bne.n	80084a8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845a:	3338      	adds	r3, #56	@ 0x38
 800845c:	4618      	mov	r0, r3
 800845e:	f7fd fd72 	bl	8005f46 <ld_dword>
 8008462:	4603      	mov	r3, r0
 8008464:	4a1d      	ldr	r2, [pc, #116]	@ (80084dc <find_volume+0x4fc>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d11e      	bne.n	80084a8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800846a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800846c:	3338      	adds	r3, #56	@ 0x38
 800846e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008472:	4618      	mov	r0, r3
 8008474:	f7fd fd67 	bl	8005f46 <ld_dword>
 8008478:	4603      	mov	r3, r0
 800847a:	4a19      	ldr	r2, [pc, #100]	@ (80084e0 <find_volume+0x500>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d113      	bne.n	80084a8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008482:	3338      	adds	r3, #56	@ 0x38
 8008484:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008488:	4618      	mov	r0, r3
 800848a:	f7fd fd5c 	bl	8005f46 <ld_dword>
 800848e:	4602      	mov	r2, r0
 8008490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008492:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008496:	3338      	adds	r3, #56	@ 0x38
 8008498:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800849c:	4618      	mov	r0, r3
 800849e:	f7fd fd52 	bl	8005f46 <ld_dword>
 80084a2:	4602      	mov	r2, r0
 80084a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80084a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084aa:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80084ae:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80084b0:	4b0c      	ldr	r3, [pc, #48]	@ (80084e4 <find_volume+0x504>)
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	3301      	adds	r3, #1
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	4b0a      	ldr	r3, [pc, #40]	@ (80084e4 <find_volume+0x504>)
 80084ba:	801a      	strh	r2, [r3, #0]
 80084bc:	4b09      	ldr	r3, [pc, #36]	@ (80084e4 <find_volume+0x504>)
 80084be:	881a      	ldrh	r2, [r3, #0]
 80084c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80084c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c6:	4a08      	ldr	r2, [pc, #32]	@ (80084e8 <find_volume+0x508>)
 80084c8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80084ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80084cc:	f7fd ff6c 	bl	80063a8 <clear_lock>
#endif
	return FR_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3758      	adds	r7, #88	@ 0x58
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	41615252 	.word	0x41615252
 80084e0:	61417272 	.word	0x61417272
 80084e4:	200016a4 	.word	0x200016a4
 80084e8:	200016c8 	.word	0x200016c8

080084ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80084f6:	2309      	movs	r3, #9
 80084f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01c      	beq.n	800853a <validate+0x4e>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d018      	beq.n	800853a <validate+0x4e>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d013      	beq.n	800853a <validate+0x4e>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	889a      	ldrh	r2, [r3, #4]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	88db      	ldrh	r3, [r3, #6]
 800851c:	429a      	cmp	r2, r3
 800851e:	d10c      	bne.n	800853a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	785b      	ldrb	r3, [r3, #1]
 8008526:	4618      	mov	r0, r3
 8008528:	f7fd fc54 	bl	8005dd4 <disk_status>
 800852c:	4603      	mov	r3, r0
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <validate+0x4e>
			res = FR_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800853a:	7bfb      	ldrb	r3, [r7, #15]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d102      	bne.n	8008546 <validate+0x5a>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	e000      	b.n	8008548 <validate+0x5c>
 8008546:	2300      	movs	r3, #0
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	6013      	str	r3, [r2, #0]
	return res;
 800854c:	7bfb      	ldrb	r3, [r7, #15]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
	...

08008558 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b088      	sub	sp, #32
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800856a:	f107 0310 	add.w	r3, r7, #16
 800856e:	4618      	mov	r0, r3
 8008570:	f7ff fc9c 	bl	8007eac <get_ldnumber>
 8008574:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	2b00      	cmp	r3, #0
 800857a:	da01      	bge.n	8008580 <f_mount+0x28>
 800857c:	230b      	movs	r3, #11
 800857e:	e02b      	b.n	80085d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008580:	4a17      	ldr	r2, [pc, #92]	@ (80085e0 <f_mount+0x88>)
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008588:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d005      	beq.n	800859c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008590:	69b8      	ldr	r0, [r7, #24]
 8008592:	f7fd ff09 	bl	80063a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	2200      	movs	r2, #0
 800859a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	490d      	ldr	r1, [pc, #52]	@ (80085e0 <f_mount+0x88>)
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <f_mount+0x66>
 80085b8:	79fb      	ldrb	r3, [r7, #7]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d001      	beq.n	80085c2 <f_mount+0x6a>
 80085be:	2300      	movs	r3, #0
 80085c0:	e00a      	b.n	80085d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80085c2:	f107 010c 	add.w	r1, r7, #12
 80085c6:	f107 0308 	add.w	r3, r7, #8
 80085ca:	2200      	movs	r2, #0
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7ff fd07 	bl	8007fe0 <find_volume>
 80085d2:	4603      	mov	r3, r0
 80085d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80085d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3720      	adds	r7, #32
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	200016a0 	.word	0x200016a0

080085e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b09a      	sub	sp, #104	@ 0x68
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	4613      	mov	r3, r2
 80085f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d101      	bne.n	80085fc <f_open+0x18>
 80085f8:	2309      	movs	r3, #9
 80085fa:	e1b7      	b.n	800896c <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008602:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008604:	79fa      	ldrb	r2, [r7, #7]
 8008606:	f107 0114 	add.w	r1, r7, #20
 800860a:	f107 0308 	add.w	r3, r7, #8
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff fce6 	bl	8007fe0 <find_volume>
 8008614:	4603      	mov	r3, r0
 8008616:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800861a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800861e:	2b00      	cmp	r3, #0
 8008620:	f040 819b 	bne.w	800895a <f_open+0x376>
		dj.obj.fs = fs;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	f107 0318 	add.w	r3, r7, #24
 800862e:	4611      	mov	r1, r2
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff fbc5 	bl	8007dc0 <follow_path>
 8008636:	4603      	mov	r3, r0
 8008638:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800863c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008640:	2b00      	cmp	r3, #0
 8008642:	d118      	bne.n	8008676 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008644:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008648:	b25b      	sxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	da03      	bge.n	8008656 <f_open+0x72>
				res = FR_INVALID_NAME;
 800864e:	2306      	movs	r3, #6
 8008650:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008654:	e00f      	b.n	8008676 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	2b01      	cmp	r3, #1
 800865a:	bf8c      	ite	hi
 800865c:	2301      	movhi	r3, #1
 800865e:	2300      	movls	r3, #0
 8008660:	b2db      	uxtb	r3, r3
 8008662:	461a      	mov	r2, r3
 8008664:	f107 0318 	add.w	r3, r7, #24
 8008668:	4611      	mov	r1, r2
 800866a:	4618      	mov	r0, r3
 800866c:	f7fd fd54 	bl	8006118 <chk_lock>
 8008670:	4603      	mov	r3, r0
 8008672:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	f003 031c 	and.w	r3, r3, #28
 800867c:	2b00      	cmp	r3, #0
 800867e:	d07f      	beq.n	8008780 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008680:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008684:	2b00      	cmp	r3, #0
 8008686:	d017      	beq.n	80086b8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008688:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800868c:	2b04      	cmp	r3, #4
 800868e:	d10e      	bne.n	80086ae <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008690:	f7fd fd9e 	bl	80061d0 <enq_lock>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d006      	beq.n	80086a8 <f_open+0xc4>
 800869a:	f107 0318 	add.w	r3, r7, #24
 800869e:	4618      	mov	r0, r3
 80086a0:	f7ff f800 	bl	80076a4 <dir_register>
 80086a4:	4603      	mov	r3, r0
 80086a6:	e000      	b.n	80086aa <f_open+0xc6>
 80086a8:	2312      	movs	r3, #18
 80086aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	f043 0308 	orr.w	r3, r3, #8
 80086b4:	71fb      	strb	r3, [r7, #7]
 80086b6:	e010      	b.n	80086da <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80086b8:	7fbb      	ldrb	r3, [r7, #30]
 80086ba:	f003 0311 	and.w	r3, r3, #17
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d003      	beq.n	80086ca <f_open+0xe6>
					res = FR_DENIED;
 80086c2:	2307      	movs	r3, #7
 80086c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80086c8:	e007      	b.n	80086da <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80086ca:	79fb      	ldrb	r3, [r7, #7]
 80086cc:	f003 0304 	and.w	r3, r3, #4
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <f_open+0xf6>
 80086d4:	2308      	movs	r3, #8
 80086d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80086da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d168      	bne.n	80087b4 <f_open+0x1d0>
 80086e2:	79fb      	ldrb	r3, [r7, #7]
 80086e4:	f003 0308 	and.w	r3, r3, #8
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d063      	beq.n	80087b4 <f_open+0x1d0>
				dw = GET_FATTIME();
 80086ec:	f7fd fa06 	bl	8005afc <get_fattime>
 80086f0:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80086f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f4:	330e      	adds	r3, #14
 80086f6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fd fc62 	bl	8005fc2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80086fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008700:	3316      	adds	r3, #22
 8008702:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008704:	4618      	mov	r0, r3
 8008706:	f7fd fc5c 	bl	8005fc2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800870a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870c:	330b      	adds	r3, #11
 800870e:	2220      	movs	r2, #32
 8008710:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008716:	4611      	mov	r1, r2
 8008718:	4618      	mov	r0, r3
 800871a:	f7fe fc32 	bl	8006f82 <ld_clust>
 800871e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008724:	2200      	movs	r2, #0
 8008726:	4618      	mov	r0, r3
 8008728:	f7fe fc4a 	bl	8006fc0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800872c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872e:	331c      	adds	r3, #28
 8008730:	2100      	movs	r1, #0
 8008732:	4618      	mov	r0, r3
 8008734:	f7fd fc45 	bl	8005fc2 <st_dword>
					fs->wflag = 1;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2201      	movs	r2, #1
 800873c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800873e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008740:	2b00      	cmp	r3, #0
 8008742:	d037      	beq.n	80087b4 <f_open+0x1d0>
						dw = fs->winsect;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008748:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800874a:	f107 0318 	add.w	r3, r7, #24
 800874e:	2200      	movs	r2, #0
 8008750:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008752:	4618      	mov	r0, r3
 8008754:	f7fe f93a 	bl	80069cc <remove_chain>
 8008758:	4603      	mov	r3, r0
 800875a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800875e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008762:	2b00      	cmp	r3, #0
 8008764:	d126      	bne.n	80087b4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800876a:	4618      	mov	r0, r3
 800876c:	f7fd fe84 	bl	8006478 <move_window>
 8008770:	4603      	mov	r3, r0
 8008772:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800877a:	3a01      	subs	r2, #1
 800877c:	615a      	str	r2, [r3, #20]
 800877e:	e019      	b.n	80087b4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008780:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008784:	2b00      	cmp	r3, #0
 8008786:	d115      	bne.n	80087b4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008788:	7fbb      	ldrb	r3, [r7, #30]
 800878a:	f003 0310 	and.w	r3, r3, #16
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <f_open+0x1b6>
					res = FR_NO_FILE;
 8008792:	2304      	movs	r3, #4
 8008794:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008798:	e00c      	b.n	80087b4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800879a:	79fb      	ldrb	r3, [r7, #7]
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d007      	beq.n	80087b4 <f_open+0x1d0>
 80087a4:	7fbb      	ldrb	r3, [r7, #30]
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d002      	beq.n	80087b4 <f_open+0x1d0>
						res = FR_DENIED;
 80087ae:	2307      	movs	r3, #7
 80087b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80087b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d126      	bne.n	800880a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80087bc:	79fb      	ldrb	r3, [r7, #7]
 80087be:	f003 0308 	and.w	r3, r3, #8
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80087c6:	79fb      	ldrb	r3, [r7, #7]
 80087c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80087d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80087dc:	79fb      	ldrb	r3, [r7, #7]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	bf8c      	ite	hi
 80087e2:	2301      	movhi	r3, #1
 80087e4:	2300      	movls	r3, #0
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	461a      	mov	r2, r3
 80087ea:	f107 0318 	add.w	r3, r7, #24
 80087ee:	4611      	mov	r1, r2
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fd fd0f 	bl	8006214 <inc_lock>
 80087f6:	4602      	mov	r2, r0
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d102      	bne.n	800880a <f_open+0x226>
 8008804:	2302      	movs	r3, #2
 8008806:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800880a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800880e:	2b00      	cmp	r3, #0
 8008810:	f040 80a3 	bne.w	800895a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008818:	4611      	mov	r1, r2
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe fbb1 	bl	8006f82 <ld_clust>
 8008820:	4602      	mov	r2, r0
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008828:	331c      	adds	r3, #28
 800882a:	4618      	mov	r0, r3
 800882c:	f7fd fb8b 	bl	8005f46 <ld_dword>
 8008830:	4602      	mov	r2, r0
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	88da      	ldrh	r2, [r3, #6]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	79fa      	ldrb	r2, [r7, #7]
 800884e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3330      	adds	r3, #48	@ 0x30
 8008866:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800886a:	2100      	movs	r1, #0
 800886c:	4618      	mov	r0, r3
 800886e:	f7fd fbf5 	bl	800605c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008872:	79fb      	ldrb	r3, [r7, #7]
 8008874:	f003 0320 	and.w	r3, r3, #32
 8008878:	2b00      	cmp	r3, #0
 800887a:	d06e      	beq.n	800895a <f_open+0x376>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d06a      	beq.n	800895a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	68da      	ldr	r2, [r3, #12]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	895b      	ldrh	r3, [r3, #10]
 8008890:	461a      	mov	r2, r3
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	899b      	ldrh	r3, [r3, #12]
 8008896:	fb02 f303 	mul.w	r3, r2, r3
 800889a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088a8:	e016      	b.n	80088d8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fd fe9f 	bl	80065f2 <get_fat>
 80088b4:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80088b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d802      	bhi.n	80088c2 <f_open+0x2de>
 80088bc:	2302      	movs	r3, #2
 80088be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80088c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088c8:	d102      	bne.n	80088d0 <f_open+0x2ec>
 80088ca:	2301      	movs	r3, #1
 80088cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80088d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80088d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d103      	bne.n	80088e8 <f_open+0x304>
 80088e0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80088e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d8e0      	bhi.n	80088aa <f_open+0x2c6>
				}
				fp->clust = clst;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80088ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80088ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d131      	bne.n	800895a <f_open+0x376>
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	899b      	ldrh	r3, [r3, #12]
 80088fa:	461a      	mov	r2, r3
 80088fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8008902:	fb01 f202 	mul.w	r2, r1, r2
 8008906:	1a9b      	subs	r3, r3, r2
 8008908:	2b00      	cmp	r3, #0
 800890a:	d026      	beq.n	800895a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008910:	4618      	mov	r0, r3
 8008912:	f7fd fe4f 	bl	80065b4 <clust2sect>
 8008916:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8008918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d103      	bne.n	8008926 <f_open+0x342>
						res = FR_INT_ERR;
 800891e:	2302      	movs	r3, #2
 8008920:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008924:	e019      	b.n	800895a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	899b      	ldrh	r3, [r3, #12]
 800892a:	461a      	mov	r2, r3
 800892c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800892e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008934:	441a      	add	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	7858      	ldrb	r0, [r3, #1]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6a1a      	ldr	r2, [r3, #32]
 8008948:	2301      	movs	r3, #1
 800894a:	f7fd fa85 	bl	8005e58 <disk_read>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d002      	beq.n	800895a <f_open+0x376>
 8008954:	2301      	movs	r3, #1
 8008956:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800895a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800895e:	2b00      	cmp	r3, #0
 8008960:	d002      	beq.n	8008968 <f_open+0x384>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008968:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800896c:	4618      	mov	r0, r3
 800896e:	3768      	adds	r7, #104	@ 0x68
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08e      	sub	sp, #56	@ 0x38
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2200      	movs	r2, #0
 800898a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f107 0214 	add.w	r2, r7, #20
 8008992:	4611      	mov	r1, r2
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff fda9 	bl	80084ec <validate>
 800899a:	4603      	mov	r3, r0
 800899c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80089a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d107      	bne.n	80089b8 <f_read+0x44>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	7d5b      	ldrb	r3, [r3, #21]
 80089ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80089b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <f_read+0x4a>
 80089b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80089bc:	e135      	b.n	8008c2a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	7d1b      	ldrb	r3, [r3, #20]
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d101      	bne.n	80089ce <f_read+0x5a>
 80089ca:	2307      	movs	r3, #7
 80089cc:	e12d      	b.n	8008c2a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	68da      	ldr	r2, [r3, #12]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	429a      	cmp	r2, r3
 80089e0:	f240 811e 	bls.w	8008c20 <f_read+0x2ac>
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80089e8:	e11a      	b.n	8008c20 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	8992      	ldrh	r2, [r2, #12]
 80089f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80089f6:	fb01 f202 	mul.w	r2, r1, r2
 80089fa:	1a9b      	subs	r3, r3, r2
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f040 80d5 	bne.w	8008bac <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	8992      	ldrh	r2, [r2, #12]
 8008a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	8952      	ldrh	r2, [r2, #10]
 8008a12:	3a01      	subs	r2, #1
 8008a14:	4013      	ands	r3, r2
 8008a16:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d12f      	bne.n	8008a7e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d103      	bne.n	8008a2e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a2c:	e013      	b.n	8008a56 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d007      	beq.n	8008a46 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f7fe f8c2 	bl	8006bc6 <clmt_clust>
 8008a42:	6338      	str	r0, [r7, #48]	@ 0x30
 8008a44:	e007      	b.n	8008a56 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	69db      	ldr	r3, [r3, #28]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	4610      	mov	r0, r2
 8008a50:	f7fd fdcf 	bl	80065f2 <get_fat>
 8008a54:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d804      	bhi.n	8008a66 <f_read+0xf2>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2202      	movs	r2, #2
 8008a60:	755a      	strb	r2, [r3, #21]
 8008a62:	2302      	movs	r3, #2
 8008a64:	e0e1      	b.n	8008c2a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a6c:	d104      	bne.n	8008a78 <f_read+0x104>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2201      	movs	r2, #1
 8008a72:	755a      	strb	r2, [r3, #21]
 8008a74:	2301      	movs	r3, #1
 8008a76:	e0d8      	b.n	8008c2a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a7c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	4619      	mov	r1, r3
 8008a86:	4610      	mov	r0, r2
 8008a88:	f7fd fd94 	bl	80065b4 <clust2sect>
 8008a8c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d104      	bne.n	8008a9e <f_read+0x12a>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2202      	movs	r2, #2
 8008a98:	755a      	strb	r2, [r3, #21]
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	e0c5      	b.n	8008c2a <f_read+0x2b6>
			sect += csect;
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	899b      	ldrh	r3, [r3, #12]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d041      	beq.n	8008b3e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008aba:	69fa      	ldr	r2, [r7, #28]
 8008abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008abe:	4413      	add	r3, r2
 8008ac0:	697a      	ldr	r2, [r7, #20]
 8008ac2:	8952      	ldrh	r2, [r2, #10]
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d905      	bls.n	8008ad4 <f_read+0x160>
					cc = fs->csize - csect;
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	895b      	ldrh	r3, [r3, #10]
 8008acc:	461a      	mov	r2, r3
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	7858      	ldrb	r0, [r3, #1]
 8008ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ade:	f7fd f9bb 	bl	8005e58 <disk_read>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d004      	beq.n	8008af2 <f_read+0x17e>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2201      	movs	r2, #1
 8008aec:	755a      	strb	r2, [r3, #21]
 8008aee:	2301      	movs	r3, #1
 8008af0:	e09b      	b.n	8008c2a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	7d1b      	ldrb	r3, [r3, #20]
 8008af6:	b25b      	sxtb	r3, r3
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	da18      	bge.n	8008b2e <f_read+0x1ba>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6a1a      	ldr	r2, [r3, #32]
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d911      	bls.n	8008b2e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6a1a      	ldr	r2, [r3, #32]
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	8992      	ldrh	r2, [r2, #12]
 8008b16:	fb02 f303 	mul.w	r3, r2, r3
 8008b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b1c:	18d0      	adds	r0, r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	899b      	ldrh	r3, [r3, #12]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	f7fd fa76 	bl	800601a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	899b      	ldrh	r3, [r3, #12]
 8008b32:	461a      	mov	r2, r3
 8008b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b36:	fb02 f303 	mul.w	r3, r2, r3
 8008b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8008b3c:	e05c      	b.n	8008bf8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	69ba      	ldr	r2, [r7, #24]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d02e      	beq.n	8008ba6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	7d1b      	ldrb	r3, [r3, #20]
 8008b4c:	b25b      	sxtb	r3, r3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	da18      	bge.n	8008b84 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	7858      	ldrb	r0, [r3, #1]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6a1a      	ldr	r2, [r3, #32]
 8008b60:	2301      	movs	r3, #1
 8008b62:	f7fd f999 	bl	8005e98 <disk_write>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d004      	beq.n	8008b76 <f_read+0x202>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	755a      	strb	r2, [r3, #21]
 8008b72:	2301      	movs	r3, #1
 8008b74:	e059      	b.n	8008c2a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	7d1b      	ldrb	r3, [r3, #20]
 8008b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	7858      	ldrb	r0, [r3, #1]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b8e:	2301      	movs	r3, #1
 8008b90:	69ba      	ldr	r2, [r7, #24]
 8008b92:	f7fd f961 	bl	8005e58 <disk_read>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d004      	beq.n	8008ba6 <f_read+0x232>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	755a      	strb	r2, [r3, #21]
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e041      	b.n	8008c2a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	69ba      	ldr	r2, [r7, #24]
 8008baa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	899b      	ldrh	r3, [r3, #12]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	8992      	ldrh	r2, [r2, #12]
 8008bba:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bbe:	fb01 f202 	mul.w	r2, r1, r2
 8008bc2:	1a9b      	subs	r3, r3, r2
 8008bc4:	1ac3      	subs	r3, r0, r3
 8008bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008bc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d901      	bls.n	8008bd4 <f_read+0x260>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	8992      	ldrh	r2, [r2, #12]
 8008be2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008be6:	fb00 f202 	mul.w	r2, r0, r2
 8008bea:	1a9b      	subs	r3, r3, r2
 8008bec:	440b      	add	r3, r1
 8008bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008bf4:	f7fd fa11 	bl	800601a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfc:	4413      	add	r3, r2
 8008bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	699a      	ldr	r2, [r3, #24]
 8008c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c06:	441a      	add	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	619a      	str	r2, [r3, #24]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c12:	441a      	add	r2, r3
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	601a      	str	r2, [r3, #0]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f47f aee1 	bne.w	80089ea <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3738      	adds	r7, #56	@ 0x38
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b08c      	sub	sp, #48	@ 0x30
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	60f8      	str	r0, [r7, #12]
 8008c3a:	60b9      	str	r1, [r7, #8]
 8008c3c:	607a      	str	r2, [r7, #4]
 8008c3e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	2200      	movs	r2, #0
 8008c48:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f107 0210 	add.w	r2, r7, #16
 8008c50:	4611      	mov	r1, r2
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff fc4a 	bl	80084ec <validate>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d107      	bne.n	8008c76 <f_write+0x44>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	7d5b      	ldrb	r3, [r3, #21]
 8008c6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <f_write+0x4a>
 8008c76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c7a:	e16a      	b.n	8008f52 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	7d1b      	ldrb	r3, [r3, #20]
 8008c80:	f003 0302 	and.w	r3, r3, #2
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <f_write+0x5a>
 8008c88:	2307      	movs	r3, #7
 8008c8a:	e162      	b.n	8008f52 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	699a      	ldr	r2, [r3, #24]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	441a      	add	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	f080 814c 	bcs.w	8008f36 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	43db      	mvns	r3, r3
 8008ca4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008ca6:	e146      	b.n	8008f36 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	8992      	ldrh	r2, [r2, #12]
 8008cb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cb4:	fb01 f202 	mul.w	r2, r1, r2
 8008cb8:	1a9b      	subs	r3, r3, r2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f040 80f1 	bne.w	8008ea2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	8992      	ldrh	r2, [r2, #12]
 8008cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ccc:	693a      	ldr	r2, [r7, #16]
 8008cce:	8952      	ldrh	r2, [r2, #10]
 8008cd0:	3a01      	subs	r2, #1
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d143      	bne.n	8008d64 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10c      	bne.n	8008cfe <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d11a      	bne.n	8008d26 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fd fece 	bl	8006a96 <create_chain>
 8008cfa:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008cfc:	e013      	b.n	8008d26 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d007      	beq.n	8008d16 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f7fd ff5a 	bl	8006bc6 <clmt_clust>
 8008d12:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008d14:	e007      	b.n	8008d26 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	69db      	ldr	r3, [r3, #28]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	f7fd feb9 	bl	8006a96 <create_chain>
 8008d24:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 8109 	beq.w	8008f40 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d104      	bne.n	8008d3e <f_write+0x10c>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2202      	movs	r2, #2
 8008d38:	755a      	strb	r2, [r3, #21]
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	e109      	b.n	8008f52 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d44:	d104      	bne.n	8008d50 <f_write+0x11e>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	755a      	strb	r2, [r3, #21]
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e100      	b.n	8008f52 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d54:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d102      	bne.n	8008d64 <f_write+0x132>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d62:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	7d1b      	ldrb	r3, [r3, #20]
 8008d68:	b25b      	sxtb	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	da18      	bge.n	8008da0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	7858      	ldrb	r0, [r3, #1]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6a1a      	ldr	r2, [r3, #32]
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	f7fd f88b 	bl	8005e98 <disk_write>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d004      	beq.n	8008d92 <f_write+0x160>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	755a      	strb	r2, [r3, #21]
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e0df      	b.n	8008f52 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	7d1b      	ldrb	r3, [r3, #20]
 8008d96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	4619      	mov	r1, r3
 8008da8:	4610      	mov	r0, r2
 8008daa:	f7fd fc03 	bl	80065b4 <clust2sect>
 8008dae:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d104      	bne.n	8008dc0 <f_write+0x18e>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2202      	movs	r2, #2
 8008dba:	755a      	strb	r2, [r3, #21]
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	e0c8      	b.n	8008f52 <f_write+0x320>
			sect += csect;
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	899b      	ldrh	r3, [r3, #12]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dd4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008dd6:	6a3b      	ldr	r3, [r7, #32]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d043      	beq.n	8008e64 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008ddc:	69ba      	ldr	r2, [r7, #24]
 8008dde:	6a3b      	ldr	r3, [r7, #32]
 8008de0:	4413      	add	r3, r2
 8008de2:	693a      	ldr	r2, [r7, #16]
 8008de4:	8952      	ldrh	r2, [r2, #10]
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d905      	bls.n	8008df6 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	895b      	ldrh	r3, [r3, #10]
 8008dee:	461a      	mov	r2, r3
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	7858      	ldrb	r0, [r3, #1]
 8008dfa:	6a3b      	ldr	r3, [r7, #32]
 8008dfc:	697a      	ldr	r2, [r7, #20]
 8008dfe:	69f9      	ldr	r1, [r7, #28]
 8008e00:	f7fd f84a 	bl	8005e98 <disk_write>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d004      	beq.n	8008e14 <f_write+0x1e2>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	755a      	strb	r2, [r3, #21]
 8008e10:	2301      	movs	r3, #1
 8008e12:	e09e      	b.n	8008f52 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6a1a      	ldr	r2, [r3, #32]
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	6a3a      	ldr	r2, [r7, #32]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d918      	bls.n	8008e54 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6a1a      	ldr	r2, [r3, #32]
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	8992      	ldrh	r2, [r2, #12]
 8008e34:	fb02 f303 	mul.w	r3, r2, r3
 8008e38:	69fa      	ldr	r2, [r7, #28]
 8008e3a:	18d1      	adds	r1, r2, r3
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	899b      	ldrh	r3, [r3, #12]
 8008e40:	461a      	mov	r2, r3
 8008e42:	f7fd f8ea 	bl	800601a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	7d1b      	ldrb	r3, [r3, #20]
 8008e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e4e:	b2da      	uxtb	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	899b      	ldrh	r3, [r3, #12]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	fb02 f303 	mul.w	r3, r2, r3
 8008e60:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008e62:	e04b      	b.n	8008efc <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6a1b      	ldr	r3, [r3, #32]
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d016      	beq.n	8008e9c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	699a      	ldr	r2, [r3, #24]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d210      	bcs.n	8008e9c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	7858      	ldrb	r0, [r3, #1]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e84:	2301      	movs	r3, #1
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	f7fc ffe6 	bl	8005e58 <disk_read>
 8008e8c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d004      	beq.n	8008e9c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2201      	movs	r2, #1
 8008e96:	755a      	strb	r2, [r3, #21]
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e05a      	b.n	8008f52 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	899b      	ldrh	r3, [r3, #12]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	8992      	ldrh	r2, [r2, #12]
 8008eb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008eb4:	fb01 f202 	mul.w	r2, r1, r2
 8008eb8:	1a9b      	subs	r3, r3, r2
 8008eba:	1ac3      	subs	r3, r0, r3
 8008ebc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d901      	bls.n	8008eca <f_write+0x298>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	8992      	ldrh	r2, [r2, #12]
 8008ed8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008edc:	fb00 f202 	mul.w	r2, r0, r2
 8008ee0:	1a9b      	subs	r3, r3, r2
 8008ee2:	440b      	add	r3, r1
 8008ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ee6:	69f9      	ldr	r1, [r7, #28]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fd f896 	bl	800601a <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	7d1b      	ldrb	r3, [r3, #20]
 8008ef2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008efc:	69fa      	ldr	r2, [r7, #28]
 8008efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f00:	4413      	add	r3, r2
 8008f02:	61fb      	str	r3, [r7, #28]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	699a      	ldr	r2, [r3, #24]
 8008f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0a:	441a      	add	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	619a      	str	r2, [r3, #24]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	68da      	ldr	r2, [r3, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	bf38      	it	cc
 8008f1c:	461a      	movcc	r2, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	60da      	str	r2, [r3, #12]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f28:	441a      	add	r2, r3
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	601a      	str	r2, [r3, #0]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f47f aeb5 	bne.w	8008ca8 <f_write+0x76>
 8008f3e:	e000      	b.n	8008f42 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f40:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	7d1b      	ldrb	r3, [r3, #20]
 8008f46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3730      	adds	r7, #48	@ 0x30
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b086      	sub	sp, #24
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f107 0208 	add.w	r2, r7, #8
 8008f68:	4611      	mov	r1, r2
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7ff fabe 	bl	80084ec <validate>
 8008f70:	4603      	mov	r3, r0
 8008f72:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d168      	bne.n	800904c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	7d1b      	ldrb	r3, [r3, #20]
 8008f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d062      	beq.n	800904c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	7d1b      	ldrb	r3, [r3, #20]
 8008f8a:	b25b      	sxtb	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	da15      	bge.n	8008fbc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	7858      	ldrb	r0, [r3, #1]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a1a      	ldr	r2, [r3, #32]
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	f7fc ff7a 	bl	8005e98 <disk_write>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <f_sync+0x54>
 8008faa:	2301      	movs	r3, #1
 8008fac:	e04f      	b.n	800904e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	7d1b      	ldrb	r3, [r3, #20]
 8008fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008fbc:	f7fc fd9e 	bl	8005afc <get_fattime>
 8008fc0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4610      	mov	r0, r2
 8008fcc:	f7fd fa54 	bl	8006478 <move_window>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d138      	bne.n	800904c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fde:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	330b      	adds	r3, #11
 8008fe4:	781a      	ldrb	r2, [r3, #0]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	330b      	adds	r3, #11
 8008fea:	f042 0220 	orr.w	r2, r2, #32
 8008fee:	b2d2      	uxtb	r2, r2
 8008ff0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6818      	ldr	r0, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	68f9      	ldr	r1, [r7, #12]
 8008ffe:	f7fd ffdf 	bl	8006fc0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f103 021c 	add.w	r2, r3, #28
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	4619      	mov	r1, r3
 800900e:	4610      	mov	r0, r2
 8009010:	f7fc ffd7 	bl	8005fc2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3316      	adds	r3, #22
 8009018:	6939      	ldr	r1, [r7, #16]
 800901a:	4618      	mov	r0, r3
 800901c:	f7fc ffd1 	bl	8005fc2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	3312      	adds	r3, #18
 8009024:	2100      	movs	r1, #0
 8009026:	4618      	mov	r0, r3
 8009028:	f7fc ffb0 	bl	8005f8c <st_word>
					fs->wflag = 1;
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	2201      	movs	r2, #1
 8009030:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	4618      	mov	r0, r3
 8009036:	f7fd fa4d 	bl	80064d4 <sync_fs>
 800903a:	4603      	mov	r3, r0
 800903c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	7d1b      	ldrb	r3, [r3, #20]
 8009042:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009046:	b2da      	uxtb	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800904c:	7dfb      	ldrb	r3, [r7, #23]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b084      	sub	sp, #16
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f7ff ff7b 	bl	8008f5a <f_sync>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009068:	7bfb      	ldrb	r3, [r7, #15]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d118      	bne.n	80090a0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f107 0208 	add.w	r2, r7, #8
 8009074:	4611      	mov	r1, r2
 8009076:	4618      	mov	r0, r3
 8009078:	f7ff fa38 	bl	80084ec <validate>
 800907c:	4603      	mov	r3, r0
 800907e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009080:	7bfb      	ldrb	r3, [r7, #15]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10c      	bne.n	80090a0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	4618      	mov	r0, r3
 800908c:	f7fd f950 	bl	8006330 <dec_lock>
 8009090:	4603      	mov	r3, r0
 8009092:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009094:	7bfb      	ldrb	r3, [r7, #15]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d102      	bne.n	80090a0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b086      	sub	sp, #24
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <f_opendir+0x14>
 80090ba:	2309      	movs	r3, #9
 80090bc:	e064      	b.n	8009188 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80090c2:	f107 010c 	add.w	r1, r7, #12
 80090c6:	463b      	mov	r3, r7
 80090c8:	2200      	movs	r2, #0
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fe ff88 	bl	8007fe0 <find_volume>
 80090d0:	4603      	mov	r3, r0
 80090d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80090d4:	7dfb      	ldrb	r3, [r7, #23]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d14f      	bne.n	800917a <f_opendir+0xd0>
		obj->fs = fs;
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	4619      	mov	r1, r3
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7fe fe6b 	bl	8007dc0 <follow_path>
 80090ea:	4603      	mov	r3, r0
 80090ec:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d13d      	bne.n	8009170 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80090fa:	b25b      	sxtb	r3, r3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	db12      	blt.n	8009126 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	799b      	ldrb	r3, [r3, #6]
 8009104:	f003 0310 	and.w	r3, r3, #16
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00a      	beq.n	8009122 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	4619      	mov	r1, r3
 8009114:	4610      	mov	r0, r2
 8009116:	f7fd ff34 	bl	8006f82 <ld_clust>
 800911a:	4602      	mov	r2, r0
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	609a      	str	r2, [r3, #8]
 8009120:	e001      	b.n	8009126 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8009122:	2305      	movs	r3, #5
 8009124:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d121      	bne.n	8009170 <f_opendir+0xc6>
				obj->id = fs->id;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	88da      	ldrh	r2, [r3, #6]
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8009134:	2100      	movs	r1, #0
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7fd fd7d 	bl	8006c36 <dir_sdi>
 800913c:	4603      	mov	r3, r0
 800913e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8009140:	7dfb      	ldrb	r3, [r7, #23]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d114      	bne.n	8009170 <f_opendir+0xc6>
					if (obj->sclust) {
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00d      	beq.n	800916a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800914e:	2100      	movs	r1, #0
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f7fd f85f 	bl	8006214 <inc_lock>
 8009156:	4602      	mov	r2, r0
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d105      	bne.n	8009170 <f_opendir+0xc6>
 8009164:	2312      	movs	r3, #18
 8009166:	75fb      	strb	r3, [r7, #23]
 8009168:	e002      	b.n	8009170 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	2200      	movs	r2, #0
 800916e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8009170:	7dfb      	ldrb	r3, [r7, #23]
 8009172:	2b04      	cmp	r3, #4
 8009174:	d101      	bne.n	800917a <f_opendir+0xd0>
 8009176:	2305      	movs	r3, #5
 8009178:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <f_opendir+0xdc>
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009186:	7dfb      	ldrb	r3, [r7, #23]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f107 0208 	add.w	r2, r7, #8
 800919e:	4611      	mov	r1, r2
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7ff f9a3 	bl	80084ec <validate>
 80091a6:	4603      	mov	r3, r0
 80091a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d110      	bne.n	80091d2 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d006      	beq.n	80091c6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fd f8b7 	bl	8006330 <dec_lock>
 80091c2:	4603      	mov	r3, r0
 80091c4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d102      	bne.n	80091d2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f107 0208 	add.w	r2, r7, #8
 80091ec:	4611      	mov	r1, r2
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7ff f97c 	bl	80084ec <validate>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d126      	bne.n	800924c <f_readdir+0x70>
		if (!fno) {
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d106      	bne.n	8009212 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8009204:	2100      	movs	r1, #0
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f7fd fd15 	bl	8006c36 <dir_sdi>
 800920c:	4603      	mov	r3, r0
 800920e:	73fb      	strb	r3, [r7, #15]
 8009210:	e01c      	b.n	800924c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8009212:	2100      	movs	r1, #0
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7fe f8de 	bl	80073d6 <dir_read>
 800921a:	4603      	mov	r3, r0
 800921c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800921e:	7bfb      	ldrb	r3, [r7, #15]
 8009220:	2b04      	cmp	r3, #4
 8009222:	d101      	bne.n	8009228 <f_readdir+0x4c>
 8009224:	2300      	movs	r3, #0
 8009226:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8009228:	7bfb      	ldrb	r3, [r7, #15]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10e      	bne.n	800924c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800922e:	6839      	ldr	r1, [r7, #0]
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7fe fb2f 	bl	8007894 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8009236:	2100      	movs	r1, #0
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7fd fd85 	bl	8006d48 <dir_next>
 800923e:	4603      	mov	r3, r0
 8009240:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8009242:	7bfb      	ldrb	r3, [r7, #15]
 8009244:	2b04      	cmp	r3, #4
 8009246:	d101      	bne.n	800924c <f_readdir+0x70>
 8009248:	2300      	movs	r3, #0
 800924a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800924c:	7bfb      	ldrb	r3, [r7, #15]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b092      	sub	sp, #72	@ 0x48
 800925a:	af00      	add	r7, sp, #0
 800925c:	60f8      	str	r0, [r7, #12]
 800925e:	60b9      	str	r1, [r7, #8]
 8009260:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009262:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8009266:	f107 030c 	add.w	r3, r7, #12
 800926a:	2200      	movs	r2, #0
 800926c:	4618      	mov	r0, r3
 800926e:	f7fe feb7 	bl	8007fe0 <find_volume>
 8009272:	4603      	mov	r3, r0
 8009274:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8009278:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800927c:	2b00      	cmp	r3, #0
 800927e:	f040 8099 	bne.w	80093b4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928a:	699a      	ldr	r2, [r3, #24]
 800928c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	3b02      	subs	r3, #2
 8009292:	429a      	cmp	r2, r3
 8009294:	d804      	bhi.n	80092a0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009298:	699a      	ldr	r2, [r3, #24]
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	e089      	b.n	80093b4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80092a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d128      	bne.n	80092fe <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80092ac:	2302      	movs	r3, #2
 80092ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80092b4:	f107 0314 	add.w	r3, r7, #20
 80092b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fd f999 	bl	80065f2 <get_fat>
 80092c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80092c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092c8:	d103      	bne.n	80092d2 <f_getfree+0x7c>
 80092ca:	2301      	movs	r3, #1
 80092cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80092d0:	e063      	b.n	800939a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80092d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d103      	bne.n	80092e0 <f_getfree+0x8a>
 80092d8:	2302      	movs	r3, #2
 80092da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80092de:	e05c      	b.n	800939a <f_getfree+0x144>
					if (stat == 0) nfree++;
 80092e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d102      	bne.n	80092ec <f_getfree+0x96>
 80092e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092e8:	3301      	adds	r3, #1
 80092ea:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 80092ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ee:	3301      	adds	r3, #1
 80092f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d3db      	bcc.n	80092b4 <f_getfree+0x5e>
 80092fc:	e04d      	b.n	800939a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80092fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009308:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800930a:	2300      	movs	r3, #0
 800930c:	637b      	str	r3, [r7, #52]	@ 0x34
 800930e:	2300      	movs	r3, #0
 8009310:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8009312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009314:	2b00      	cmp	r3, #0
 8009316:	d113      	bne.n	8009340 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009318:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800931a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009320:	4619      	mov	r1, r3
 8009322:	f7fd f8a9 	bl	8006478 <move_window>
 8009326:	4603      	mov	r3, r0
 8009328:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800932c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009330:	2b00      	cmp	r3, #0
 8009332:	d131      	bne.n	8009398 <f_getfree+0x142>
							p = fs->win;
 8009334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009336:	3338      	adds	r3, #56	@ 0x38
 8009338:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800933a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933c:	899b      	ldrh	r3, [r3, #12]
 800933e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	2b02      	cmp	r3, #2
 8009346:	d10f      	bne.n	8009368 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009348:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800934a:	f7fc fde3 	bl	8005f14 <ld_word>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d102      	bne.n	800935a <f_getfree+0x104>
 8009354:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009356:	3301      	adds	r3, #1
 8009358:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800935a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935c:	3302      	adds	r3, #2
 800935e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009362:	3b02      	subs	r3, #2
 8009364:	637b      	str	r3, [r7, #52]	@ 0x34
 8009366:	e010      	b.n	800938a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009368:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800936a:	f7fc fdec 	bl	8005f46 <ld_dword>
 800936e:	4603      	mov	r3, r0
 8009370:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d102      	bne.n	800937e <f_getfree+0x128>
 8009378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800937a:	3301      	adds	r3, #1
 800937c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800937e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009380:	3304      	adds	r3, #4
 8009382:	633b      	str	r3, [r7, #48]	@ 0x30
 8009384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009386:	3b04      	subs	r3, #4
 8009388:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800938a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800938c:	3b01      	subs	r3, #1
 800938e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1bd      	bne.n	8009312 <f_getfree+0xbc>
 8009396:	e000      	b.n	800939a <f_getfree+0x144>
							if (res != FR_OK) break;
 8009398:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800939e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80093a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093a4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80093a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a8:	791a      	ldrb	r2, [r3, #4]
 80093aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ac:	f042 0201 	orr.w	r2, r2, #1
 80093b0:	b2d2      	uxtb	r2, r2
 80093b2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80093b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3748      	adds	r7, #72	@ 0x48
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b087      	sub	sp, #28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	4613      	mov	r3, r2
 80093cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80093ce:	2301      	movs	r3, #1
 80093d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80093d2:	2300      	movs	r3, #0
 80093d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80093d6:	4b1f      	ldr	r3, [pc, #124]	@ (8009454 <FATFS_LinkDriverEx+0x94>)
 80093d8:	7a5b      	ldrb	r3, [r3, #9]
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d131      	bne.n	8009444 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80093e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009454 <FATFS_LinkDriverEx+0x94>)
 80093e2:	7a5b      	ldrb	r3, [r3, #9]
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	461a      	mov	r2, r3
 80093e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009454 <FATFS_LinkDriverEx+0x94>)
 80093ea:	2100      	movs	r1, #0
 80093ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80093ee:	4b19      	ldr	r3, [pc, #100]	@ (8009454 <FATFS_LinkDriverEx+0x94>)
 80093f0:	7a5b      	ldrb	r3, [r3, #9]
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	4a17      	ldr	r2, [pc, #92]	@ (8009454 <FATFS_LinkDriverEx+0x94>)
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4413      	add	r3, r2
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80093fe:	4b15      	ldr	r3, [pc, #84]	@ (8009454 <FATFS_LinkDriverEx+0x94>)
 8009400:	7a5b      	ldrb	r3, [r3, #9]
 8009402:	b2db      	uxtb	r3, r3
 8009404:	461a      	mov	r2, r3
 8009406:	4b13      	ldr	r3, [pc, #76]	@ (8009454 <FATFS_LinkDriverEx+0x94>)
 8009408:	4413      	add	r3, r2
 800940a:	79fa      	ldrb	r2, [r7, #7]
 800940c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800940e:	4b11      	ldr	r3, [pc, #68]	@ (8009454 <FATFS_LinkDriverEx+0x94>)
 8009410:	7a5b      	ldrb	r3, [r3, #9]
 8009412:	b2db      	uxtb	r3, r3
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	b2d1      	uxtb	r1, r2
 8009418:	4a0e      	ldr	r2, [pc, #56]	@ (8009454 <FATFS_LinkDriverEx+0x94>)
 800941a:	7251      	strb	r1, [r2, #9]
 800941c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800941e:	7dbb      	ldrb	r3, [r7, #22]
 8009420:	3330      	adds	r3, #48	@ 0x30
 8009422:	b2da      	uxtb	r2, r3
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	3301      	adds	r3, #1
 800942c:	223a      	movs	r2, #58	@ 0x3a
 800942e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	3302      	adds	r3, #2
 8009434:	222f      	movs	r2, #47	@ 0x2f
 8009436:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	3303      	adds	r3, #3
 800943c:	2200      	movs	r2, #0
 800943e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009444:	7dfb      	ldrb	r3, [r7, #23]
}
 8009446:	4618      	mov	r0, r3
 8009448:	371c      	adds	r7, #28
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	200018c8 	.word	0x200018c8

08009458 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009462:	2200      	movs	r2, #0
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7ff ffaa 	bl	80093c0 <FATFS_LinkDriverEx>
 800946c:	4603      	mov	r3, r0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
	...

08009478 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	4603      	mov	r3, r0
 8009480:	6039      	str	r1, [r7, #0]
 8009482:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009484:	88fb      	ldrh	r3, [r7, #6]
 8009486:	2b7f      	cmp	r3, #127	@ 0x7f
 8009488:	d802      	bhi.n	8009490 <ff_convert+0x18>
		c = chr;
 800948a:	88fb      	ldrh	r3, [r7, #6]
 800948c:	81fb      	strh	r3, [r7, #14]
 800948e:	e025      	b.n	80094dc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00b      	beq.n	80094ae <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009496:	88fb      	ldrh	r3, [r7, #6]
 8009498:	2bff      	cmp	r3, #255	@ 0xff
 800949a:	d805      	bhi.n	80094a8 <ff_convert+0x30>
 800949c:	88fb      	ldrh	r3, [r7, #6]
 800949e:	3b80      	subs	r3, #128	@ 0x80
 80094a0:	4a12      	ldr	r2, [pc, #72]	@ (80094ec <ff_convert+0x74>)
 80094a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094a6:	e000      	b.n	80094aa <ff_convert+0x32>
 80094a8:	2300      	movs	r3, #0
 80094aa:	81fb      	strh	r3, [r7, #14]
 80094ac:	e016      	b.n	80094dc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80094ae:	2300      	movs	r3, #0
 80094b0:	81fb      	strh	r3, [r7, #14]
 80094b2:	e009      	b.n	80094c8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80094b4:	89fb      	ldrh	r3, [r7, #14]
 80094b6:	4a0d      	ldr	r2, [pc, #52]	@ (80094ec <ff_convert+0x74>)
 80094b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094bc:	88fa      	ldrh	r2, [r7, #6]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d006      	beq.n	80094d0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80094c2:	89fb      	ldrh	r3, [r7, #14]
 80094c4:	3301      	adds	r3, #1
 80094c6:	81fb      	strh	r3, [r7, #14]
 80094c8:	89fb      	ldrh	r3, [r7, #14]
 80094ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80094cc:	d9f2      	bls.n	80094b4 <ff_convert+0x3c>
 80094ce:	e000      	b.n	80094d2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80094d0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80094d2:	89fb      	ldrh	r3, [r7, #14]
 80094d4:	3380      	adds	r3, #128	@ 0x80
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80094dc:	89fb      	ldrh	r3, [r7, #14]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	0800ae80 	.word	0x0800ae80

080094f0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b087      	sub	sp, #28
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	4603      	mov	r3, r0
 80094f8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80094fa:	88fb      	ldrh	r3, [r7, #6]
 80094fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009500:	d201      	bcs.n	8009506 <ff_wtoupper+0x16>
 8009502:	4b3e      	ldr	r3, [pc, #248]	@ (80095fc <ff_wtoupper+0x10c>)
 8009504:	e000      	b.n	8009508 <ff_wtoupper+0x18>
 8009506:	4b3e      	ldr	r3, [pc, #248]	@ (8009600 <ff_wtoupper+0x110>)
 8009508:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	1c9a      	adds	r2, r3, #2
 800950e:	617a      	str	r2, [r7, #20]
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009514:	8a7b      	ldrh	r3, [r7, #18]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d068      	beq.n	80095ec <ff_wtoupper+0xfc>
 800951a:	88fa      	ldrh	r2, [r7, #6]
 800951c:	8a7b      	ldrh	r3, [r7, #18]
 800951e:	429a      	cmp	r2, r3
 8009520:	d364      	bcc.n	80095ec <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	1c9a      	adds	r2, r3, #2
 8009526:	617a      	str	r2, [r7, #20]
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	823b      	strh	r3, [r7, #16]
 800952c:	8a3b      	ldrh	r3, [r7, #16]
 800952e:	0a1b      	lsrs	r3, r3, #8
 8009530:	81fb      	strh	r3, [r7, #14]
 8009532:	8a3b      	ldrh	r3, [r7, #16]
 8009534:	b2db      	uxtb	r3, r3
 8009536:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009538:	88fa      	ldrh	r2, [r7, #6]
 800953a:	8a79      	ldrh	r1, [r7, #18]
 800953c:	8a3b      	ldrh	r3, [r7, #16]
 800953e:	440b      	add	r3, r1
 8009540:	429a      	cmp	r2, r3
 8009542:	da49      	bge.n	80095d8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009544:	89fb      	ldrh	r3, [r7, #14]
 8009546:	2b08      	cmp	r3, #8
 8009548:	d84f      	bhi.n	80095ea <ff_wtoupper+0xfa>
 800954a:	a201      	add	r2, pc, #4	@ (adr r2, 8009550 <ff_wtoupper+0x60>)
 800954c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009550:	08009575 	.word	0x08009575
 8009554:	08009587 	.word	0x08009587
 8009558:	0800959d 	.word	0x0800959d
 800955c:	080095a5 	.word	0x080095a5
 8009560:	080095ad 	.word	0x080095ad
 8009564:	080095b5 	.word	0x080095b5
 8009568:	080095bd 	.word	0x080095bd
 800956c:	080095c5 	.word	0x080095c5
 8009570:	080095cd 	.word	0x080095cd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009574:	88fa      	ldrh	r2, [r7, #6]
 8009576:	8a7b      	ldrh	r3, [r7, #18]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	005b      	lsls	r3, r3, #1
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	4413      	add	r3, r2
 8009580:	881b      	ldrh	r3, [r3, #0]
 8009582:	80fb      	strh	r3, [r7, #6]
 8009584:	e027      	b.n	80095d6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009586:	88fa      	ldrh	r2, [r7, #6]
 8009588:	8a7b      	ldrh	r3, [r7, #18]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	b29b      	uxth	r3, r3
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	b29b      	uxth	r3, r3
 8009594:	88fa      	ldrh	r2, [r7, #6]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	80fb      	strh	r3, [r7, #6]
 800959a:	e01c      	b.n	80095d6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800959c:	88fb      	ldrh	r3, [r7, #6]
 800959e:	3b10      	subs	r3, #16
 80095a0:	80fb      	strh	r3, [r7, #6]
 80095a2:	e018      	b.n	80095d6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80095a4:	88fb      	ldrh	r3, [r7, #6]
 80095a6:	3b20      	subs	r3, #32
 80095a8:	80fb      	strh	r3, [r7, #6]
 80095aa:	e014      	b.n	80095d6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80095ac:	88fb      	ldrh	r3, [r7, #6]
 80095ae:	3b30      	subs	r3, #48	@ 0x30
 80095b0:	80fb      	strh	r3, [r7, #6]
 80095b2:	e010      	b.n	80095d6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80095b4:	88fb      	ldrh	r3, [r7, #6]
 80095b6:	3b1a      	subs	r3, #26
 80095b8:	80fb      	strh	r3, [r7, #6]
 80095ba:	e00c      	b.n	80095d6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80095bc:	88fb      	ldrh	r3, [r7, #6]
 80095be:	3308      	adds	r3, #8
 80095c0:	80fb      	strh	r3, [r7, #6]
 80095c2:	e008      	b.n	80095d6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80095c4:	88fb      	ldrh	r3, [r7, #6]
 80095c6:	3b50      	subs	r3, #80	@ 0x50
 80095c8:	80fb      	strh	r3, [r7, #6]
 80095ca:	e004      	b.n	80095d6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80095cc:	88fb      	ldrh	r3, [r7, #6]
 80095ce:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80095d2:	80fb      	strh	r3, [r7, #6]
 80095d4:	bf00      	nop
			}
			break;
 80095d6:	e008      	b.n	80095ea <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80095d8:	89fb      	ldrh	r3, [r7, #14]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d195      	bne.n	800950a <ff_wtoupper+0x1a>
 80095de:	8a3b      	ldrh	r3, [r7, #16]
 80095e0:	005b      	lsls	r3, r3, #1
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	4413      	add	r3, r2
 80095e6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80095e8:	e78f      	b.n	800950a <ff_wtoupper+0x1a>
			break;
 80095ea:	bf00      	nop
	}

	return chr;
 80095ec:	88fb      	ldrh	r3, [r7, #6]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	371c      	adds	r7, #28
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	0800af80 	.word	0x0800af80
 8009600:	0800b174 	.word	0x0800b174

08009604 <sniprintf>:
 8009604:	b40c      	push	{r2, r3}
 8009606:	b530      	push	{r4, r5, lr}
 8009608:	4b18      	ldr	r3, [pc, #96]	@ (800966c <sniprintf+0x68>)
 800960a:	1e0c      	subs	r4, r1, #0
 800960c:	681d      	ldr	r5, [r3, #0]
 800960e:	b09d      	sub	sp, #116	@ 0x74
 8009610:	da08      	bge.n	8009624 <sniprintf+0x20>
 8009612:	238b      	movs	r3, #139	@ 0x8b
 8009614:	602b      	str	r3, [r5, #0]
 8009616:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800961a:	b01d      	add	sp, #116	@ 0x74
 800961c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009620:	b002      	add	sp, #8
 8009622:	4770      	bx	lr
 8009624:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009628:	f8ad 3014 	strh.w	r3, [sp, #20]
 800962c:	f04f 0300 	mov.w	r3, #0
 8009630:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009632:	bf14      	ite	ne
 8009634:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009638:	4623      	moveq	r3, r4
 800963a:	9304      	str	r3, [sp, #16]
 800963c:	9307      	str	r3, [sp, #28]
 800963e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009642:	9002      	str	r0, [sp, #8]
 8009644:	9006      	str	r0, [sp, #24]
 8009646:	f8ad 3016 	strh.w	r3, [sp, #22]
 800964a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800964c:	ab21      	add	r3, sp, #132	@ 0x84
 800964e:	a902      	add	r1, sp, #8
 8009650:	4628      	mov	r0, r5
 8009652:	9301      	str	r3, [sp, #4]
 8009654:	f000 f9ce 	bl	80099f4 <_svfiprintf_r>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	bfbc      	itt	lt
 800965c:	238b      	movlt	r3, #139	@ 0x8b
 800965e:	602b      	strlt	r3, [r5, #0]
 8009660:	2c00      	cmp	r4, #0
 8009662:	d0da      	beq.n	800961a <sniprintf+0x16>
 8009664:	9b02      	ldr	r3, [sp, #8]
 8009666:	2200      	movs	r2, #0
 8009668:	701a      	strb	r2, [r3, #0]
 800966a:	e7d6      	b.n	800961a <sniprintf+0x16>
 800966c:	20000018 	.word	0x20000018

08009670 <std>:
 8009670:	2300      	movs	r3, #0
 8009672:	b510      	push	{r4, lr}
 8009674:	4604      	mov	r4, r0
 8009676:	e9c0 3300 	strd	r3, r3, [r0]
 800967a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800967e:	6083      	str	r3, [r0, #8]
 8009680:	8181      	strh	r1, [r0, #12]
 8009682:	6643      	str	r3, [r0, #100]	@ 0x64
 8009684:	81c2      	strh	r2, [r0, #14]
 8009686:	6183      	str	r3, [r0, #24]
 8009688:	4619      	mov	r1, r3
 800968a:	2208      	movs	r2, #8
 800968c:	305c      	adds	r0, #92	@ 0x5c
 800968e:	f000 f921 	bl	80098d4 <memset>
 8009692:	4b0d      	ldr	r3, [pc, #52]	@ (80096c8 <std+0x58>)
 8009694:	6263      	str	r3, [r4, #36]	@ 0x24
 8009696:	4b0d      	ldr	r3, [pc, #52]	@ (80096cc <std+0x5c>)
 8009698:	62a3      	str	r3, [r4, #40]	@ 0x28
 800969a:	4b0d      	ldr	r3, [pc, #52]	@ (80096d0 <std+0x60>)
 800969c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800969e:	4b0d      	ldr	r3, [pc, #52]	@ (80096d4 <std+0x64>)
 80096a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80096a2:	4b0d      	ldr	r3, [pc, #52]	@ (80096d8 <std+0x68>)
 80096a4:	6224      	str	r4, [r4, #32]
 80096a6:	429c      	cmp	r4, r3
 80096a8:	d006      	beq.n	80096b8 <std+0x48>
 80096aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80096ae:	4294      	cmp	r4, r2
 80096b0:	d002      	beq.n	80096b8 <std+0x48>
 80096b2:	33d0      	adds	r3, #208	@ 0xd0
 80096b4:	429c      	cmp	r4, r3
 80096b6:	d105      	bne.n	80096c4 <std+0x54>
 80096b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80096bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096c0:	f000 b93a 	b.w	8009938 <__retarget_lock_init_recursive>
 80096c4:	bd10      	pop	{r4, pc}
 80096c6:	bf00      	nop
 80096c8:	0800a43d 	.word	0x0800a43d
 80096cc:	0800a45f 	.word	0x0800a45f
 80096d0:	0800a497 	.word	0x0800a497
 80096d4:	0800a4bb 	.word	0x0800a4bb
 80096d8:	200018d4 	.word	0x200018d4

080096dc <stdio_exit_handler>:
 80096dc:	4a02      	ldr	r2, [pc, #8]	@ (80096e8 <stdio_exit_handler+0xc>)
 80096de:	4903      	ldr	r1, [pc, #12]	@ (80096ec <stdio_exit_handler+0x10>)
 80096e0:	4803      	ldr	r0, [pc, #12]	@ (80096f0 <stdio_exit_handler+0x14>)
 80096e2:	f000 b869 	b.w	80097b8 <_fwalk_sglue>
 80096e6:	bf00      	nop
 80096e8:	2000000c 	.word	0x2000000c
 80096ec:	0800a3d5 	.word	0x0800a3d5
 80096f0:	2000001c 	.word	0x2000001c

080096f4 <cleanup_stdio>:
 80096f4:	6841      	ldr	r1, [r0, #4]
 80096f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009728 <cleanup_stdio+0x34>)
 80096f8:	4299      	cmp	r1, r3
 80096fa:	b510      	push	{r4, lr}
 80096fc:	4604      	mov	r4, r0
 80096fe:	d001      	beq.n	8009704 <cleanup_stdio+0x10>
 8009700:	f000 fe68 	bl	800a3d4 <_fflush_r>
 8009704:	68a1      	ldr	r1, [r4, #8]
 8009706:	4b09      	ldr	r3, [pc, #36]	@ (800972c <cleanup_stdio+0x38>)
 8009708:	4299      	cmp	r1, r3
 800970a:	d002      	beq.n	8009712 <cleanup_stdio+0x1e>
 800970c:	4620      	mov	r0, r4
 800970e:	f000 fe61 	bl	800a3d4 <_fflush_r>
 8009712:	68e1      	ldr	r1, [r4, #12]
 8009714:	4b06      	ldr	r3, [pc, #24]	@ (8009730 <cleanup_stdio+0x3c>)
 8009716:	4299      	cmp	r1, r3
 8009718:	d004      	beq.n	8009724 <cleanup_stdio+0x30>
 800971a:	4620      	mov	r0, r4
 800971c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009720:	f000 be58 	b.w	800a3d4 <_fflush_r>
 8009724:	bd10      	pop	{r4, pc}
 8009726:	bf00      	nop
 8009728:	200018d4 	.word	0x200018d4
 800972c:	2000193c 	.word	0x2000193c
 8009730:	200019a4 	.word	0x200019a4

08009734 <global_stdio_init.part.0>:
 8009734:	b510      	push	{r4, lr}
 8009736:	4b0b      	ldr	r3, [pc, #44]	@ (8009764 <global_stdio_init.part.0+0x30>)
 8009738:	4c0b      	ldr	r4, [pc, #44]	@ (8009768 <global_stdio_init.part.0+0x34>)
 800973a:	4a0c      	ldr	r2, [pc, #48]	@ (800976c <global_stdio_init.part.0+0x38>)
 800973c:	601a      	str	r2, [r3, #0]
 800973e:	4620      	mov	r0, r4
 8009740:	2200      	movs	r2, #0
 8009742:	2104      	movs	r1, #4
 8009744:	f7ff ff94 	bl	8009670 <std>
 8009748:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800974c:	2201      	movs	r2, #1
 800974e:	2109      	movs	r1, #9
 8009750:	f7ff ff8e 	bl	8009670 <std>
 8009754:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009758:	2202      	movs	r2, #2
 800975a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800975e:	2112      	movs	r1, #18
 8009760:	f7ff bf86 	b.w	8009670 <std>
 8009764:	20001a0c 	.word	0x20001a0c
 8009768:	200018d4 	.word	0x200018d4
 800976c:	080096dd 	.word	0x080096dd

08009770 <__sfp_lock_acquire>:
 8009770:	4801      	ldr	r0, [pc, #4]	@ (8009778 <__sfp_lock_acquire+0x8>)
 8009772:	f000 b8e2 	b.w	800993a <__retarget_lock_acquire_recursive>
 8009776:	bf00      	nop
 8009778:	20001a11 	.word	0x20001a11

0800977c <__sfp_lock_release>:
 800977c:	4801      	ldr	r0, [pc, #4]	@ (8009784 <__sfp_lock_release+0x8>)
 800977e:	f000 b8dd 	b.w	800993c <__retarget_lock_release_recursive>
 8009782:	bf00      	nop
 8009784:	20001a11 	.word	0x20001a11

08009788 <__sinit>:
 8009788:	b510      	push	{r4, lr}
 800978a:	4604      	mov	r4, r0
 800978c:	f7ff fff0 	bl	8009770 <__sfp_lock_acquire>
 8009790:	6a23      	ldr	r3, [r4, #32]
 8009792:	b11b      	cbz	r3, 800979c <__sinit+0x14>
 8009794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009798:	f7ff bff0 	b.w	800977c <__sfp_lock_release>
 800979c:	4b04      	ldr	r3, [pc, #16]	@ (80097b0 <__sinit+0x28>)
 800979e:	6223      	str	r3, [r4, #32]
 80097a0:	4b04      	ldr	r3, [pc, #16]	@ (80097b4 <__sinit+0x2c>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1f5      	bne.n	8009794 <__sinit+0xc>
 80097a8:	f7ff ffc4 	bl	8009734 <global_stdio_init.part.0>
 80097ac:	e7f2      	b.n	8009794 <__sinit+0xc>
 80097ae:	bf00      	nop
 80097b0:	080096f5 	.word	0x080096f5
 80097b4:	20001a0c 	.word	0x20001a0c

080097b8 <_fwalk_sglue>:
 80097b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097bc:	4607      	mov	r7, r0
 80097be:	4688      	mov	r8, r1
 80097c0:	4614      	mov	r4, r2
 80097c2:	2600      	movs	r6, #0
 80097c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097c8:	f1b9 0901 	subs.w	r9, r9, #1
 80097cc:	d505      	bpl.n	80097da <_fwalk_sglue+0x22>
 80097ce:	6824      	ldr	r4, [r4, #0]
 80097d0:	2c00      	cmp	r4, #0
 80097d2:	d1f7      	bne.n	80097c4 <_fwalk_sglue+0xc>
 80097d4:	4630      	mov	r0, r6
 80097d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097da:	89ab      	ldrh	r3, [r5, #12]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d907      	bls.n	80097f0 <_fwalk_sglue+0x38>
 80097e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097e4:	3301      	adds	r3, #1
 80097e6:	d003      	beq.n	80097f0 <_fwalk_sglue+0x38>
 80097e8:	4629      	mov	r1, r5
 80097ea:	4638      	mov	r0, r7
 80097ec:	47c0      	blx	r8
 80097ee:	4306      	orrs	r6, r0
 80097f0:	3568      	adds	r5, #104	@ 0x68
 80097f2:	e7e9      	b.n	80097c8 <_fwalk_sglue+0x10>

080097f4 <iprintf>:
 80097f4:	b40f      	push	{r0, r1, r2, r3}
 80097f6:	b507      	push	{r0, r1, r2, lr}
 80097f8:	4906      	ldr	r1, [pc, #24]	@ (8009814 <iprintf+0x20>)
 80097fa:	ab04      	add	r3, sp, #16
 80097fc:	6808      	ldr	r0, [r1, #0]
 80097fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009802:	6881      	ldr	r1, [r0, #8]
 8009804:	9301      	str	r3, [sp, #4]
 8009806:	f000 fa1b 	bl	8009c40 <_vfiprintf_r>
 800980a:	b003      	add	sp, #12
 800980c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009810:	b004      	add	sp, #16
 8009812:	4770      	bx	lr
 8009814:	20000018 	.word	0x20000018

08009818 <_puts_r>:
 8009818:	6a03      	ldr	r3, [r0, #32]
 800981a:	b570      	push	{r4, r5, r6, lr}
 800981c:	6884      	ldr	r4, [r0, #8]
 800981e:	4605      	mov	r5, r0
 8009820:	460e      	mov	r6, r1
 8009822:	b90b      	cbnz	r3, 8009828 <_puts_r+0x10>
 8009824:	f7ff ffb0 	bl	8009788 <__sinit>
 8009828:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800982a:	07db      	lsls	r3, r3, #31
 800982c:	d405      	bmi.n	800983a <_puts_r+0x22>
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	0598      	lsls	r0, r3, #22
 8009832:	d402      	bmi.n	800983a <_puts_r+0x22>
 8009834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009836:	f000 f880 	bl	800993a <__retarget_lock_acquire_recursive>
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	0719      	lsls	r1, r3, #28
 800983e:	d502      	bpl.n	8009846 <_puts_r+0x2e>
 8009840:	6923      	ldr	r3, [r4, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d135      	bne.n	80098b2 <_puts_r+0x9a>
 8009846:	4621      	mov	r1, r4
 8009848:	4628      	mov	r0, r5
 800984a:	f000 fea7 	bl	800a59c <__swsetup_r>
 800984e:	b380      	cbz	r0, 80098b2 <_puts_r+0x9a>
 8009850:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009854:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009856:	07da      	lsls	r2, r3, #31
 8009858:	d405      	bmi.n	8009866 <_puts_r+0x4e>
 800985a:	89a3      	ldrh	r3, [r4, #12]
 800985c:	059b      	lsls	r3, r3, #22
 800985e:	d402      	bmi.n	8009866 <_puts_r+0x4e>
 8009860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009862:	f000 f86b 	bl	800993c <__retarget_lock_release_recursive>
 8009866:	4628      	mov	r0, r5
 8009868:	bd70      	pop	{r4, r5, r6, pc}
 800986a:	2b00      	cmp	r3, #0
 800986c:	da04      	bge.n	8009878 <_puts_r+0x60>
 800986e:	69a2      	ldr	r2, [r4, #24]
 8009870:	429a      	cmp	r2, r3
 8009872:	dc17      	bgt.n	80098a4 <_puts_r+0x8c>
 8009874:	290a      	cmp	r1, #10
 8009876:	d015      	beq.n	80098a4 <_puts_r+0x8c>
 8009878:	6823      	ldr	r3, [r4, #0]
 800987a:	1c5a      	adds	r2, r3, #1
 800987c:	6022      	str	r2, [r4, #0]
 800987e:	7019      	strb	r1, [r3, #0]
 8009880:	68a3      	ldr	r3, [r4, #8]
 8009882:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009886:	3b01      	subs	r3, #1
 8009888:	60a3      	str	r3, [r4, #8]
 800988a:	2900      	cmp	r1, #0
 800988c:	d1ed      	bne.n	800986a <_puts_r+0x52>
 800988e:	2b00      	cmp	r3, #0
 8009890:	da11      	bge.n	80098b6 <_puts_r+0x9e>
 8009892:	4622      	mov	r2, r4
 8009894:	210a      	movs	r1, #10
 8009896:	4628      	mov	r0, r5
 8009898:	f000 fe41 	bl	800a51e <__swbuf_r>
 800989c:	3001      	adds	r0, #1
 800989e:	d0d7      	beq.n	8009850 <_puts_r+0x38>
 80098a0:	250a      	movs	r5, #10
 80098a2:	e7d7      	b.n	8009854 <_puts_r+0x3c>
 80098a4:	4622      	mov	r2, r4
 80098a6:	4628      	mov	r0, r5
 80098a8:	f000 fe39 	bl	800a51e <__swbuf_r>
 80098ac:	3001      	adds	r0, #1
 80098ae:	d1e7      	bne.n	8009880 <_puts_r+0x68>
 80098b0:	e7ce      	b.n	8009850 <_puts_r+0x38>
 80098b2:	3e01      	subs	r6, #1
 80098b4:	e7e4      	b.n	8009880 <_puts_r+0x68>
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	6022      	str	r2, [r4, #0]
 80098bc:	220a      	movs	r2, #10
 80098be:	701a      	strb	r2, [r3, #0]
 80098c0:	e7ee      	b.n	80098a0 <_puts_r+0x88>
	...

080098c4 <puts>:
 80098c4:	4b02      	ldr	r3, [pc, #8]	@ (80098d0 <puts+0xc>)
 80098c6:	4601      	mov	r1, r0
 80098c8:	6818      	ldr	r0, [r3, #0]
 80098ca:	f7ff bfa5 	b.w	8009818 <_puts_r>
 80098ce:	bf00      	nop
 80098d0:	20000018 	.word	0x20000018

080098d4 <memset>:
 80098d4:	4402      	add	r2, r0
 80098d6:	4603      	mov	r3, r0
 80098d8:	4293      	cmp	r3, r2
 80098da:	d100      	bne.n	80098de <memset+0xa>
 80098dc:	4770      	bx	lr
 80098de:	f803 1b01 	strb.w	r1, [r3], #1
 80098e2:	e7f9      	b.n	80098d8 <memset+0x4>

080098e4 <__errno>:
 80098e4:	4b01      	ldr	r3, [pc, #4]	@ (80098ec <__errno+0x8>)
 80098e6:	6818      	ldr	r0, [r3, #0]
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	20000018 	.word	0x20000018

080098f0 <__libc_init_array>:
 80098f0:	b570      	push	{r4, r5, r6, lr}
 80098f2:	4d0d      	ldr	r5, [pc, #52]	@ (8009928 <__libc_init_array+0x38>)
 80098f4:	4c0d      	ldr	r4, [pc, #52]	@ (800992c <__libc_init_array+0x3c>)
 80098f6:	1b64      	subs	r4, r4, r5
 80098f8:	10a4      	asrs	r4, r4, #2
 80098fa:	2600      	movs	r6, #0
 80098fc:	42a6      	cmp	r6, r4
 80098fe:	d109      	bne.n	8009914 <__libc_init_array+0x24>
 8009900:	4d0b      	ldr	r5, [pc, #44]	@ (8009930 <__libc_init_array+0x40>)
 8009902:	4c0c      	ldr	r4, [pc, #48]	@ (8009934 <__libc_init_array+0x44>)
 8009904:	f000 fff4 	bl	800a8f0 <_init>
 8009908:	1b64      	subs	r4, r4, r5
 800990a:	10a4      	asrs	r4, r4, #2
 800990c:	2600      	movs	r6, #0
 800990e:	42a6      	cmp	r6, r4
 8009910:	d105      	bne.n	800991e <__libc_init_array+0x2e>
 8009912:	bd70      	pop	{r4, r5, r6, pc}
 8009914:	f855 3b04 	ldr.w	r3, [r5], #4
 8009918:	4798      	blx	r3
 800991a:	3601      	adds	r6, #1
 800991c:	e7ee      	b.n	80098fc <__libc_init_array+0xc>
 800991e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009922:	4798      	blx	r3
 8009924:	3601      	adds	r6, #1
 8009926:	e7f2      	b.n	800990e <__libc_init_array+0x1e>
 8009928:	0800b26c 	.word	0x0800b26c
 800992c:	0800b26c 	.word	0x0800b26c
 8009930:	0800b26c 	.word	0x0800b26c
 8009934:	0800b270 	.word	0x0800b270

08009938 <__retarget_lock_init_recursive>:
 8009938:	4770      	bx	lr

0800993a <__retarget_lock_acquire_recursive>:
 800993a:	4770      	bx	lr

0800993c <__retarget_lock_release_recursive>:
 800993c:	4770      	bx	lr

0800993e <__ssputs_r>:
 800993e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009942:	688e      	ldr	r6, [r1, #8]
 8009944:	461f      	mov	r7, r3
 8009946:	42be      	cmp	r6, r7
 8009948:	680b      	ldr	r3, [r1, #0]
 800994a:	4682      	mov	sl, r0
 800994c:	460c      	mov	r4, r1
 800994e:	4690      	mov	r8, r2
 8009950:	d82d      	bhi.n	80099ae <__ssputs_r+0x70>
 8009952:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009956:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800995a:	d026      	beq.n	80099aa <__ssputs_r+0x6c>
 800995c:	6965      	ldr	r5, [r4, #20]
 800995e:	6909      	ldr	r1, [r1, #16]
 8009960:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009964:	eba3 0901 	sub.w	r9, r3, r1
 8009968:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800996c:	1c7b      	adds	r3, r7, #1
 800996e:	444b      	add	r3, r9
 8009970:	106d      	asrs	r5, r5, #1
 8009972:	429d      	cmp	r5, r3
 8009974:	bf38      	it	cc
 8009976:	461d      	movcc	r5, r3
 8009978:	0553      	lsls	r3, r2, #21
 800997a:	d527      	bpl.n	80099cc <__ssputs_r+0x8e>
 800997c:	4629      	mov	r1, r5
 800997e:	f000 fa99 	bl	8009eb4 <_malloc_r>
 8009982:	4606      	mov	r6, r0
 8009984:	b360      	cbz	r0, 80099e0 <__ssputs_r+0xa2>
 8009986:	6921      	ldr	r1, [r4, #16]
 8009988:	464a      	mov	r2, r9
 800998a:	f000 ff51 	bl	800a830 <memcpy>
 800998e:	89a3      	ldrh	r3, [r4, #12]
 8009990:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009998:	81a3      	strh	r3, [r4, #12]
 800999a:	6126      	str	r6, [r4, #16]
 800999c:	6165      	str	r5, [r4, #20]
 800999e:	444e      	add	r6, r9
 80099a0:	eba5 0509 	sub.w	r5, r5, r9
 80099a4:	6026      	str	r6, [r4, #0]
 80099a6:	60a5      	str	r5, [r4, #8]
 80099a8:	463e      	mov	r6, r7
 80099aa:	42be      	cmp	r6, r7
 80099ac:	d900      	bls.n	80099b0 <__ssputs_r+0x72>
 80099ae:	463e      	mov	r6, r7
 80099b0:	6820      	ldr	r0, [r4, #0]
 80099b2:	4632      	mov	r2, r6
 80099b4:	4641      	mov	r1, r8
 80099b6:	f000 fea9 	bl	800a70c <memmove>
 80099ba:	68a3      	ldr	r3, [r4, #8]
 80099bc:	1b9b      	subs	r3, r3, r6
 80099be:	60a3      	str	r3, [r4, #8]
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	4433      	add	r3, r6
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	2000      	movs	r0, #0
 80099c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099cc:	462a      	mov	r2, r5
 80099ce:	f000 fd78 	bl	800a4c2 <_realloc_r>
 80099d2:	4606      	mov	r6, r0
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d1e0      	bne.n	800999a <__ssputs_r+0x5c>
 80099d8:	6921      	ldr	r1, [r4, #16]
 80099da:	4650      	mov	r0, sl
 80099dc:	f000 ff36 	bl	800a84c <_free_r>
 80099e0:	230c      	movs	r3, #12
 80099e2:	f8ca 3000 	str.w	r3, [sl]
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099ec:	81a3      	strh	r3, [r4, #12]
 80099ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099f2:	e7e9      	b.n	80099c8 <__ssputs_r+0x8a>

080099f4 <_svfiprintf_r>:
 80099f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f8:	4698      	mov	r8, r3
 80099fa:	898b      	ldrh	r3, [r1, #12]
 80099fc:	061b      	lsls	r3, r3, #24
 80099fe:	b09d      	sub	sp, #116	@ 0x74
 8009a00:	4607      	mov	r7, r0
 8009a02:	460d      	mov	r5, r1
 8009a04:	4614      	mov	r4, r2
 8009a06:	d510      	bpl.n	8009a2a <_svfiprintf_r+0x36>
 8009a08:	690b      	ldr	r3, [r1, #16]
 8009a0a:	b973      	cbnz	r3, 8009a2a <_svfiprintf_r+0x36>
 8009a0c:	2140      	movs	r1, #64	@ 0x40
 8009a0e:	f000 fa51 	bl	8009eb4 <_malloc_r>
 8009a12:	6028      	str	r0, [r5, #0]
 8009a14:	6128      	str	r0, [r5, #16]
 8009a16:	b930      	cbnz	r0, 8009a26 <_svfiprintf_r+0x32>
 8009a18:	230c      	movs	r3, #12
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a20:	b01d      	add	sp, #116	@ 0x74
 8009a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a26:	2340      	movs	r3, #64	@ 0x40
 8009a28:	616b      	str	r3, [r5, #20]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a2e:	2320      	movs	r3, #32
 8009a30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a34:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a38:	2330      	movs	r3, #48	@ 0x30
 8009a3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009bd8 <_svfiprintf_r+0x1e4>
 8009a3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a42:	f04f 0901 	mov.w	r9, #1
 8009a46:	4623      	mov	r3, r4
 8009a48:	469a      	mov	sl, r3
 8009a4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a4e:	b10a      	cbz	r2, 8009a54 <_svfiprintf_r+0x60>
 8009a50:	2a25      	cmp	r2, #37	@ 0x25
 8009a52:	d1f9      	bne.n	8009a48 <_svfiprintf_r+0x54>
 8009a54:	ebba 0b04 	subs.w	fp, sl, r4
 8009a58:	d00b      	beq.n	8009a72 <_svfiprintf_r+0x7e>
 8009a5a:	465b      	mov	r3, fp
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	4638      	mov	r0, r7
 8009a62:	f7ff ff6c 	bl	800993e <__ssputs_r>
 8009a66:	3001      	adds	r0, #1
 8009a68:	f000 80a7 	beq.w	8009bba <_svfiprintf_r+0x1c6>
 8009a6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a6e:	445a      	add	r2, fp
 8009a70:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a72:	f89a 3000 	ldrb.w	r3, [sl]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 809f 	beq.w	8009bba <_svfiprintf_r+0x1c6>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a86:	f10a 0a01 	add.w	sl, sl, #1
 8009a8a:	9304      	str	r3, [sp, #16]
 8009a8c:	9307      	str	r3, [sp, #28]
 8009a8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a92:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a94:	4654      	mov	r4, sl
 8009a96:	2205      	movs	r2, #5
 8009a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a9c:	484e      	ldr	r0, [pc, #312]	@ (8009bd8 <_svfiprintf_r+0x1e4>)
 8009a9e:	f7f6 fbd7 	bl	8000250 <memchr>
 8009aa2:	9a04      	ldr	r2, [sp, #16]
 8009aa4:	b9d8      	cbnz	r0, 8009ade <_svfiprintf_r+0xea>
 8009aa6:	06d0      	lsls	r0, r2, #27
 8009aa8:	bf44      	itt	mi
 8009aaa:	2320      	movmi	r3, #32
 8009aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ab0:	0711      	lsls	r1, r2, #28
 8009ab2:	bf44      	itt	mi
 8009ab4:	232b      	movmi	r3, #43	@ 0x2b
 8009ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aba:	f89a 3000 	ldrb.w	r3, [sl]
 8009abe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ac0:	d015      	beq.n	8009aee <_svfiprintf_r+0xfa>
 8009ac2:	9a07      	ldr	r2, [sp, #28]
 8009ac4:	4654      	mov	r4, sl
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	f04f 0c0a 	mov.w	ip, #10
 8009acc:	4621      	mov	r1, r4
 8009ace:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ad2:	3b30      	subs	r3, #48	@ 0x30
 8009ad4:	2b09      	cmp	r3, #9
 8009ad6:	d94b      	bls.n	8009b70 <_svfiprintf_r+0x17c>
 8009ad8:	b1b0      	cbz	r0, 8009b08 <_svfiprintf_r+0x114>
 8009ada:	9207      	str	r2, [sp, #28]
 8009adc:	e014      	b.n	8009b08 <_svfiprintf_r+0x114>
 8009ade:	eba0 0308 	sub.w	r3, r0, r8
 8009ae2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	9304      	str	r3, [sp, #16]
 8009aea:	46a2      	mov	sl, r4
 8009aec:	e7d2      	b.n	8009a94 <_svfiprintf_r+0xa0>
 8009aee:	9b03      	ldr	r3, [sp, #12]
 8009af0:	1d19      	adds	r1, r3, #4
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	9103      	str	r1, [sp, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	bfbb      	ittet	lt
 8009afa:	425b      	neglt	r3, r3
 8009afc:	f042 0202 	orrlt.w	r2, r2, #2
 8009b00:	9307      	strge	r3, [sp, #28]
 8009b02:	9307      	strlt	r3, [sp, #28]
 8009b04:	bfb8      	it	lt
 8009b06:	9204      	strlt	r2, [sp, #16]
 8009b08:	7823      	ldrb	r3, [r4, #0]
 8009b0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b0c:	d10a      	bne.n	8009b24 <_svfiprintf_r+0x130>
 8009b0e:	7863      	ldrb	r3, [r4, #1]
 8009b10:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b12:	d132      	bne.n	8009b7a <_svfiprintf_r+0x186>
 8009b14:	9b03      	ldr	r3, [sp, #12]
 8009b16:	1d1a      	adds	r2, r3, #4
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	9203      	str	r2, [sp, #12]
 8009b1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b20:	3402      	adds	r4, #2
 8009b22:	9305      	str	r3, [sp, #20]
 8009b24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009be8 <_svfiprintf_r+0x1f4>
 8009b28:	7821      	ldrb	r1, [r4, #0]
 8009b2a:	2203      	movs	r2, #3
 8009b2c:	4650      	mov	r0, sl
 8009b2e:	f7f6 fb8f 	bl	8000250 <memchr>
 8009b32:	b138      	cbz	r0, 8009b44 <_svfiprintf_r+0x150>
 8009b34:	9b04      	ldr	r3, [sp, #16]
 8009b36:	eba0 000a 	sub.w	r0, r0, sl
 8009b3a:	2240      	movs	r2, #64	@ 0x40
 8009b3c:	4082      	lsls	r2, r0
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	3401      	adds	r4, #1
 8009b42:	9304      	str	r3, [sp, #16]
 8009b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b48:	4824      	ldr	r0, [pc, #144]	@ (8009bdc <_svfiprintf_r+0x1e8>)
 8009b4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b4e:	2206      	movs	r2, #6
 8009b50:	f7f6 fb7e 	bl	8000250 <memchr>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d036      	beq.n	8009bc6 <_svfiprintf_r+0x1d2>
 8009b58:	4b21      	ldr	r3, [pc, #132]	@ (8009be0 <_svfiprintf_r+0x1ec>)
 8009b5a:	bb1b      	cbnz	r3, 8009ba4 <_svfiprintf_r+0x1b0>
 8009b5c:	9b03      	ldr	r3, [sp, #12]
 8009b5e:	3307      	adds	r3, #7
 8009b60:	f023 0307 	bic.w	r3, r3, #7
 8009b64:	3308      	adds	r3, #8
 8009b66:	9303      	str	r3, [sp, #12]
 8009b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b6a:	4433      	add	r3, r6
 8009b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b6e:	e76a      	b.n	8009a46 <_svfiprintf_r+0x52>
 8009b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b74:	460c      	mov	r4, r1
 8009b76:	2001      	movs	r0, #1
 8009b78:	e7a8      	b.n	8009acc <_svfiprintf_r+0xd8>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	3401      	adds	r4, #1
 8009b7e:	9305      	str	r3, [sp, #20]
 8009b80:	4619      	mov	r1, r3
 8009b82:	f04f 0c0a 	mov.w	ip, #10
 8009b86:	4620      	mov	r0, r4
 8009b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b8c:	3a30      	subs	r2, #48	@ 0x30
 8009b8e:	2a09      	cmp	r2, #9
 8009b90:	d903      	bls.n	8009b9a <_svfiprintf_r+0x1a6>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d0c6      	beq.n	8009b24 <_svfiprintf_r+0x130>
 8009b96:	9105      	str	r1, [sp, #20]
 8009b98:	e7c4      	b.n	8009b24 <_svfiprintf_r+0x130>
 8009b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e7f0      	b.n	8009b86 <_svfiprintf_r+0x192>
 8009ba4:	ab03      	add	r3, sp, #12
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	462a      	mov	r2, r5
 8009baa:	4b0e      	ldr	r3, [pc, #56]	@ (8009be4 <_svfiprintf_r+0x1f0>)
 8009bac:	a904      	add	r1, sp, #16
 8009bae:	4638      	mov	r0, r7
 8009bb0:	f3af 8000 	nop.w
 8009bb4:	1c42      	adds	r2, r0, #1
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	d1d6      	bne.n	8009b68 <_svfiprintf_r+0x174>
 8009bba:	89ab      	ldrh	r3, [r5, #12]
 8009bbc:	065b      	lsls	r3, r3, #25
 8009bbe:	f53f af2d 	bmi.w	8009a1c <_svfiprintf_r+0x28>
 8009bc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bc4:	e72c      	b.n	8009a20 <_svfiprintf_r+0x2c>
 8009bc6:	ab03      	add	r3, sp, #12
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	462a      	mov	r2, r5
 8009bcc:	4b05      	ldr	r3, [pc, #20]	@ (8009be4 <_svfiprintf_r+0x1f0>)
 8009bce:	a904      	add	r1, sp, #16
 8009bd0:	4638      	mov	r0, r7
 8009bd2:	f000 fa5d 	bl	800a090 <_printf_i>
 8009bd6:	e7ed      	b.n	8009bb4 <_svfiprintf_r+0x1c0>
 8009bd8:	0800b230 	.word	0x0800b230
 8009bdc:	0800b23a 	.word	0x0800b23a
 8009be0:	00000000 	.word	0x00000000
 8009be4:	0800993f 	.word	0x0800993f
 8009be8:	0800b236 	.word	0x0800b236

08009bec <__sfputc_r>:
 8009bec:	6893      	ldr	r3, [r2, #8]
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	b410      	push	{r4}
 8009bf4:	6093      	str	r3, [r2, #8]
 8009bf6:	da08      	bge.n	8009c0a <__sfputc_r+0x1e>
 8009bf8:	6994      	ldr	r4, [r2, #24]
 8009bfa:	42a3      	cmp	r3, r4
 8009bfc:	db01      	blt.n	8009c02 <__sfputc_r+0x16>
 8009bfe:	290a      	cmp	r1, #10
 8009c00:	d103      	bne.n	8009c0a <__sfputc_r+0x1e>
 8009c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c06:	f000 bc8a 	b.w	800a51e <__swbuf_r>
 8009c0a:	6813      	ldr	r3, [r2, #0]
 8009c0c:	1c58      	adds	r0, r3, #1
 8009c0e:	6010      	str	r0, [r2, #0]
 8009c10:	7019      	strb	r1, [r3, #0]
 8009c12:	4608      	mov	r0, r1
 8009c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <__sfputs_r>:
 8009c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1c:	4606      	mov	r6, r0
 8009c1e:	460f      	mov	r7, r1
 8009c20:	4614      	mov	r4, r2
 8009c22:	18d5      	adds	r5, r2, r3
 8009c24:	42ac      	cmp	r4, r5
 8009c26:	d101      	bne.n	8009c2c <__sfputs_r+0x12>
 8009c28:	2000      	movs	r0, #0
 8009c2a:	e007      	b.n	8009c3c <__sfputs_r+0x22>
 8009c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c30:	463a      	mov	r2, r7
 8009c32:	4630      	mov	r0, r6
 8009c34:	f7ff ffda 	bl	8009bec <__sfputc_r>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d1f3      	bne.n	8009c24 <__sfputs_r+0xa>
 8009c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c40 <_vfiprintf_r>:
 8009c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	460d      	mov	r5, r1
 8009c46:	b09d      	sub	sp, #116	@ 0x74
 8009c48:	4614      	mov	r4, r2
 8009c4a:	4698      	mov	r8, r3
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	b118      	cbz	r0, 8009c58 <_vfiprintf_r+0x18>
 8009c50:	6a03      	ldr	r3, [r0, #32]
 8009c52:	b90b      	cbnz	r3, 8009c58 <_vfiprintf_r+0x18>
 8009c54:	f7ff fd98 	bl	8009788 <__sinit>
 8009c58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c5a:	07d9      	lsls	r1, r3, #31
 8009c5c:	d405      	bmi.n	8009c6a <_vfiprintf_r+0x2a>
 8009c5e:	89ab      	ldrh	r3, [r5, #12]
 8009c60:	059a      	lsls	r2, r3, #22
 8009c62:	d402      	bmi.n	8009c6a <_vfiprintf_r+0x2a>
 8009c64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c66:	f7ff fe68 	bl	800993a <__retarget_lock_acquire_recursive>
 8009c6a:	89ab      	ldrh	r3, [r5, #12]
 8009c6c:	071b      	lsls	r3, r3, #28
 8009c6e:	d501      	bpl.n	8009c74 <_vfiprintf_r+0x34>
 8009c70:	692b      	ldr	r3, [r5, #16]
 8009c72:	b99b      	cbnz	r3, 8009c9c <_vfiprintf_r+0x5c>
 8009c74:	4629      	mov	r1, r5
 8009c76:	4630      	mov	r0, r6
 8009c78:	f000 fc90 	bl	800a59c <__swsetup_r>
 8009c7c:	b170      	cbz	r0, 8009c9c <_vfiprintf_r+0x5c>
 8009c7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c80:	07dc      	lsls	r4, r3, #31
 8009c82:	d504      	bpl.n	8009c8e <_vfiprintf_r+0x4e>
 8009c84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c88:	b01d      	add	sp, #116	@ 0x74
 8009c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8e:	89ab      	ldrh	r3, [r5, #12]
 8009c90:	0598      	lsls	r0, r3, #22
 8009c92:	d4f7      	bmi.n	8009c84 <_vfiprintf_r+0x44>
 8009c94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c96:	f7ff fe51 	bl	800993c <__retarget_lock_release_recursive>
 8009c9a:	e7f3      	b.n	8009c84 <_vfiprintf_r+0x44>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ca0:	2320      	movs	r3, #32
 8009ca2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ca6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009caa:	2330      	movs	r3, #48	@ 0x30
 8009cac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e5c <_vfiprintf_r+0x21c>
 8009cb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cb4:	f04f 0901 	mov.w	r9, #1
 8009cb8:	4623      	mov	r3, r4
 8009cba:	469a      	mov	sl, r3
 8009cbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cc0:	b10a      	cbz	r2, 8009cc6 <_vfiprintf_r+0x86>
 8009cc2:	2a25      	cmp	r2, #37	@ 0x25
 8009cc4:	d1f9      	bne.n	8009cba <_vfiprintf_r+0x7a>
 8009cc6:	ebba 0b04 	subs.w	fp, sl, r4
 8009cca:	d00b      	beq.n	8009ce4 <_vfiprintf_r+0xa4>
 8009ccc:	465b      	mov	r3, fp
 8009cce:	4622      	mov	r2, r4
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	f7ff ffa1 	bl	8009c1a <__sfputs_r>
 8009cd8:	3001      	adds	r0, #1
 8009cda:	f000 80a7 	beq.w	8009e2c <_vfiprintf_r+0x1ec>
 8009cde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ce0:	445a      	add	r2, fp
 8009ce2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 809f 	beq.w	8009e2c <_vfiprintf_r+0x1ec>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009cf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cf8:	f10a 0a01 	add.w	sl, sl, #1
 8009cfc:	9304      	str	r3, [sp, #16]
 8009cfe:	9307      	str	r3, [sp, #28]
 8009d00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d04:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d06:	4654      	mov	r4, sl
 8009d08:	2205      	movs	r2, #5
 8009d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d0e:	4853      	ldr	r0, [pc, #332]	@ (8009e5c <_vfiprintf_r+0x21c>)
 8009d10:	f7f6 fa9e 	bl	8000250 <memchr>
 8009d14:	9a04      	ldr	r2, [sp, #16]
 8009d16:	b9d8      	cbnz	r0, 8009d50 <_vfiprintf_r+0x110>
 8009d18:	06d1      	lsls	r1, r2, #27
 8009d1a:	bf44      	itt	mi
 8009d1c:	2320      	movmi	r3, #32
 8009d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d22:	0713      	lsls	r3, r2, #28
 8009d24:	bf44      	itt	mi
 8009d26:	232b      	movmi	r3, #43	@ 0x2b
 8009d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d30:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d32:	d015      	beq.n	8009d60 <_vfiprintf_r+0x120>
 8009d34:	9a07      	ldr	r2, [sp, #28]
 8009d36:	4654      	mov	r4, sl
 8009d38:	2000      	movs	r0, #0
 8009d3a:	f04f 0c0a 	mov.w	ip, #10
 8009d3e:	4621      	mov	r1, r4
 8009d40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d44:	3b30      	subs	r3, #48	@ 0x30
 8009d46:	2b09      	cmp	r3, #9
 8009d48:	d94b      	bls.n	8009de2 <_vfiprintf_r+0x1a2>
 8009d4a:	b1b0      	cbz	r0, 8009d7a <_vfiprintf_r+0x13a>
 8009d4c:	9207      	str	r2, [sp, #28]
 8009d4e:	e014      	b.n	8009d7a <_vfiprintf_r+0x13a>
 8009d50:	eba0 0308 	sub.w	r3, r0, r8
 8009d54:	fa09 f303 	lsl.w	r3, r9, r3
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	9304      	str	r3, [sp, #16]
 8009d5c:	46a2      	mov	sl, r4
 8009d5e:	e7d2      	b.n	8009d06 <_vfiprintf_r+0xc6>
 8009d60:	9b03      	ldr	r3, [sp, #12]
 8009d62:	1d19      	adds	r1, r3, #4
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	9103      	str	r1, [sp, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	bfbb      	ittet	lt
 8009d6c:	425b      	neglt	r3, r3
 8009d6e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d72:	9307      	strge	r3, [sp, #28]
 8009d74:	9307      	strlt	r3, [sp, #28]
 8009d76:	bfb8      	it	lt
 8009d78:	9204      	strlt	r2, [sp, #16]
 8009d7a:	7823      	ldrb	r3, [r4, #0]
 8009d7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d7e:	d10a      	bne.n	8009d96 <_vfiprintf_r+0x156>
 8009d80:	7863      	ldrb	r3, [r4, #1]
 8009d82:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d84:	d132      	bne.n	8009dec <_vfiprintf_r+0x1ac>
 8009d86:	9b03      	ldr	r3, [sp, #12]
 8009d88:	1d1a      	adds	r2, r3, #4
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	9203      	str	r2, [sp, #12]
 8009d8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d92:	3402      	adds	r4, #2
 8009d94:	9305      	str	r3, [sp, #20]
 8009d96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e6c <_vfiprintf_r+0x22c>
 8009d9a:	7821      	ldrb	r1, [r4, #0]
 8009d9c:	2203      	movs	r2, #3
 8009d9e:	4650      	mov	r0, sl
 8009da0:	f7f6 fa56 	bl	8000250 <memchr>
 8009da4:	b138      	cbz	r0, 8009db6 <_vfiprintf_r+0x176>
 8009da6:	9b04      	ldr	r3, [sp, #16]
 8009da8:	eba0 000a 	sub.w	r0, r0, sl
 8009dac:	2240      	movs	r2, #64	@ 0x40
 8009dae:	4082      	lsls	r2, r0
 8009db0:	4313      	orrs	r3, r2
 8009db2:	3401      	adds	r4, #1
 8009db4:	9304      	str	r3, [sp, #16]
 8009db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dba:	4829      	ldr	r0, [pc, #164]	@ (8009e60 <_vfiprintf_r+0x220>)
 8009dbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009dc0:	2206      	movs	r2, #6
 8009dc2:	f7f6 fa45 	bl	8000250 <memchr>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d03f      	beq.n	8009e4a <_vfiprintf_r+0x20a>
 8009dca:	4b26      	ldr	r3, [pc, #152]	@ (8009e64 <_vfiprintf_r+0x224>)
 8009dcc:	bb1b      	cbnz	r3, 8009e16 <_vfiprintf_r+0x1d6>
 8009dce:	9b03      	ldr	r3, [sp, #12]
 8009dd0:	3307      	adds	r3, #7
 8009dd2:	f023 0307 	bic.w	r3, r3, #7
 8009dd6:	3308      	adds	r3, #8
 8009dd8:	9303      	str	r3, [sp, #12]
 8009dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ddc:	443b      	add	r3, r7
 8009dde:	9309      	str	r3, [sp, #36]	@ 0x24
 8009de0:	e76a      	b.n	8009cb8 <_vfiprintf_r+0x78>
 8009de2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009de6:	460c      	mov	r4, r1
 8009de8:	2001      	movs	r0, #1
 8009dea:	e7a8      	b.n	8009d3e <_vfiprintf_r+0xfe>
 8009dec:	2300      	movs	r3, #0
 8009dee:	3401      	adds	r4, #1
 8009df0:	9305      	str	r3, [sp, #20]
 8009df2:	4619      	mov	r1, r3
 8009df4:	f04f 0c0a 	mov.w	ip, #10
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dfe:	3a30      	subs	r2, #48	@ 0x30
 8009e00:	2a09      	cmp	r2, #9
 8009e02:	d903      	bls.n	8009e0c <_vfiprintf_r+0x1cc>
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d0c6      	beq.n	8009d96 <_vfiprintf_r+0x156>
 8009e08:	9105      	str	r1, [sp, #20]
 8009e0a:	e7c4      	b.n	8009d96 <_vfiprintf_r+0x156>
 8009e0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e10:	4604      	mov	r4, r0
 8009e12:	2301      	movs	r3, #1
 8009e14:	e7f0      	b.n	8009df8 <_vfiprintf_r+0x1b8>
 8009e16:	ab03      	add	r3, sp, #12
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	462a      	mov	r2, r5
 8009e1c:	4b12      	ldr	r3, [pc, #72]	@ (8009e68 <_vfiprintf_r+0x228>)
 8009e1e:	a904      	add	r1, sp, #16
 8009e20:	4630      	mov	r0, r6
 8009e22:	f3af 8000 	nop.w
 8009e26:	4607      	mov	r7, r0
 8009e28:	1c78      	adds	r0, r7, #1
 8009e2a:	d1d6      	bne.n	8009dda <_vfiprintf_r+0x19a>
 8009e2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e2e:	07d9      	lsls	r1, r3, #31
 8009e30:	d405      	bmi.n	8009e3e <_vfiprintf_r+0x1fe>
 8009e32:	89ab      	ldrh	r3, [r5, #12]
 8009e34:	059a      	lsls	r2, r3, #22
 8009e36:	d402      	bmi.n	8009e3e <_vfiprintf_r+0x1fe>
 8009e38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e3a:	f7ff fd7f 	bl	800993c <__retarget_lock_release_recursive>
 8009e3e:	89ab      	ldrh	r3, [r5, #12]
 8009e40:	065b      	lsls	r3, r3, #25
 8009e42:	f53f af1f 	bmi.w	8009c84 <_vfiprintf_r+0x44>
 8009e46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e48:	e71e      	b.n	8009c88 <_vfiprintf_r+0x48>
 8009e4a:	ab03      	add	r3, sp, #12
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	462a      	mov	r2, r5
 8009e50:	4b05      	ldr	r3, [pc, #20]	@ (8009e68 <_vfiprintf_r+0x228>)
 8009e52:	a904      	add	r1, sp, #16
 8009e54:	4630      	mov	r0, r6
 8009e56:	f000 f91b 	bl	800a090 <_printf_i>
 8009e5a:	e7e4      	b.n	8009e26 <_vfiprintf_r+0x1e6>
 8009e5c:	0800b230 	.word	0x0800b230
 8009e60:	0800b23a 	.word	0x0800b23a
 8009e64:	00000000 	.word	0x00000000
 8009e68:	08009c1b 	.word	0x08009c1b
 8009e6c:	0800b236 	.word	0x0800b236

08009e70 <sbrk_aligned>:
 8009e70:	b570      	push	{r4, r5, r6, lr}
 8009e72:	4e0f      	ldr	r6, [pc, #60]	@ (8009eb0 <sbrk_aligned+0x40>)
 8009e74:	460c      	mov	r4, r1
 8009e76:	6831      	ldr	r1, [r6, #0]
 8009e78:	4605      	mov	r5, r0
 8009e7a:	b911      	cbnz	r1, 8009e82 <sbrk_aligned+0x12>
 8009e7c:	f000 fc94 	bl	800a7a8 <_sbrk_r>
 8009e80:	6030      	str	r0, [r6, #0]
 8009e82:	4621      	mov	r1, r4
 8009e84:	4628      	mov	r0, r5
 8009e86:	f000 fc8f 	bl	800a7a8 <_sbrk_r>
 8009e8a:	1c43      	adds	r3, r0, #1
 8009e8c:	d103      	bne.n	8009e96 <sbrk_aligned+0x26>
 8009e8e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009e92:	4620      	mov	r0, r4
 8009e94:	bd70      	pop	{r4, r5, r6, pc}
 8009e96:	1cc4      	adds	r4, r0, #3
 8009e98:	f024 0403 	bic.w	r4, r4, #3
 8009e9c:	42a0      	cmp	r0, r4
 8009e9e:	d0f8      	beq.n	8009e92 <sbrk_aligned+0x22>
 8009ea0:	1a21      	subs	r1, r4, r0
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f000 fc80 	bl	800a7a8 <_sbrk_r>
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	d1f2      	bne.n	8009e92 <sbrk_aligned+0x22>
 8009eac:	e7ef      	b.n	8009e8e <sbrk_aligned+0x1e>
 8009eae:	bf00      	nop
 8009eb0:	20001a14 	.word	0x20001a14

08009eb4 <_malloc_r>:
 8009eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eb8:	1ccd      	adds	r5, r1, #3
 8009eba:	f025 0503 	bic.w	r5, r5, #3
 8009ebe:	3508      	adds	r5, #8
 8009ec0:	2d0c      	cmp	r5, #12
 8009ec2:	bf38      	it	cc
 8009ec4:	250c      	movcc	r5, #12
 8009ec6:	2d00      	cmp	r5, #0
 8009ec8:	4606      	mov	r6, r0
 8009eca:	db01      	blt.n	8009ed0 <_malloc_r+0x1c>
 8009ecc:	42a9      	cmp	r1, r5
 8009ece:	d904      	bls.n	8009eda <_malloc_r+0x26>
 8009ed0:	230c      	movs	r3, #12
 8009ed2:	6033      	str	r3, [r6, #0]
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009fb0 <_malloc_r+0xfc>
 8009ede:	f000 faa1 	bl	800a424 <__malloc_lock>
 8009ee2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ee6:	461c      	mov	r4, r3
 8009ee8:	bb44      	cbnz	r4, 8009f3c <_malloc_r+0x88>
 8009eea:	4629      	mov	r1, r5
 8009eec:	4630      	mov	r0, r6
 8009eee:	f7ff ffbf 	bl	8009e70 <sbrk_aligned>
 8009ef2:	1c43      	adds	r3, r0, #1
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	d158      	bne.n	8009faa <_malloc_r+0xf6>
 8009ef8:	f8d8 4000 	ldr.w	r4, [r8]
 8009efc:	4627      	mov	r7, r4
 8009efe:	2f00      	cmp	r7, #0
 8009f00:	d143      	bne.n	8009f8a <_malloc_r+0xd6>
 8009f02:	2c00      	cmp	r4, #0
 8009f04:	d04b      	beq.n	8009f9e <_malloc_r+0xea>
 8009f06:	6823      	ldr	r3, [r4, #0]
 8009f08:	4639      	mov	r1, r7
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	eb04 0903 	add.w	r9, r4, r3
 8009f10:	f000 fc4a 	bl	800a7a8 <_sbrk_r>
 8009f14:	4581      	cmp	r9, r0
 8009f16:	d142      	bne.n	8009f9e <_malloc_r+0xea>
 8009f18:	6821      	ldr	r1, [r4, #0]
 8009f1a:	1a6d      	subs	r5, r5, r1
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	4630      	mov	r0, r6
 8009f20:	f7ff ffa6 	bl	8009e70 <sbrk_aligned>
 8009f24:	3001      	adds	r0, #1
 8009f26:	d03a      	beq.n	8009f9e <_malloc_r+0xea>
 8009f28:	6823      	ldr	r3, [r4, #0]
 8009f2a:	442b      	add	r3, r5
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f32:	685a      	ldr	r2, [r3, #4]
 8009f34:	bb62      	cbnz	r2, 8009f90 <_malloc_r+0xdc>
 8009f36:	f8c8 7000 	str.w	r7, [r8]
 8009f3a:	e00f      	b.n	8009f5c <_malloc_r+0xa8>
 8009f3c:	6822      	ldr	r2, [r4, #0]
 8009f3e:	1b52      	subs	r2, r2, r5
 8009f40:	d420      	bmi.n	8009f84 <_malloc_r+0xd0>
 8009f42:	2a0b      	cmp	r2, #11
 8009f44:	d917      	bls.n	8009f76 <_malloc_r+0xc2>
 8009f46:	1961      	adds	r1, r4, r5
 8009f48:	42a3      	cmp	r3, r4
 8009f4a:	6025      	str	r5, [r4, #0]
 8009f4c:	bf18      	it	ne
 8009f4e:	6059      	strne	r1, [r3, #4]
 8009f50:	6863      	ldr	r3, [r4, #4]
 8009f52:	bf08      	it	eq
 8009f54:	f8c8 1000 	streq.w	r1, [r8]
 8009f58:	5162      	str	r2, [r4, r5]
 8009f5a:	604b      	str	r3, [r1, #4]
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	f000 fa67 	bl	800a430 <__malloc_unlock>
 8009f62:	f104 000b 	add.w	r0, r4, #11
 8009f66:	1d23      	adds	r3, r4, #4
 8009f68:	f020 0007 	bic.w	r0, r0, #7
 8009f6c:	1ac2      	subs	r2, r0, r3
 8009f6e:	bf1c      	itt	ne
 8009f70:	1a1b      	subne	r3, r3, r0
 8009f72:	50a3      	strne	r3, [r4, r2]
 8009f74:	e7af      	b.n	8009ed6 <_malloc_r+0x22>
 8009f76:	6862      	ldr	r2, [r4, #4]
 8009f78:	42a3      	cmp	r3, r4
 8009f7a:	bf0c      	ite	eq
 8009f7c:	f8c8 2000 	streq.w	r2, [r8]
 8009f80:	605a      	strne	r2, [r3, #4]
 8009f82:	e7eb      	b.n	8009f5c <_malloc_r+0xa8>
 8009f84:	4623      	mov	r3, r4
 8009f86:	6864      	ldr	r4, [r4, #4]
 8009f88:	e7ae      	b.n	8009ee8 <_malloc_r+0x34>
 8009f8a:	463c      	mov	r4, r7
 8009f8c:	687f      	ldr	r7, [r7, #4]
 8009f8e:	e7b6      	b.n	8009efe <_malloc_r+0x4a>
 8009f90:	461a      	mov	r2, r3
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	42a3      	cmp	r3, r4
 8009f96:	d1fb      	bne.n	8009f90 <_malloc_r+0xdc>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	6053      	str	r3, [r2, #4]
 8009f9c:	e7de      	b.n	8009f5c <_malloc_r+0xa8>
 8009f9e:	230c      	movs	r3, #12
 8009fa0:	6033      	str	r3, [r6, #0]
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f000 fa44 	bl	800a430 <__malloc_unlock>
 8009fa8:	e794      	b.n	8009ed4 <_malloc_r+0x20>
 8009faa:	6005      	str	r5, [r0, #0]
 8009fac:	e7d6      	b.n	8009f5c <_malloc_r+0xa8>
 8009fae:	bf00      	nop
 8009fb0:	20001a18 	.word	0x20001a18

08009fb4 <_printf_common>:
 8009fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb8:	4616      	mov	r6, r2
 8009fba:	4698      	mov	r8, r3
 8009fbc:	688a      	ldr	r2, [r1, #8]
 8009fbe:	690b      	ldr	r3, [r1, #16]
 8009fc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	bfb8      	it	lt
 8009fc8:	4613      	movlt	r3, r2
 8009fca:	6033      	str	r3, [r6, #0]
 8009fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009fd0:	4607      	mov	r7, r0
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	b10a      	cbz	r2, 8009fda <_printf_common+0x26>
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	6033      	str	r3, [r6, #0]
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	0699      	lsls	r1, r3, #26
 8009fde:	bf42      	ittt	mi
 8009fe0:	6833      	ldrmi	r3, [r6, #0]
 8009fe2:	3302      	addmi	r3, #2
 8009fe4:	6033      	strmi	r3, [r6, #0]
 8009fe6:	6825      	ldr	r5, [r4, #0]
 8009fe8:	f015 0506 	ands.w	r5, r5, #6
 8009fec:	d106      	bne.n	8009ffc <_printf_common+0x48>
 8009fee:	f104 0a19 	add.w	sl, r4, #25
 8009ff2:	68e3      	ldr	r3, [r4, #12]
 8009ff4:	6832      	ldr	r2, [r6, #0]
 8009ff6:	1a9b      	subs	r3, r3, r2
 8009ff8:	42ab      	cmp	r3, r5
 8009ffa:	dc26      	bgt.n	800a04a <_printf_common+0x96>
 8009ffc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a000:	6822      	ldr	r2, [r4, #0]
 800a002:	3b00      	subs	r3, #0
 800a004:	bf18      	it	ne
 800a006:	2301      	movne	r3, #1
 800a008:	0692      	lsls	r2, r2, #26
 800a00a:	d42b      	bmi.n	800a064 <_printf_common+0xb0>
 800a00c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a010:	4641      	mov	r1, r8
 800a012:	4638      	mov	r0, r7
 800a014:	47c8      	blx	r9
 800a016:	3001      	adds	r0, #1
 800a018:	d01e      	beq.n	800a058 <_printf_common+0xa4>
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	6922      	ldr	r2, [r4, #16]
 800a01e:	f003 0306 	and.w	r3, r3, #6
 800a022:	2b04      	cmp	r3, #4
 800a024:	bf02      	ittt	eq
 800a026:	68e5      	ldreq	r5, [r4, #12]
 800a028:	6833      	ldreq	r3, [r6, #0]
 800a02a:	1aed      	subeq	r5, r5, r3
 800a02c:	68a3      	ldr	r3, [r4, #8]
 800a02e:	bf0c      	ite	eq
 800a030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a034:	2500      	movne	r5, #0
 800a036:	4293      	cmp	r3, r2
 800a038:	bfc4      	itt	gt
 800a03a:	1a9b      	subgt	r3, r3, r2
 800a03c:	18ed      	addgt	r5, r5, r3
 800a03e:	2600      	movs	r6, #0
 800a040:	341a      	adds	r4, #26
 800a042:	42b5      	cmp	r5, r6
 800a044:	d11a      	bne.n	800a07c <_printf_common+0xc8>
 800a046:	2000      	movs	r0, #0
 800a048:	e008      	b.n	800a05c <_printf_common+0xa8>
 800a04a:	2301      	movs	r3, #1
 800a04c:	4652      	mov	r2, sl
 800a04e:	4641      	mov	r1, r8
 800a050:	4638      	mov	r0, r7
 800a052:	47c8      	blx	r9
 800a054:	3001      	adds	r0, #1
 800a056:	d103      	bne.n	800a060 <_printf_common+0xac>
 800a058:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a060:	3501      	adds	r5, #1
 800a062:	e7c6      	b.n	8009ff2 <_printf_common+0x3e>
 800a064:	18e1      	adds	r1, r4, r3
 800a066:	1c5a      	adds	r2, r3, #1
 800a068:	2030      	movs	r0, #48	@ 0x30
 800a06a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a06e:	4422      	add	r2, r4
 800a070:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a074:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a078:	3302      	adds	r3, #2
 800a07a:	e7c7      	b.n	800a00c <_printf_common+0x58>
 800a07c:	2301      	movs	r3, #1
 800a07e:	4622      	mov	r2, r4
 800a080:	4641      	mov	r1, r8
 800a082:	4638      	mov	r0, r7
 800a084:	47c8      	blx	r9
 800a086:	3001      	adds	r0, #1
 800a088:	d0e6      	beq.n	800a058 <_printf_common+0xa4>
 800a08a:	3601      	adds	r6, #1
 800a08c:	e7d9      	b.n	800a042 <_printf_common+0x8e>
	...

0800a090 <_printf_i>:
 800a090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a094:	7e0f      	ldrb	r7, [r1, #24]
 800a096:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a098:	2f78      	cmp	r7, #120	@ 0x78
 800a09a:	4691      	mov	r9, r2
 800a09c:	4680      	mov	r8, r0
 800a09e:	460c      	mov	r4, r1
 800a0a0:	469a      	mov	sl, r3
 800a0a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a0a6:	d807      	bhi.n	800a0b8 <_printf_i+0x28>
 800a0a8:	2f62      	cmp	r7, #98	@ 0x62
 800a0aa:	d80a      	bhi.n	800a0c2 <_printf_i+0x32>
 800a0ac:	2f00      	cmp	r7, #0
 800a0ae:	f000 80d1 	beq.w	800a254 <_printf_i+0x1c4>
 800a0b2:	2f58      	cmp	r7, #88	@ 0x58
 800a0b4:	f000 80b8 	beq.w	800a228 <_printf_i+0x198>
 800a0b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a0c0:	e03a      	b.n	800a138 <_printf_i+0xa8>
 800a0c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a0c6:	2b15      	cmp	r3, #21
 800a0c8:	d8f6      	bhi.n	800a0b8 <_printf_i+0x28>
 800a0ca:	a101      	add	r1, pc, #4	@ (adr r1, 800a0d0 <_printf_i+0x40>)
 800a0cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0d0:	0800a129 	.word	0x0800a129
 800a0d4:	0800a13d 	.word	0x0800a13d
 800a0d8:	0800a0b9 	.word	0x0800a0b9
 800a0dc:	0800a0b9 	.word	0x0800a0b9
 800a0e0:	0800a0b9 	.word	0x0800a0b9
 800a0e4:	0800a0b9 	.word	0x0800a0b9
 800a0e8:	0800a13d 	.word	0x0800a13d
 800a0ec:	0800a0b9 	.word	0x0800a0b9
 800a0f0:	0800a0b9 	.word	0x0800a0b9
 800a0f4:	0800a0b9 	.word	0x0800a0b9
 800a0f8:	0800a0b9 	.word	0x0800a0b9
 800a0fc:	0800a23b 	.word	0x0800a23b
 800a100:	0800a167 	.word	0x0800a167
 800a104:	0800a1f5 	.word	0x0800a1f5
 800a108:	0800a0b9 	.word	0x0800a0b9
 800a10c:	0800a0b9 	.word	0x0800a0b9
 800a110:	0800a25d 	.word	0x0800a25d
 800a114:	0800a0b9 	.word	0x0800a0b9
 800a118:	0800a167 	.word	0x0800a167
 800a11c:	0800a0b9 	.word	0x0800a0b9
 800a120:	0800a0b9 	.word	0x0800a0b9
 800a124:	0800a1fd 	.word	0x0800a1fd
 800a128:	6833      	ldr	r3, [r6, #0]
 800a12a:	1d1a      	adds	r2, r3, #4
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	6032      	str	r2, [r6, #0]
 800a130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a134:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a138:	2301      	movs	r3, #1
 800a13a:	e09c      	b.n	800a276 <_printf_i+0x1e6>
 800a13c:	6833      	ldr	r3, [r6, #0]
 800a13e:	6820      	ldr	r0, [r4, #0]
 800a140:	1d19      	adds	r1, r3, #4
 800a142:	6031      	str	r1, [r6, #0]
 800a144:	0606      	lsls	r6, r0, #24
 800a146:	d501      	bpl.n	800a14c <_printf_i+0xbc>
 800a148:	681d      	ldr	r5, [r3, #0]
 800a14a:	e003      	b.n	800a154 <_printf_i+0xc4>
 800a14c:	0645      	lsls	r5, r0, #25
 800a14e:	d5fb      	bpl.n	800a148 <_printf_i+0xb8>
 800a150:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a154:	2d00      	cmp	r5, #0
 800a156:	da03      	bge.n	800a160 <_printf_i+0xd0>
 800a158:	232d      	movs	r3, #45	@ 0x2d
 800a15a:	426d      	negs	r5, r5
 800a15c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a160:	4858      	ldr	r0, [pc, #352]	@ (800a2c4 <_printf_i+0x234>)
 800a162:	230a      	movs	r3, #10
 800a164:	e011      	b.n	800a18a <_printf_i+0xfa>
 800a166:	6821      	ldr	r1, [r4, #0]
 800a168:	6833      	ldr	r3, [r6, #0]
 800a16a:	0608      	lsls	r0, r1, #24
 800a16c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a170:	d402      	bmi.n	800a178 <_printf_i+0xe8>
 800a172:	0649      	lsls	r1, r1, #25
 800a174:	bf48      	it	mi
 800a176:	b2ad      	uxthmi	r5, r5
 800a178:	2f6f      	cmp	r7, #111	@ 0x6f
 800a17a:	4852      	ldr	r0, [pc, #328]	@ (800a2c4 <_printf_i+0x234>)
 800a17c:	6033      	str	r3, [r6, #0]
 800a17e:	bf14      	ite	ne
 800a180:	230a      	movne	r3, #10
 800a182:	2308      	moveq	r3, #8
 800a184:	2100      	movs	r1, #0
 800a186:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a18a:	6866      	ldr	r6, [r4, #4]
 800a18c:	60a6      	str	r6, [r4, #8]
 800a18e:	2e00      	cmp	r6, #0
 800a190:	db05      	blt.n	800a19e <_printf_i+0x10e>
 800a192:	6821      	ldr	r1, [r4, #0]
 800a194:	432e      	orrs	r6, r5
 800a196:	f021 0104 	bic.w	r1, r1, #4
 800a19a:	6021      	str	r1, [r4, #0]
 800a19c:	d04b      	beq.n	800a236 <_printf_i+0x1a6>
 800a19e:	4616      	mov	r6, r2
 800a1a0:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1a4:	fb03 5711 	mls	r7, r3, r1, r5
 800a1a8:	5dc7      	ldrb	r7, [r0, r7]
 800a1aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1ae:	462f      	mov	r7, r5
 800a1b0:	42bb      	cmp	r3, r7
 800a1b2:	460d      	mov	r5, r1
 800a1b4:	d9f4      	bls.n	800a1a0 <_printf_i+0x110>
 800a1b6:	2b08      	cmp	r3, #8
 800a1b8:	d10b      	bne.n	800a1d2 <_printf_i+0x142>
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	07df      	lsls	r7, r3, #31
 800a1be:	d508      	bpl.n	800a1d2 <_printf_i+0x142>
 800a1c0:	6923      	ldr	r3, [r4, #16]
 800a1c2:	6861      	ldr	r1, [r4, #4]
 800a1c4:	4299      	cmp	r1, r3
 800a1c6:	bfde      	ittt	le
 800a1c8:	2330      	movle	r3, #48	@ 0x30
 800a1ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1ce:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a1d2:	1b92      	subs	r2, r2, r6
 800a1d4:	6122      	str	r2, [r4, #16]
 800a1d6:	f8cd a000 	str.w	sl, [sp]
 800a1da:	464b      	mov	r3, r9
 800a1dc:	aa03      	add	r2, sp, #12
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4640      	mov	r0, r8
 800a1e2:	f7ff fee7 	bl	8009fb4 <_printf_common>
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	d14a      	bne.n	800a280 <_printf_i+0x1f0>
 800a1ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1ee:	b004      	add	sp, #16
 800a1f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f4:	6823      	ldr	r3, [r4, #0]
 800a1f6:	f043 0320 	orr.w	r3, r3, #32
 800a1fa:	6023      	str	r3, [r4, #0]
 800a1fc:	4832      	ldr	r0, [pc, #200]	@ (800a2c8 <_printf_i+0x238>)
 800a1fe:	2778      	movs	r7, #120	@ 0x78
 800a200:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	6831      	ldr	r1, [r6, #0]
 800a208:	061f      	lsls	r7, r3, #24
 800a20a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a20e:	d402      	bmi.n	800a216 <_printf_i+0x186>
 800a210:	065f      	lsls	r7, r3, #25
 800a212:	bf48      	it	mi
 800a214:	b2ad      	uxthmi	r5, r5
 800a216:	6031      	str	r1, [r6, #0]
 800a218:	07d9      	lsls	r1, r3, #31
 800a21a:	bf44      	itt	mi
 800a21c:	f043 0320 	orrmi.w	r3, r3, #32
 800a220:	6023      	strmi	r3, [r4, #0]
 800a222:	b11d      	cbz	r5, 800a22c <_printf_i+0x19c>
 800a224:	2310      	movs	r3, #16
 800a226:	e7ad      	b.n	800a184 <_printf_i+0xf4>
 800a228:	4826      	ldr	r0, [pc, #152]	@ (800a2c4 <_printf_i+0x234>)
 800a22a:	e7e9      	b.n	800a200 <_printf_i+0x170>
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	f023 0320 	bic.w	r3, r3, #32
 800a232:	6023      	str	r3, [r4, #0]
 800a234:	e7f6      	b.n	800a224 <_printf_i+0x194>
 800a236:	4616      	mov	r6, r2
 800a238:	e7bd      	b.n	800a1b6 <_printf_i+0x126>
 800a23a:	6833      	ldr	r3, [r6, #0]
 800a23c:	6825      	ldr	r5, [r4, #0]
 800a23e:	6961      	ldr	r1, [r4, #20]
 800a240:	1d18      	adds	r0, r3, #4
 800a242:	6030      	str	r0, [r6, #0]
 800a244:	062e      	lsls	r6, r5, #24
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	d501      	bpl.n	800a24e <_printf_i+0x1be>
 800a24a:	6019      	str	r1, [r3, #0]
 800a24c:	e002      	b.n	800a254 <_printf_i+0x1c4>
 800a24e:	0668      	lsls	r0, r5, #25
 800a250:	d5fb      	bpl.n	800a24a <_printf_i+0x1ba>
 800a252:	8019      	strh	r1, [r3, #0]
 800a254:	2300      	movs	r3, #0
 800a256:	6123      	str	r3, [r4, #16]
 800a258:	4616      	mov	r6, r2
 800a25a:	e7bc      	b.n	800a1d6 <_printf_i+0x146>
 800a25c:	6833      	ldr	r3, [r6, #0]
 800a25e:	1d1a      	adds	r2, r3, #4
 800a260:	6032      	str	r2, [r6, #0]
 800a262:	681e      	ldr	r6, [r3, #0]
 800a264:	6862      	ldr	r2, [r4, #4]
 800a266:	2100      	movs	r1, #0
 800a268:	4630      	mov	r0, r6
 800a26a:	f7f5 fff1 	bl	8000250 <memchr>
 800a26e:	b108      	cbz	r0, 800a274 <_printf_i+0x1e4>
 800a270:	1b80      	subs	r0, r0, r6
 800a272:	6060      	str	r0, [r4, #4]
 800a274:	6863      	ldr	r3, [r4, #4]
 800a276:	6123      	str	r3, [r4, #16]
 800a278:	2300      	movs	r3, #0
 800a27a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a27e:	e7aa      	b.n	800a1d6 <_printf_i+0x146>
 800a280:	6923      	ldr	r3, [r4, #16]
 800a282:	4632      	mov	r2, r6
 800a284:	4649      	mov	r1, r9
 800a286:	4640      	mov	r0, r8
 800a288:	47d0      	blx	sl
 800a28a:	3001      	adds	r0, #1
 800a28c:	d0ad      	beq.n	800a1ea <_printf_i+0x15a>
 800a28e:	6823      	ldr	r3, [r4, #0]
 800a290:	079b      	lsls	r3, r3, #30
 800a292:	d413      	bmi.n	800a2bc <_printf_i+0x22c>
 800a294:	68e0      	ldr	r0, [r4, #12]
 800a296:	9b03      	ldr	r3, [sp, #12]
 800a298:	4298      	cmp	r0, r3
 800a29a:	bfb8      	it	lt
 800a29c:	4618      	movlt	r0, r3
 800a29e:	e7a6      	b.n	800a1ee <_printf_i+0x15e>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	4632      	mov	r2, r6
 800a2a4:	4649      	mov	r1, r9
 800a2a6:	4640      	mov	r0, r8
 800a2a8:	47d0      	blx	sl
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	d09d      	beq.n	800a1ea <_printf_i+0x15a>
 800a2ae:	3501      	adds	r5, #1
 800a2b0:	68e3      	ldr	r3, [r4, #12]
 800a2b2:	9903      	ldr	r1, [sp, #12]
 800a2b4:	1a5b      	subs	r3, r3, r1
 800a2b6:	42ab      	cmp	r3, r5
 800a2b8:	dcf2      	bgt.n	800a2a0 <_printf_i+0x210>
 800a2ba:	e7eb      	b.n	800a294 <_printf_i+0x204>
 800a2bc:	2500      	movs	r5, #0
 800a2be:	f104 0619 	add.w	r6, r4, #25
 800a2c2:	e7f5      	b.n	800a2b0 <_printf_i+0x220>
 800a2c4:	0800b241 	.word	0x0800b241
 800a2c8:	0800b252 	.word	0x0800b252

0800a2cc <__sflush_r>:
 800a2cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d4:	0716      	lsls	r6, r2, #28
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	460c      	mov	r4, r1
 800a2da:	d454      	bmi.n	800a386 <__sflush_r+0xba>
 800a2dc:	684b      	ldr	r3, [r1, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	dc02      	bgt.n	800a2e8 <__sflush_r+0x1c>
 800a2e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	dd48      	ble.n	800a37a <__sflush_r+0xae>
 800a2e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2ea:	2e00      	cmp	r6, #0
 800a2ec:	d045      	beq.n	800a37a <__sflush_r+0xae>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a2f4:	682f      	ldr	r7, [r5, #0]
 800a2f6:	6a21      	ldr	r1, [r4, #32]
 800a2f8:	602b      	str	r3, [r5, #0]
 800a2fa:	d030      	beq.n	800a35e <__sflush_r+0x92>
 800a2fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a2fe:	89a3      	ldrh	r3, [r4, #12]
 800a300:	0759      	lsls	r1, r3, #29
 800a302:	d505      	bpl.n	800a310 <__sflush_r+0x44>
 800a304:	6863      	ldr	r3, [r4, #4]
 800a306:	1ad2      	subs	r2, r2, r3
 800a308:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a30a:	b10b      	cbz	r3, 800a310 <__sflush_r+0x44>
 800a30c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a30e:	1ad2      	subs	r2, r2, r3
 800a310:	2300      	movs	r3, #0
 800a312:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a314:	6a21      	ldr	r1, [r4, #32]
 800a316:	4628      	mov	r0, r5
 800a318:	47b0      	blx	r6
 800a31a:	1c43      	adds	r3, r0, #1
 800a31c:	89a3      	ldrh	r3, [r4, #12]
 800a31e:	d106      	bne.n	800a32e <__sflush_r+0x62>
 800a320:	6829      	ldr	r1, [r5, #0]
 800a322:	291d      	cmp	r1, #29
 800a324:	d82b      	bhi.n	800a37e <__sflush_r+0xb2>
 800a326:	4a2a      	ldr	r2, [pc, #168]	@ (800a3d0 <__sflush_r+0x104>)
 800a328:	40ca      	lsrs	r2, r1
 800a32a:	07d6      	lsls	r6, r2, #31
 800a32c:	d527      	bpl.n	800a37e <__sflush_r+0xb2>
 800a32e:	2200      	movs	r2, #0
 800a330:	6062      	str	r2, [r4, #4]
 800a332:	04d9      	lsls	r1, r3, #19
 800a334:	6922      	ldr	r2, [r4, #16]
 800a336:	6022      	str	r2, [r4, #0]
 800a338:	d504      	bpl.n	800a344 <__sflush_r+0x78>
 800a33a:	1c42      	adds	r2, r0, #1
 800a33c:	d101      	bne.n	800a342 <__sflush_r+0x76>
 800a33e:	682b      	ldr	r3, [r5, #0]
 800a340:	b903      	cbnz	r3, 800a344 <__sflush_r+0x78>
 800a342:	6560      	str	r0, [r4, #84]	@ 0x54
 800a344:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a346:	602f      	str	r7, [r5, #0]
 800a348:	b1b9      	cbz	r1, 800a37a <__sflush_r+0xae>
 800a34a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a34e:	4299      	cmp	r1, r3
 800a350:	d002      	beq.n	800a358 <__sflush_r+0x8c>
 800a352:	4628      	mov	r0, r5
 800a354:	f000 fa7a 	bl	800a84c <_free_r>
 800a358:	2300      	movs	r3, #0
 800a35a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a35c:	e00d      	b.n	800a37a <__sflush_r+0xae>
 800a35e:	2301      	movs	r3, #1
 800a360:	4628      	mov	r0, r5
 800a362:	47b0      	blx	r6
 800a364:	4602      	mov	r2, r0
 800a366:	1c50      	adds	r0, r2, #1
 800a368:	d1c9      	bne.n	800a2fe <__sflush_r+0x32>
 800a36a:	682b      	ldr	r3, [r5, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d0c6      	beq.n	800a2fe <__sflush_r+0x32>
 800a370:	2b1d      	cmp	r3, #29
 800a372:	d001      	beq.n	800a378 <__sflush_r+0xac>
 800a374:	2b16      	cmp	r3, #22
 800a376:	d11e      	bne.n	800a3b6 <__sflush_r+0xea>
 800a378:	602f      	str	r7, [r5, #0]
 800a37a:	2000      	movs	r0, #0
 800a37c:	e022      	b.n	800a3c4 <__sflush_r+0xf8>
 800a37e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a382:	b21b      	sxth	r3, r3
 800a384:	e01b      	b.n	800a3be <__sflush_r+0xf2>
 800a386:	690f      	ldr	r7, [r1, #16]
 800a388:	2f00      	cmp	r7, #0
 800a38a:	d0f6      	beq.n	800a37a <__sflush_r+0xae>
 800a38c:	0793      	lsls	r3, r2, #30
 800a38e:	680e      	ldr	r6, [r1, #0]
 800a390:	bf08      	it	eq
 800a392:	694b      	ldreq	r3, [r1, #20]
 800a394:	600f      	str	r7, [r1, #0]
 800a396:	bf18      	it	ne
 800a398:	2300      	movne	r3, #0
 800a39a:	eba6 0807 	sub.w	r8, r6, r7
 800a39e:	608b      	str	r3, [r1, #8]
 800a3a0:	f1b8 0f00 	cmp.w	r8, #0
 800a3a4:	dde9      	ble.n	800a37a <__sflush_r+0xae>
 800a3a6:	6a21      	ldr	r1, [r4, #32]
 800a3a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a3aa:	4643      	mov	r3, r8
 800a3ac:	463a      	mov	r2, r7
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	47b0      	blx	r6
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	dc08      	bgt.n	800a3c8 <__sflush_r+0xfc>
 800a3b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3be:	81a3      	strh	r3, [r4, #12]
 800a3c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c8:	4407      	add	r7, r0
 800a3ca:	eba8 0800 	sub.w	r8, r8, r0
 800a3ce:	e7e7      	b.n	800a3a0 <__sflush_r+0xd4>
 800a3d0:	20400001 	.word	0x20400001

0800a3d4 <_fflush_r>:
 800a3d4:	b538      	push	{r3, r4, r5, lr}
 800a3d6:	690b      	ldr	r3, [r1, #16]
 800a3d8:	4605      	mov	r5, r0
 800a3da:	460c      	mov	r4, r1
 800a3dc:	b913      	cbnz	r3, 800a3e4 <_fflush_r+0x10>
 800a3de:	2500      	movs	r5, #0
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	bd38      	pop	{r3, r4, r5, pc}
 800a3e4:	b118      	cbz	r0, 800a3ee <_fflush_r+0x1a>
 800a3e6:	6a03      	ldr	r3, [r0, #32]
 800a3e8:	b90b      	cbnz	r3, 800a3ee <_fflush_r+0x1a>
 800a3ea:	f7ff f9cd 	bl	8009788 <__sinit>
 800a3ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d0f3      	beq.n	800a3de <_fflush_r+0xa>
 800a3f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a3f8:	07d0      	lsls	r0, r2, #31
 800a3fa:	d404      	bmi.n	800a406 <_fflush_r+0x32>
 800a3fc:	0599      	lsls	r1, r3, #22
 800a3fe:	d402      	bmi.n	800a406 <_fflush_r+0x32>
 800a400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a402:	f7ff fa9a 	bl	800993a <__retarget_lock_acquire_recursive>
 800a406:	4628      	mov	r0, r5
 800a408:	4621      	mov	r1, r4
 800a40a:	f7ff ff5f 	bl	800a2cc <__sflush_r>
 800a40e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a410:	07da      	lsls	r2, r3, #31
 800a412:	4605      	mov	r5, r0
 800a414:	d4e4      	bmi.n	800a3e0 <_fflush_r+0xc>
 800a416:	89a3      	ldrh	r3, [r4, #12]
 800a418:	059b      	lsls	r3, r3, #22
 800a41a:	d4e1      	bmi.n	800a3e0 <_fflush_r+0xc>
 800a41c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a41e:	f7ff fa8d 	bl	800993c <__retarget_lock_release_recursive>
 800a422:	e7dd      	b.n	800a3e0 <_fflush_r+0xc>

0800a424 <__malloc_lock>:
 800a424:	4801      	ldr	r0, [pc, #4]	@ (800a42c <__malloc_lock+0x8>)
 800a426:	f7ff ba88 	b.w	800993a <__retarget_lock_acquire_recursive>
 800a42a:	bf00      	nop
 800a42c:	20001a10 	.word	0x20001a10

0800a430 <__malloc_unlock>:
 800a430:	4801      	ldr	r0, [pc, #4]	@ (800a438 <__malloc_unlock+0x8>)
 800a432:	f7ff ba83 	b.w	800993c <__retarget_lock_release_recursive>
 800a436:	bf00      	nop
 800a438:	20001a10 	.word	0x20001a10

0800a43c <__sread>:
 800a43c:	b510      	push	{r4, lr}
 800a43e:	460c      	mov	r4, r1
 800a440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a444:	f000 f99e 	bl	800a784 <_read_r>
 800a448:	2800      	cmp	r0, #0
 800a44a:	bfab      	itete	ge
 800a44c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a44e:	89a3      	ldrhlt	r3, [r4, #12]
 800a450:	181b      	addge	r3, r3, r0
 800a452:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a456:	bfac      	ite	ge
 800a458:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a45a:	81a3      	strhlt	r3, [r4, #12]
 800a45c:	bd10      	pop	{r4, pc}

0800a45e <__swrite>:
 800a45e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a462:	461f      	mov	r7, r3
 800a464:	898b      	ldrh	r3, [r1, #12]
 800a466:	05db      	lsls	r3, r3, #23
 800a468:	4605      	mov	r5, r0
 800a46a:	460c      	mov	r4, r1
 800a46c:	4616      	mov	r6, r2
 800a46e:	d505      	bpl.n	800a47c <__swrite+0x1e>
 800a470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a474:	2302      	movs	r3, #2
 800a476:	2200      	movs	r2, #0
 800a478:	f000 f972 	bl	800a760 <_lseek_r>
 800a47c:	89a3      	ldrh	r3, [r4, #12]
 800a47e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a482:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a486:	81a3      	strh	r3, [r4, #12]
 800a488:	4632      	mov	r2, r6
 800a48a:	463b      	mov	r3, r7
 800a48c:	4628      	mov	r0, r5
 800a48e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a492:	f000 b999 	b.w	800a7c8 <_write_r>

0800a496 <__sseek>:
 800a496:	b510      	push	{r4, lr}
 800a498:	460c      	mov	r4, r1
 800a49a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a49e:	f000 f95f 	bl	800a760 <_lseek_r>
 800a4a2:	1c43      	adds	r3, r0, #1
 800a4a4:	89a3      	ldrh	r3, [r4, #12]
 800a4a6:	bf15      	itete	ne
 800a4a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a4aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a4ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a4b2:	81a3      	strheq	r3, [r4, #12]
 800a4b4:	bf18      	it	ne
 800a4b6:	81a3      	strhne	r3, [r4, #12]
 800a4b8:	bd10      	pop	{r4, pc}

0800a4ba <__sclose>:
 800a4ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4be:	f000 b995 	b.w	800a7ec <_close_r>

0800a4c2 <_realloc_r>:
 800a4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c6:	4607      	mov	r7, r0
 800a4c8:	4614      	mov	r4, r2
 800a4ca:	460d      	mov	r5, r1
 800a4cc:	b921      	cbnz	r1, 800a4d8 <_realloc_r+0x16>
 800a4ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	f7ff bcee 	b.w	8009eb4 <_malloc_r>
 800a4d8:	b92a      	cbnz	r2, 800a4e6 <_realloc_r+0x24>
 800a4da:	f000 f9b7 	bl	800a84c <_free_r>
 800a4de:	4625      	mov	r5, r4
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e6:	f000 f9fb 	bl	800a8e0 <_malloc_usable_size_r>
 800a4ea:	4284      	cmp	r4, r0
 800a4ec:	4606      	mov	r6, r0
 800a4ee:	d802      	bhi.n	800a4f6 <_realloc_r+0x34>
 800a4f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4f4:	d8f4      	bhi.n	800a4e0 <_realloc_r+0x1e>
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	f7ff fcdb 	bl	8009eb4 <_malloc_r>
 800a4fe:	4680      	mov	r8, r0
 800a500:	b908      	cbnz	r0, 800a506 <_realloc_r+0x44>
 800a502:	4645      	mov	r5, r8
 800a504:	e7ec      	b.n	800a4e0 <_realloc_r+0x1e>
 800a506:	42b4      	cmp	r4, r6
 800a508:	4622      	mov	r2, r4
 800a50a:	4629      	mov	r1, r5
 800a50c:	bf28      	it	cs
 800a50e:	4632      	movcs	r2, r6
 800a510:	f000 f98e 	bl	800a830 <memcpy>
 800a514:	4629      	mov	r1, r5
 800a516:	4638      	mov	r0, r7
 800a518:	f000 f998 	bl	800a84c <_free_r>
 800a51c:	e7f1      	b.n	800a502 <_realloc_r+0x40>

0800a51e <__swbuf_r>:
 800a51e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a520:	460e      	mov	r6, r1
 800a522:	4614      	mov	r4, r2
 800a524:	4605      	mov	r5, r0
 800a526:	b118      	cbz	r0, 800a530 <__swbuf_r+0x12>
 800a528:	6a03      	ldr	r3, [r0, #32]
 800a52a:	b90b      	cbnz	r3, 800a530 <__swbuf_r+0x12>
 800a52c:	f7ff f92c 	bl	8009788 <__sinit>
 800a530:	69a3      	ldr	r3, [r4, #24]
 800a532:	60a3      	str	r3, [r4, #8]
 800a534:	89a3      	ldrh	r3, [r4, #12]
 800a536:	071a      	lsls	r2, r3, #28
 800a538:	d501      	bpl.n	800a53e <__swbuf_r+0x20>
 800a53a:	6923      	ldr	r3, [r4, #16]
 800a53c:	b943      	cbnz	r3, 800a550 <__swbuf_r+0x32>
 800a53e:	4621      	mov	r1, r4
 800a540:	4628      	mov	r0, r5
 800a542:	f000 f82b 	bl	800a59c <__swsetup_r>
 800a546:	b118      	cbz	r0, 800a550 <__swbuf_r+0x32>
 800a548:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a54c:	4638      	mov	r0, r7
 800a54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a550:	6823      	ldr	r3, [r4, #0]
 800a552:	6922      	ldr	r2, [r4, #16]
 800a554:	1a98      	subs	r0, r3, r2
 800a556:	6963      	ldr	r3, [r4, #20]
 800a558:	b2f6      	uxtb	r6, r6
 800a55a:	4283      	cmp	r3, r0
 800a55c:	4637      	mov	r7, r6
 800a55e:	dc05      	bgt.n	800a56c <__swbuf_r+0x4e>
 800a560:	4621      	mov	r1, r4
 800a562:	4628      	mov	r0, r5
 800a564:	f7ff ff36 	bl	800a3d4 <_fflush_r>
 800a568:	2800      	cmp	r0, #0
 800a56a:	d1ed      	bne.n	800a548 <__swbuf_r+0x2a>
 800a56c:	68a3      	ldr	r3, [r4, #8]
 800a56e:	3b01      	subs	r3, #1
 800a570:	60a3      	str	r3, [r4, #8]
 800a572:	6823      	ldr	r3, [r4, #0]
 800a574:	1c5a      	adds	r2, r3, #1
 800a576:	6022      	str	r2, [r4, #0]
 800a578:	701e      	strb	r6, [r3, #0]
 800a57a:	6962      	ldr	r2, [r4, #20]
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	429a      	cmp	r2, r3
 800a580:	d004      	beq.n	800a58c <__swbuf_r+0x6e>
 800a582:	89a3      	ldrh	r3, [r4, #12]
 800a584:	07db      	lsls	r3, r3, #31
 800a586:	d5e1      	bpl.n	800a54c <__swbuf_r+0x2e>
 800a588:	2e0a      	cmp	r6, #10
 800a58a:	d1df      	bne.n	800a54c <__swbuf_r+0x2e>
 800a58c:	4621      	mov	r1, r4
 800a58e:	4628      	mov	r0, r5
 800a590:	f7ff ff20 	bl	800a3d4 <_fflush_r>
 800a594:	2800      	cmp	r0, #0
 800a596:	d0d9      	beq.n	800a54c <__swbuf_r+0x2e>
 800a598:	e7d6      	b.n	800a548 <__swbuf_r+0x2a>
	...

0800a59c <__swsetup_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	4b29      	ldr	r3, [pc, #164]	@ (800a644 <__swsetup_r+0xa8>)
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	6818      	ldr	r0, [r3, #0]
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	b118      	cbz	r0, 800a5b0 <__swsetup_r+0x14>
 800a5a8:	6a03      	ldr	r3, [r0, #32]
 800a5aa:	b90b      	cbnz	r3, 800a5b0 <__swsetup_r+0x14>
 800a5ac:	f7ff f8ec 	bl	8009788 <__sinit>
 800a5b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5b4:	0719      	lsls	r1, r3, #28
 800a5b6:	d422      	bmi.n	800a5fe <__swsetup_r+0x62>
 800a5b8:	06da      	lsls	r2, r3, #27
 800a5ba:	d407      	bmi.n	800a5cc <__swsetup_r+0x30>
 800a5bc:	2209      	movs	r2, #9
 800a5be:	602a      	str	r2, [r5, #0]
 800a5c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5c4:	81a3      	strh	r3, [r4, #12]
 800a5c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5ca:	e033      	b.n	800a634 <__swsetup_r+0x98>
 800a5cc:	0758      	lsls	r0, r3, #29
 800a5ce:	d512      	bpl.n	800a5f6 <__swsetup_r+0x5a>
 800a5d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5d2:	b141      	cbz	r1, 800a5e6 <__swsetup_r+0x4a>
 800a5d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5d8:	4299      	cmp	r1, r3
 800a5da:	d002      	beq.n	800a5e2 <__swsetup_r+0x46>
 800a5dc:	4628      	mov	r0, r5
 800a5de:	f000 f935 	bl	800a84c <_free_r>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5e6:	89a3      	ldrh	r3, [r4, #12]
 800a5e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a5ec:	81a3      	strh	r3, [r4, #12]
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	6063      	str	r3, [r4, #4]
 800a5f2:	6923      	ldr	r3, [r4, #16]
 800a5f4:	6023      	str	r3, [r4, #0]
 800a5f6:	89a3      	ldrh	r3, [r4, #12]
 800a5f8:	f043 0308 	orr.w	r3, r3, #8
 800a5fc:	81a3      	strh	r3, [r4, #12]
 800a5fe:	6923      	ldr	r3, [r4, #16]
 800a600:	b94b      	cbnz	r3, 800a616 <__swsetup_r+0x7a>
 800a602:	89a3      	ldrh	r3, [r4, #12]
 800a604:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a60c:	d003      	beq.n	800a616 <__swsetup_r+0x7a>
 800a60e:	4621      	mov	r1, r4
 800a610:	4628      	mov	r0, r5
 800a612:	f000 f83f 	bl	800a694 <__smakebuf_r>
 800a616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a61a:	f013 0201 	ands.w	r2, r3, #1
 800a61e:	d00a      	beq.n	800a636 <__swsetup_r+0x9a>
 800a620:	2200      	movs	r2, #0
 800a622:	60a2      	str	r2, [r4, #8]
 800a624:	6962      	ldr	r2, [r4, #20]
 800a626:	4252      	negs	r2, r2
 800a628:	61a2      	str	r2, [r4, #24]
 800a62a:	6922      	ldr	r2, [r4, #16]
 800a62c:	b942      	cbnz	r2, 800a640 <__swsetup_r+0xa4>
 800a62e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a632:	d1c5      	bne.n	800a5c0 <__swsetup_r+0x24>
 800a634:	bd38      	pop	{r3, r4, r5, pc}
 800a636:	0799      	lsls	r1, r3, #30
 800a638:	bf58      	it	pl
 800a63a:	6962      	ldrpl	r2, [r4, #20]
 800a63c:	60a2      	str	r2, [r4, #8]
 800a63e:	e7f4      	b.n	800a62a <__swsetup_r+0x8e>
 800a640:	2000      	movs	r0, #0
 800a642:	e7f7      	b.n	800a634 <__swsetup_r+0x98>
 800a644:	20000018 	.word	0x20000018

0800a648 <__swhatbuf_r>:
 800a648:	b570      	push	{r4, r5, r6, lr}
 800a64a:	460c      	mov	r4, r1
 800a64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a650:	2900      	cmp	r1, #0
 800a652:	b096      	sub	sp, #88	@ 0x58
 800a654:	4615      	mov	r5, r2
 800a656:	461e      	mov	r6, r3
 800a658:	da0d      	bge.n	800a676 <__swhatbuf_r+0x2e>
 800a65a:	89a3      	ldrh	r3, [r4, #12]
 800a65c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a660:	f04f 0100 	mov.w	r1, #0
 800a664:	bf14      	ite	ne
 800a666:	2340      	movne	r3, #64	@ 0x40
 800a668:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a66c:	2000      	movs	r0, #0
 800a66e:	6031      	str	r1, [r6, #0]
 800a670:	602b      	str	r3, [r5, #0]
 800a672:	b016      	add	sp, #88	@ 0x58
 800a674:	bd70      	pop	{r4, r5, r6, pc}
 800a676:	466a      	mov	r2, sp
 800a678:	f000 f8c8 	bl	800a80c <_fstat_r>
 800a67c:	2800      	cmp	r0, #0
 800a67e:	dbec      	blt.n	800a65a <__swhatbuf_r+0x12>
 800a680:	9901      	ldr	r1, [sp, #4]
 800a682:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a686:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a68a:	4259      	negs	r1, r3
 800a68c:	4159      	adcs	r1, r3
 800a68e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a692:	e7eb      	b.n	800a66c <__swhatbuf_r+0x24>

0800a694 <__smakebuf_r>:
 800a694:	898b      	ldrh	r3, [r1, #12]
 800a696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a698:	079d      	lsls	r5, r3, #30
 800a69a:	4606      	mov	r6, r0
 800a69c:	460c      	mov	r4, r1
 800a69e:	d507      	bpl.n	800a6b0 <__smakebuf_r+0x1c>
 800a6a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a6a4:	6023      	str	r3, [r4, #0]
 800a6a6:	6123      	str	r3, [r4, #16]
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	6163      	str	r3, [r4, #20]
 800a6ac:	b003      	add	sp, #12
 800a6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6b0:	ab01      	add	r3, sp, #4
 800a6b2:	466a      	mov	r2, sp
 800a6b4:	f7ff ffc8 	bl	800a648 <__swhatbuf_r>
 800a6b8:	9f00      	ldr	r7, [sp, #0]
 800a6ba:	4605      	mov	r5, r0
 800a6bc:	4639      	mov	r1, r7
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f7ff fbf8 	bl	8009eb4 <_malloc_r>
 800a6c4:	b948      	cbnz	r0, 800a6da <__smakebuf_r+0x46>
 800a6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ca:	059a      	lsls	r2, r3, #22
 800a6cc:	d4ee      	bmi.n	800a6ac <__smakebuf_r+0x18>
 800a6ce:	f023 0303 	bic.w	r3, r3, #3
 800a6d2:	f043 0302 	orr.w	r3, r3, #2
 800a6d6:	81a3      	strh	r3, [r4, #12]
 800a6d8:	e7e2      	b.n	800a6a0 <__smakebuf_r+0xc>
 800a6da:	89a3      	ldrh	r3, [r4, #12]
 800a6dc:	6020      	str	r0, [r4, #0]
 800a6de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6e2:	81a3      	strh	r3, [r4, #12]
 800a6e4:	9b01      	ldr	r3, [sp, #4]
 800a6e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a6ea:	b15b      	cbz	r3, 800a704 <__smakebuf_r+0x70>
 800a6ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	f000 f825 	bl	800a740 <_isatty_r>
 800a6f6:	b128      	cbz	r0, 800a704 <__smakebuf_r+0x70>
 800a6f8:	89a3      	ldrh	r3, [r4, #12]
 800a6fa:	f023 0303 	bic.w	r3, r3, #3
 800a6fe:	f043 0301 	orr.w	r3, r3, #1
 800a702:	81a3      	strh	r3, [r4, #12]
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	431d      	orrs	r5, r3
 800a708:	81a5      	strh	r5, [r4, #12]
 800a70a:	e7cf      	b.n	800a6ac <__smakebuf_r+0x18>

0800a70c <memmove>:
 800a70c:	4288      	cmp	r0, r1
 800a70e:	b510      	push	{r4, lr}
 800a710:	eb01 0402 	add.w	r4, r1, r2
 800a714:	d902      	bls.n	800a71c <memmove+0x10>
 800a716:	4284      	cmp	r4, r0
 800a718:	4623      	mov	r3, r4
 800a71a:	d807      	bhi.n	800a72c <memmove+0x20>
 800a71c:	1e43      	subs	r3, r0, #1
 800a71e:	42a1      	cmp	r1, r4
 800a720:	d008      	beq.n	800a734 <memmove+0x28>
 800a722:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a72a:	e7f8      	b.n	800a71e <memmove+0x12>
 800a72c:	4402      	add	r2, r0
 800a72e:	4601      	mov	r1, r0
 800a730:	428a      	cmp	r2, r1
 800a732:	d100      	bne.n	800a736 <memmove+0x2a>
 800a734:	bd10      	pop	{r4, pc}
 800a736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a73a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a73e:	e7f7      	b.n	800a730 <memmove+0x24>

0800a740 <_isatty_r>:
 800a740:	b538      	push	{r3, r4, r5, lr}
 800a742:	4d06      	ldr	r5, [pc, #24]	@ (800a75c <_isatty_r+0x1c>)
 800a744:	2300      	movs	r3, #0
 800a746:	4604      	mov	r4, r0
 800a748:	4608      	mov	r0, r1
 800a74a:	602b      	str	r3, [r5, #0]
 800a74c:	f7f6 ff7a 	bl	8001644 <_isatty>
 800a750:	1c43      	adds	r3, r0, #1
 800a752:	d102      	bne.n	800a75a <_isatty_r+0x1a>
 800a754:	682b      	ldr	r3, [r5, #0]
 800a756:	b103      	cbz	r3, 800a75a <_isatty_r+0x1a>
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	bd38      	pop	{r3, r4, r5, pc}
 800a75c:	20001a1c 	.word	0x20001a1c

0800a760 <_lseek_r>:
 800a760:	b538      	push	{r3, r4, r5, lr}
 800a762:	4d07      	ldr	r5, [pc, #28]	@ (800a780 <_lseek_r+0x20>)
 800a764:	4604      	mov	r4, r0
 800a766:	4608      	mov	r0, r1
 800a768:	4611      	mov	r1, r2
 800a76a:	2200      	movs	r2, #0
 800a76c:	602a      	str	r2, [r5, #0]
 800a76e:	461a      	mov	r2, r3
 800a770:	f7f6 ff73 	bl	800165a <_lseek>
 800a774:	1c43      	adds	r3, r0, #1
 800a776:	d102      	bne.n	800a77e <_lseek_r+0x1e>
 800a778:	682b      	ldr	r3, [r5, #0]
 800a77a:	b103      	cbz	r3, 800a77e <_lseek_r+0x1e>
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	bd38      	pop	{r3, r4, r5, pc}
 800a780:	20001a1c 	.word	0x20001a1c

0800a784 <_read_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	4d07      	ldr	r5, [pc, #28]	@ (800a7a4 <_read_r+0x20>)
 800a788:	4604      	mov	r4, r0
 800a78a:	4608      	mov	r0, r1
 800a78c:	4611      	mov	r1, r2
 800a78e:	2200      	movs	r2, #0
 800a790:	602a      	str	r2, [r5, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	f7f6 ff1d 	bl	80015d2 <_read>
 800a798:	1c43      	adds	r3, r0, #1
 800a79a:	d102      	bne.n	800a7a2 <_read_r+0x1e>
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	b103      	cbz	r3, 800a7a2 <_read_r+0x1e>
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	20001a1c 	.word	0x20001a1c

0800a7a8 <_sbrk_r>:
 800a7a8:	b538      	push	{r3, r4, r5, lr}
 800a7aa:	4d06      	ldr	r5, [pc, #24]	@ (800a7c4 <_sbrk_r+0x1c>)
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	4608      	mov	r0, r1
 800a7b2:	602b      	str	r3, [r5, #0]
 800a7b4:	f7f6 ff5e 	bl	8001674 <_sbrk>
 800a7b8:	1c43      	adds	r3, r0, #1
 800a7ba:	d102      	bne.n	800a7c2 <_sbrk_r+0x1a>
 800a7bc:	682b      	ldr	r3, [r5, #0]
 800a7be:	b103      	cbz	r3, 800a7c2 <_sbrk_r+0x1a>
 800a7c0:	6023      	str	r3, [r4, #0]
 800a7c2:	bd38      	pop	{r3, r4, r5, pc}
 800a7c4:	20001a1c 	.word	0x20001a1c

0800a7c8 <_write_r>:
 800a7c8:	b538      	push	{r3, r4, r5, lr}
 800a7ca:	4d07      	ldr	r5, [pc, #28]	@ (800a7e8 <_write_r+0x20>)
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	4608      	mov	r0, r1
 800a7d0:	4611      	mov	r1, r2
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	602a      	str	r2, [r5, #0]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f7f6 faee 	bl	8000db8 <_write>
 800a7dc:	1c43      	adds	r3, r0, #1
 800a7de:	d102      	bne.n	800a7e6 <_write_r+0x1e>
 800a7e0:	682b      	ldr	r3, [r5, #0]
 800a7e2:	b103      	cbz	r3, 800a7e6 <_write_r+0x1e>
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	bd38      	pop	{r3, r4, r5, pc}
 800a7e8:	20001a1c 	.word	0x20001a1c

0800a7ec <_close_r>:
 800a7ec:	b538      	push	{r3, r4, r5, lr}
 800a7ee:	4d06      	ldr	r5, [pc, #24]	@ (800a808 <_close_r+0x1c>)
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	4608      	mov	r0, r1
 800a7f6:	602b      	str	r3, [r5, #0]
 800a7f8:	f7f6 ff08 	bl	800160c <_close>
 800a7fc:	1c43      	adds	r3, r0, #1
 800a7fe:	d102      	bne.n	800a806 <_close_r+0x1a>
 800a800:	682b      	ldr	r3, [r5, #0]
 800a802:	b103      	cbz	r3, 800a806 <_close_r+0x1a>
 800a804:	6023      	str	r3, [r4, #0]
 800a806:	bd38      	pop	{r3, r4, r5, pc}
 800a808:	20001a1c 	.word	0x20001a1c

0800a80c <_fstat_r>:
 800a80c:	b538      	push	{r3, r4, r5, lr}
 800a80e:	4d07      	ldr	r5, [pc, #28]	@ (800a82c <_fstat_r+0x20>)
 800a810:	2300      	movs	r3, #0
 800a812:	4604      	mov	r4, r0
 800a814:	4608      	mov	r0, r1
 800a816:	4611      	mov	r1, r2
 800a818:	602b      	str	r3, [r5, #0]
 800a81a:	f7f6 ff03 	bl	8001624 <_fstat>
 800a81e:	1c43      	adds	r3, r0, #1
 800a820:	d102      	bne.n	800a828 <_fstat_r+0x1c>
 800a822:	682b      	ldr	r3, [r5, #0]
 800a824:	b103      	cbz	r3, 800a828 <_fstat_r+0x1c>
 800a826:	6023      	str	r3, [r4, #0]
 800a828:	bd38      	pop	{r3, r4, r5, pc}
 800a82a:	bf00      	nop
 800a82c:	20001a1c 	.word	0x20001a1c

0800a830 <memcpy>:
 800a830:	440a      	add	r2, r1
 800a832:	4291      	cmp	r1, r2
 800a834:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a838:	d100      	bne.n	800a83c <memcpy+0xc>
 800a83a:	4770      	bx	lr
 800a83c:	b510      	push	{r4, lr}
 800a83e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a842:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a846:	4291      	cmp	r1, r2
 800a848:	d1f9      	bne.n	800a83e <memcpy+0xe>
 800a84a:	bd10      	pop	{r4, pc}

0800a84c <_free_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	4605      	mov	r5, r0
 800a850:	2900      	cmp	r1, #0
 800a852:	d041      	beq.n	800a8d8 <_free_r+0x8c>
 800a854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a858:	1f0c      	subs	r4, r1, #4
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	bfb8      	it	lt
 800a85e:	18e4      	addlt	r4, r4, r3
 800a860:	f7ff fde0 	bl	800a424 <__malloc_lock>
 800a864:	4a1d      	ldr	r2, [pc, #116]	@ (800a8dc <_free_r+0x90>)
 800a866:	6813      	ldr	r3, [r2, #0]
 800a868:	b933      	cbnz	r3, 800a878 <_free_r+0x2c>
 800a86a:	6063      	str	r3, [r4, #4]
 800a86c:	6014      	str	r4, [r2, #0]
 800a86e:	4628      	mov	r0, r5
 800a870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a874:	f7ff bddc 	b.w	800a430 <__malloc_unlock>
 800a878:	42a3      	cmp	r3, r4
 800a87a:	d908      	bls.n	800a88e <_free_r+0x42>
 800a87c:	6820      	ldr	r0, [r4, #0]
 800a87e:	1821      	adds	r1, r4, r0
 800a880:	428b      	cmp	r3, r1
 800a882:	bf01      	itttt	eq
 800a884:	6819      	ldreq	r1, [r3, #0]
 800a886:	685b      	ldreq	r3, [r3, #4]
 800a888:	1809      	addeq	r1, r1, r0
 800a88a:	6021      	streq	r1, [r4, #0]
 800a88c:	e7ed      	b.n	800a86a <_free_r+0x1e>
 800a88e:	461a      	mov	r2, r3
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	b10b      	cbz	r3, 800a898 <_free_r+0x4c>
 800a894:	42a3      	cmp	r3, r4
 800a896:	d9fa      	bls.n	800a88e <_free_r+0x42>
 800a898:	6811      	ldr	r1, [r2, #0]
 800a89a:	1850      	adds	r0, r2, r1
 800a89c:	42a0      	cmp	r0, r4
 800a89e:	d10b      	bne.n	800a8b8 <_free_r+0x6c>
 800a8a0:	6820      	ldr	r0, [r4, #0]
 800a8a2:	4401      	add	r1, r0
 800a8a4:	1850      	adds	r0, r2, r1
 800a8a6:	4283      	cmp	r3, r0
 800a8a8:	6011      	str	r1, [r2, #0]
 800a8aa:	d1e0      	bne.n	800a86e <_free_r+0x22>
 800a8ac:	6818      	ldr	r0, [r3, #0]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	6053      	str	r3, [r2, #4]
 800a8b2:	4408      	add	r0, r1
 800a8b4:	6010      	str	r0, [r2, #0]
 800a8b6:	e7da      	b.n	800a86e <_free_r+0x22>
 800a8b8:	d902      	bls.n	800a8c0 <_free_r+0x74>
 800a8ba:	230c      	movs	r3, #12
 800a8bc:	602b      	str	r3, [r5, #0]
 800a8be:	e7d6      	b.n	800a86e <_free_r+0x22>
 800a8c0:	6820      	ldr	r0, [r4, #0]
 800a8c2:	1821      	adds	r1, r4, r0
 800a8c4:	428b      	cmp	r3, r1
 800a8c6:	bf04      	itt	eq
 800a8c8:	6819      	ldreq	r1, [r3, #0]
 800a8ca:	685b      	ldreq	r3, [r3, #4]
 800a8cc:	6063      	str	r3, [r4, #4]
 800a8ce:	bf04      	itt	eq
 800a8d0:	1809      	addeq	r1, r1, r0
 800a8d2:	6021      	streq	r1, [r4, #0]
 800a8d4:	6054      	str	r4, [r2, #4]
 800a8d6:	e7ca      	b.n	800a86e <_free_r+0x22>
 800a8d8:	bd38      	pop	{r3, r4, r5, pc}
 800a8da:	bf00      	nop
 800a8dc:	20001a18 	.word	0x20001a18

0800a8e0 <_malloc_usable_size_r>:
 800a8e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e4:	1f18      	subs	r0, r3, #4
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	bfbc      	itt	lt
 800a8ea:	580b      	ldrlt	r3, [r1, r0]
 800a8ec:	18c0      	addlt	r0, r0, r3
 800a8ee:	4770      	bx	lr

0800a8f0 <_init>:
 800a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f2:	bf00      	nop
 800a8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f6:	bc08      	pop	{r3}
 800a8f8:	469e      	mov	lr, r3
 800a8fa:	4770      	bx	lr

0800a8fc <_fini>:
 800a8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fe:	bf00      	nop
 800a900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a902:	bc08      	pop	{r3}
 800a904:	469e      	mov	lr, r3
 800a906:	4770      	bx	lr
